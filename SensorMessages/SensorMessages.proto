syntax = "proto3";

option java_package = "com.smartbow.sensormessages";


message HighPrecisionIncliData{
   double angle = 1;
   double chip_temp = 2;
   double raw_angle = 3;
   double digital_angle = 4;
   double cali_angle = 5;
}

message TempHumiData{
   int32 addr = 1;
   double temp = 2;
   double humi = 3;
}

message VibraWireData{
   int32 db = 1;
   double freq = 2;
   double temp = 3;
   double data = 4;
   double voltage = 5;
   double sample_interval = 6;
   int32 addr = 7;
}

message AnemometerData{
   double wind_direction = 1;
   double wind_speed = 2;
   double temp = 3;
   double humi = 4;
   double dev_temp = 5;
   double smooth_wind_speed = 6;
   double smooth_wind_direction = 7;
   double air_pressure = 8;
   int32 addr = 9;
   int32 heat_mode = 10;
   int32 err_env = 11;
   int32 speed_status = 12;
   int32 err_heat = 13;
   int32 err_ntc = 14;
   int32 heat_status = 15;
   int32 worktime = 16;
   string serial_number = 17;
   int32 version = 18;
}

message InclinationData{
   double absolute_angle = 1;
   double primary_projection = 2;
   double secondary_projection = 3;
}

message VoltageData{
   double data = 1;
   double sample_interval = 2;
   int32 sample_type = 3;
}

message CurrentData{
   double data = 1;
   double sample_interval = 2;
   int32 sample_type = 3;
}

message ResistanceData{
   double data = 1;
   double sample_interval = 2;
   int32 sample_type = 3;
}

message MillivoltData{
   double data = 1;
   double sample_interval = 2;
   int32 sample_type = 3;
}

message VibrationData{
   double data = 1;
   string range = 2;
   double sample_interval = 3;
   double speed = 101;
}

message CablePeaksData{
   double average_power = 1;
   string axis = 2;
   double base_freq = 3;
   double freq = 4;
   string odr = 5;
   repeated int32 peaks = 6;
   int32 peaks_num = 7;
   repeated int32 values = 8;
   int32 quality = 9;
   string range = 10;
   double extent = 11;
   double cable = 101;
   uint32 point_width = 102;
}

message SettlementData{
   int32 addr = 1;
   double raw_value = 2;
   double value = 3;
   double relative_value = 4;
   double temp = 5;
   double adc_value = 6;
   double raw_press = 7;
   int32 worktime = 8;
   int32 system_status = 9;
   double pre_cali_raw_value = 10;
   double pre_cali_relative_value = 11;
}

message StressData{
   double data = 1;
   double sample_interval = 2;
}

message IncliHCF410V1{
   double x = 1;
   double y = 2;
   double z = 3;
}

message GRTU1000{
   int32 gas_channel_1 = 1;
   int32 gas_channel_2 = 2;
   int32 gas_channel_3 = 3;
   int32 gas_channel_4 = 4;
   double temp = 5;
}

message HOS3000CH4{
   int32 addr = 1;
   int32 gas_strength = 2;
}

message DistanceData{
   double distance = 1;
   int32 addr = 2;
   int32 measure_mode = 3;
   int32 fan_work_mode = 4;
   int32 sensor_status = 5;
   int32 baudrate = 6;
}

message Uart485ForHFS716Sample{
   double temperature_or_ressum = 1;
   double Hz_or_resratio = 2;
   int32 channel_unixtime = 3;
   int32 addr = 4;
   string serial_number = 5;
   int32 version = 6;
}

message VoltageDataV1{
   double millivolt = 1;
   double temp = 2;
   double voltage = 3;
}

message TopInfoNodeData{
   int32 SQI = 1;
   int32 parent = 2;
   double battery_voltage = 3;
   string product_type = 4;
   int32 reboot_count = 5;
   int32 rf_channel = 6;
   int32 sampling = 7;
   int32 version = 8;
   int32 state = 9;
   int32 incli_marked = 10;
   int32 synced = 11;
   int32 worktime = 12;
   int32 is_on = 13;
   int32 hour = 14;
   int32 minute = 15;
   int32 second = 16;
   int32 interval = 17;
   int32 number = 18;
   string node_type = 19;
   int32 last_reset_type = 20;
   int32 rf_power = 21;
   int32 top_state = 22;
   int32 is_sync_error_t = 23;
   int32 sensor_init = 24;
   int32 send_delay = 25;
   int32 tx_mode = 26;
}

message PowerStateNodeData{
   int32 battery_num = 1;
   int32 battery_type = 2;
   int32 cha_state = 3;
   int32 chr_state = 4;
   double temp = 5;
   double battery_voltage = 6;
   double current = 7;
}

message SerialNumber{
   string serial_number = 1;
}

message SoftVersion{
   int32 version = 1;
}

message ClockTaskTimeInfoSensorNode{
   int32 clock1_is_on = 1;
   int32 clock1_hour = 2;
   int32 clock1_minute = 3;
   int32 clock1_second = 4;
   int32 clock1_interval = 5;
   int32 clock1_number = 6;
   int32 clock2_is_on = 7;
   int32 clock2_hour = 8;
   int32 clock2_minute = 9;
   int32 clock2_second = 10;
   int32 clock2_interval = 11;
   int32 clock2_number = 12;
}

message HoldRegisterData1HCF700{
   int32 addr = 1;
   double init_value = 2;
   double density = 3;
}

message HoldRegisterData2HCF700{
   int32 addr = 1;
   double g_value = 2;
   double full_sensor_value = 3;
   double full_adc_value = 4;
   double zero_adc_value = 5;
}

message InputRegisterDataHCF700{
   int32 version = 1;
   int32 worktime = 2;
   int32 addr = 3;
   double relative_value = 4;
   double raw_value = 5;
   double temp = 6;
   double adc_value = 7;
}

message GRTU1000Status{
   int32 longdata = 1;
   int32 latidata = 2;
   int32 latitude = 3;
   int32 longitude = 4;
}

message WeightingData{
   string LaneID = 101;
   string LaneIDFlyOver = 102;
   double Speed = 103;
   string Plate = 104;
   string VehType = 105;
   double GrossLoad = 106;
   string error = 107;
   string AL = 108;
   string GV = 109;
   string OS = 110;
   string ImageFile = 111;
   double AxleLoad1 = 112;
   double AxleLoad2 = 113;
   double AxleLoad3 = 114;
   double AxleLoad4 = 115;
   double AxleLoad5 = 116;
   double AxleLoad6 = 117;
   double AxleLoad7 = 118;
   double AxleLoad8 = 119;
   double AxleSpacing1 = 120;
   double AxleSpacing2 = 121;
   double AxleSpacing3 = 122;
   double AxleSpacing4 = 123;
   double AxleSpacing5 = 124;
   double AxleSpacing6 = 125;
   double AxleSpacing7 = 126;
   double carLength = 127;
   string cross_lane = 128;
   string reverse = 129;
   uint32 axle_count = 130;
   double chassis_freq = 131;
   double temp = 132;
}

message CalibrationConfigHCF2000{
   int32 number = 1;
   double temp = 2;
   double offset = 3;
}

message InitIncliInfo{
   int32 incli_marked = 1;
   int32 main_direction = 2;
   sint32 origin_x = 3;
   sint32 origin_y = 4;
   sint32 origin_z = 5;
}

message InitIncliHCF200Done{
   int32 error_t = 1;
}

message ClockTaskSampleInfoAndTriggerSampleInfo{
   string odr = 1;
   string range = 2;
   string axis = 3;
   int32 period = 4;
   int32 def_sample_type = 5;
   int32 main_direction = 6;
   int32 incli_marked = 7;
   string odr_s = 8;
   string range_s = 9;
   string axis_s = 10;
   int32 period_s = 11;
   int32 def_sample_type_s = 12;
   int32 main_direction_s = 13;
   int32 incli_marked_s = 14;
   int32 is_set_trigger = 15;
   string monitor_odr = 16;
   string monitor_axis = 17;
   string trigger_odr = 18;
   string trigger_axis = 19;
   string trigger_range = 20;
   double trigger_sensitivity = 21;
   double trigger_threshold = 22;
   int32 trigger_period = 23;
}

message StdNodeHGR100B2{
   int32 reference_node = 1;
}

message ExistNodesHGR100B2{
   repeated int32 node_bit = 1;
}

message ClockTaskSampleInfo{
   string odr = 1;
   string range = 2;
   string axis = 3;
   string odr_s = 4;
   string range_s = 5;
   string axis_s = 6;
   int32 channel_bit = 7;
   int32 channel_bit_s = 8;
   int32 sample_pattern = 9;
   int32 sample_pattern_s = 10;
   int32 main_direction = 11;
   int32 period = 12;
   int32 period_s = 13;
   int32 local_channel_bit = 14;
   int32 ext_channel_bit = 15;
   int32 local_channel_bit_s = 16;
   int32 ext_channel_bit_s = 17;
   int32 is_continuous = 18;
   int32 is_out_power = 19;
   int32 is_factory_init = 20;
   int32 is_user_init = 21;
   int32 is_continuous_s = 22;
   int32 is_factory_init_s = 23;
   int32 is_user_init_s = 24;
}

message ChannelInfoHFS316{
   int32 max_channel_num = 1;
   int32 channel_info = 2;
}

message ChannelInfoHIS100{
   int32 channel1_config = 1;
   int32 channel2_config = 2;
   int32 channel3_config = 3;
   int32 channel4_config = 4;
   int32 voltage = 5;
}

message ChannelFreqInfo{
   repeated double channel_freq = 1;
}

message CaliInfoHIS100{
   int32 channel_bit = 1;
   int32 number = 2;
   int32 calibration_num = 3;
   sint32 sensor_data = 4;
   sint32 standard_data = 5;
}

message Uart485AutoSampleFlag{
   int32 auto_sample_interval = 1;
   int32 disconnect_interval = 2;
   int32 sample_collect_interval = 3;
   int32 auto_sample_flag = 4;
   int32 baudrate = 5;
}

message Uart485CmdList{
   int32 sub_type = 1;
   int32 main_type = 2;
   string product_type = 3;
   int32 sample_data_length = 4;
   repeated int32 sample_instruct = 5;
   int32 collect_data_length = 6;
   repeated int32 collect_instruct = 7;
}

message Uart485TypeList{
   int32 addr = 1;
   int32 main_type = 2;
   int32 sub_type = 3;
   string product_type = 4;
}

message ShapeArrayHCF1100{
   int32 addr = 1;
   double acc_x = 2;
   double acc_y = 3;
   double acc_z = 4;
   double acc_temp = 5;
   double magnetic_x = 6;
   double magnetic_y = 7;
   double magnetic_z = 8;
   double length = 9;
   string serial_number = 10;
   double pitch = 11;
   double roll = 12;
   double yaw = 13;
   double pitch_init = 14;
   double roll_init = 15;
   double yaw_init = 16;
   double coordinate_x = 17;
   double coordinate_y = 18;
   double coordinate_z = 19;
   double coordinate_init_x = 20;
   double coordinate_init_y = 21;
   double coordinate_init_z = 22;
   double x = 101;
   double y = 102;
   double z = 103;
}

message NodeInfoRSUC{
   repeated int32 addr = 1;
   repeated int32 sample_ins_type = 2;
   repeated int32 product_ins_type = 3;
   repeated string product_type = 4;
   repeated int32 node_type = 5;
}

message InstructionInfoRSUC{
   string product_type = 1;
   int32 product_ins_type = 2;
   int32 product_ins_type_index = 3;
   repeated int32 ins_buf = 4;
}

message TransparentDataRSUC{
   int32 product_type = 1;
   int32 product_ins_type = 2;
   int32 data_len = 3;
   repeated int32 data = 4;
}

message ChildNodeTransNode{
   int32 is_snoop = 1;
   int32 total = 2;
   int32 snoop_total = 3;
   int32 sub_total = 4;
   repeated int32 node_in_network = 5;
}

message NodeWhiteListEntryTransNode{
   string serial_number = 1;
}

message CurrentDataV1{
   double current = 1;
}

message SampleParameterDataRSUC{
   int32 product_pow_sup_mode = 1;
   int32 voltage = 2;
   int32 running_mode = 3;
   int32 analog_sample_type = 4;
   int32 odr = 5;
   int32 period = 6;
   int32 pow_on_interval = 7;
   int32 retrieve_interval = 8;
}

message SensorConfigInfoHIS400{
   double k_value = 1;
   double s_value = 2;
   double value_0 = 3;
}

message VirtualModuleNAODU{
   double val = 101;
   repeated double kx = 102;
   repeated double kk = 103;
}

message VirtualModuleHCF700_485_Naodu{
   double val = 101;
}

message VirtualModuleHCF1100{
   int32 group = 101;
   repeated double x1_0 = 102;
   repeated double x2_0 = 103;
   repeated double z_0 = 104;
   repeated double x1_1 = 105;
   repeated double x2_1 = 106;
   repeated double z_1 = 107;
}

message DistanceHOS910030I1RSUCCont{
   double data = 1;
   int32 addr = 2;
   double sample_interval = 3;
}

message AnalogSampleDataCont{
   double data = 1;
   double sample_interval = 2;
}

message TopInfoRSUC{
   int32 version = 1;
   string serial_number = 2;
}

message InclinationRSUC{
   double angle_x = 1;
   double angle_y = 2;
   double angle_z = 3;
}

message DistanceRSUCCont{
   double data = 1;
   int32 addr = 2;
   double sample_interval = 3;
}

message SampleMode{
   int32 sample_mode = 1;
}

message TriggerSampleConfigInfo{
   int32 send_mode = 1;
   int32 is_trigger_set = 2;
   int32 is_triggered = 3;
   int32 wind_threshold = 4;
   int32 wind_debounce = 5;
}

message TriggerEvent{
   int32 sample_type = 1;
}

message IncliContData{
   double angle = 101;
   double sample_interval = 102;
}

message TempHumiContData{
   double temp = 101;
   double humi = 102;
   double air_pressure = 103;
   double sample_interval = 104;
}

message DistanceContData{
   double distance = 101;
   double sample_interval = 102;
}

message StrainContData{
   double strain = 101;
   double sample_interval = 102;
}

message SettlementContData{
   double deflection = 101;
   double sample_interval = 102;
}

message AnemometerContData{
   double wind_speed = 101;
   double wind_direction = 102;
}

message VirtualModuleSmoothSettlement{
   double new_value = 101;
   double t_value = 102;
}

message StrainData{
   double strain = 101;
}

message StressGapData{
   double stress = 101;
}

message GPSContData{
   double x = 101;
   double y = 102;
   double z = 103;
}

message SetRfChannelInfo{
   int32 rf_channel = 1;
}

message GetCablePeaksSampleData{
   int32 odr = 1;
   int32 range = 2;
   int32 axis = 3;
}

message GetVibSampleData{
   int32 odr = 1;
   int32 range = 2;
   int32 axis = 3;
   int32 period = 4;
}

message GetVibraWireSampleData{
   int32 channel_bit = 1;
   int32 sample_pattern = 2;
   int32 local_channel_bit = 3;
   int32 ext_channel_bit = 4;
}

message GetElectricityHIS100{
   int32 channel_bit = 1;
   int32 odr = 2;
   int32 period = 3;
   int32 is_continuous = 4;
   int32 is_out_power = 5;
   int32 is_factory_init = 6;
   int32 is_user_init = 7;
}

message GetStressHIS300{
   int32 channel = 1;
   int32 odr = 2;
   int32 period = 3;
   int32 is_continuous = 4;
}

message GetStressHIS500{
   double k_value = 1;
   int32 odr = 2;
   int32 period = 3;
}

message GetPressHGR100B2{
   int32 sample_pattern = 1;
}

message GetAnemometerFC307{
   int32 addr = 1;
}

message GetMonitorIncliHCF420{
   int32 response_time = 1;
   int32 sample_interval = 2;
   double angle_threshold_1 = 3;
   double angle_threshold_2 = 4;
   double angle_threshold_3 = 5;
   int32 group = 6;
}

message SetMainDirectionInclination{
   int32 main_direction = 1;
}

message ConfigClockTask{
   int32 is_on_1 = 1;
   int32 hour_1 = 2;
   int32 minute_1 = 3;
   int32 second_1 = 4;
   int32 interval_1 = 5;
   int32 number_1 = 6;
   int32 is_on_2 = 7;
   int32 hour_2 = 8;
   int32 minute_2 = 9;
   int32 second_2 = 10;
   int32 interval_2 = 11;
   int32 number_2 = 12;
   int32 odr = 13;
   int32 range = 14;
   int32 axis = 15;
   int32 period = 16;
   int32 def_sample_type = 17;
   int32 channel_bit = 18;
   int32 sample_pattern = 19;
   int32 is_continuous = 20;
   int32 is_out_power = 21;
   int32 is_factory_init = 22;
   int32 is_user_init = 23;
   double k_value = 24;
   int32 local_channel_bit = 25;
   int32 ext_channel_bit = 26;
   int32 odr_s = 27;
   int32 range_s = 28;
   int32 axis_s = 29;
   int32 period_s = 30;
   int32 def_sample_type_s = 31;
   int32 channel_bit_s = 32;
   int32 sample_pattern_s = 33;
   int32 is_continuous_s = 34;
   int32 is_out_power_s = 35;
   int32 is_factory_init_s = 36;
   int32 is_user_init_s = 37;
   double k_value_s = 38;
   int32 local_channel_bit_s = 39;
   int32 ext_channel_bit_s = 40;
   int32 running_mode = 41;
   int32 analog_sample_type = 42;
}

message SetTriggerConfigInfo{
   int32 is_set_trigger = 1;
   int32 monitor_odr = 2;
   int32 monitor_axis = 3;
   int32 trigger_odr = 4;
   int32 trigger_axis = 5;
   int32 trigger_range = 6;
   double trigger_sensitivity = 7;
   double trigger_threshold = 8;
   int32 trigger_period = 9;
}

message SimpleSampleHIS700{
   int32 disconnect_timeout = 1;
}

message OnceInstructionHIS700{
   int32 addr = 1;
   int32 disconnect_timeout = 2;
}

message TwiceInstructionHIS700{
   int32 addr = 1;
   int32 disconnect_timeout = 2;
   int32 sample_collect_interval = 3;
}

message HIS700AutoSample{
   int32 is_on = 1;
   int32 sample_collect_interval = 2;
   int32 auto_sample_interval = 3;
   int32 disconnect_timeout = 4;
}

message SetStdNodeHGR100B2{
   int32 reference_node = 1;
}

message SetBaudrateHIS700{
   int32 baudrate = 1;
}

message SetChannelConfigHFS316{
   int32 channel_config_bit = 1;
}

message GetGatewayCtrlInfo{
   string command = 101;
}

message AddCalibrationHCF2000{
   double temp = 1;
   double offset = 2;
}

message RegistryOpHCF700HGR100B2{
   int32 addr = 1;
}

message SetHoldRegHCF700HGR100B2{
   int32 dest_addr = 1;
   int32 set_addr = 2;
   int32 channel_bit = 3;
   double init_value = 4;
   double density = 5;
   double g_value = 6;
   double full_adc_value = 7;
   double zero_adc_value = 8;
   double full_sensor_value = 9;
}

message SetIncliCalibration{
   int32 incli_marked = 1;
   int32 main_direction = 2;
   sint32 origin_x = 3;
   sint32 origin_y = 4;
   sint32 origin_z = 5;
}

message SetChannelFreqInfo{
   repeated double channel_freq = 1;
}

message SetChannelConfigHIS100{
   int32 channel1_config = 1;
   int32 channel2_config = 2;
   int32 channel3_config = 3;
   int32 channel4_config = 4;
}

message SetCaliHIS100{
   int32 channel_bit = 1;
   int32 number = 2;
   sint32 sensor_data = 3;
   sint32 standard_data = 4;
}

message RemoveCaliHIS100{
   int32 channel_bit = 1;
}

message ChangeInstructionHIS700{
   int32 main_type = 1;
   int32 sub_type = 2;
   int32 disconnect_timeout = 3;
   int32 is_operate_eeprom = 4;
   int32 is_write = 5;
   int32 is_sample_instruct = 6;
   int32 instruct_length = 7;
   repeated int32 instruct = 8;
}

message ChangeNodeWhiteListTransNode{
   repeated int32 serial_number = 1;
}

message CloseWhiteListTransNode{
   int32 close_flag = 1;
}

message AddNodeRSUC{
   int32 sample_ins_type = 1;
   int32 product_ins_type = 2;
   int32 product_type = 3;
   int32 node_type = 4;
   int32 node_num = 5;
   repeated int32 addr = 6;
}

message AddOneInsRSUC{
   int32 product_ins_type = 1;
   int32 product_type = 2;
   int32 ins_len = 3;
   repeated int32 ins = 4;
}

message AddTwoInsRSUC{
   int32 product_ins_type = 1;
   int32 product_type = 2;
   int32 sample_ins_len = 3;
   int32 retrieve_ins_len = 4;
   repeated int32 ins = 5;
}

message DeleteNodeInfoRSUC{
   int32 addr = 1;
}

message DeleteInstructionRSUC{
   int32 product_type = 1;
}

message SetSampleParameterRSUC{
   int32 pow_on_interval = 1;
   int32 retrieve_interval = 2;
   int32 product_pow_sup_mode = 3;
   int32 product_pow_sup_vol = 4;
}

message TransparentInstructionRSUC{
   int32 product_type = 1;
   int32 product_ins_type = 2;
   int32 data_len = 3;
   repeated int32 data = 4;
}

message GetSampleDataRSUC{
   int32 addr = 1;
   int32 sample_ins_type = 2;
   int32 product_ins_type = 3;
   int32 product_type = 4;
}

message GetAnalogDataALUC{
   int32 analog_sample_type = 1;
   int32 odr = 2;
   int32 period = 3;
}

message SetCalibrationALUC{
   int32 analog_sample_type = 1;
}

message SetSensorConfigHIS400{
   int32 k_value = 1;
   int32 s_value = 2;
}

message GetStressData{
   int32 odr = 1;
}

message GetRS485DataRSUCCont{
   int32 odr = 1;
   int32 period = 2;
}

message SetSampleMode{
   int32 sample_mode = 1;
}

message SetTransMode{
   int32 send_mode = 1;
}

message SetTriggerConfig{
   int32 wind_threshold = 1;
   int32 wind_debounce = 2;
}
