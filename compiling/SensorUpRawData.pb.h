// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorUpRawData.proto

#ifndef PROTOBUF_INCLUDED_SensorUpRawData_2eproto
#define PROTOBUF_INCLUDED_SensorUpRawData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SensorPackets/SensorPackets.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SensorUpRawData_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SensorUpRawData_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SensorUpRawData_2eproto();
namespace SensorMessages {
class SensorUpRawData;
class SensorUpRawDataDefaultTypeInternal;
extern SensorUpRawDataDefaultTypeInternal _SensorUpRawData_default_instance_;
}  // namespace SensorMessages
namespace google {
namespace protobuf {
template<> ::SensorMessages::SensorUpRawData* Arena::CreateMaybeMessage<::SensorMessages::SensorUpRawData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SensorMessages {

// ===================================================================

class SensorUpRawData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorMessages.SensorUpRawData) */ {
 public:
  SensorUpRawData();
  virtual ~SensorUpRawData();

  SensorUpRawData(const SensorUpRawData& from);

  inline SensorUpRawData& operator=(const SensorUpRawData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorUpRawData(SensorUpRawData&& from) noexcept
    : SensorUpRawData() {
    *this = ::std::move(from);
  }

  inline SensorUpRawData& operator=(SensorUpRawData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorUpRawData& default_instance();

  enum UpRawDataPacketsCase {
    kTopinfoSensornode213734 = 20,
    kTopinfoTransnode2133170 = 21,
    UPRAWDATAPACKETS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorUpRawData* internal_default_instance() {
    return reinterpret_cast<const SensorUpRawData*>(
               &_SensorUpRawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorUpRawData* other);
  friend void swap(SensorUpRawData& a, SensorUpRawData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorUpRawData* New() const final {
    return CreateMaybeMessage<SensorUpRawData>(nullptr);
  }

  SensorUpRawData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorUpRawData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorUpRawData& from);
  void MergeFrom(const SensorUpRawData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorUpRawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string packet_name = 1;
  void clear_packet_name();
  static const int kPacketNameFieldNumber = 1;
  const ::std::string& packet_name() const;
  void set_packet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_packet_name(::std::string&& value);
  #endif
  void set_packet_name(const char* value);
  void set_packet_name(const char* value, size_t size);
  ::std::string* mutable_packet_name();
  ::std::string* release_packet_name();
  void set_allocated_packet_name(::std::string* packet_name);

  // string gateway_id = 3;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 3;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // int32 nodeid = 2;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 2;
  ::google::protobuf::int32 nodeid() const;
  void set_nodeid(::google::protobuf::int32 value);

  // uint32 unix_time = 4;
  void clear_unix_time();
  static const int kUnixTimeFieldNumber = 4;
  ::google::protobuf::uint32 unix_time() const;
  void set_unix_time(::google::protobuf::uint32 value);

  // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
  bool has_topinfo_sensornode_213_7_34() const;
  void clear_topinfo_sensornode_213_7_34();
  static const int kTopinfoSensornode213734FieldNumber = 20;
  const ::TopInfoSensorNode_213_7_34& topinfo_sensornode_213_7_34() const;
  ::TopInfoSensorNode_213_7_34* release_topinfo_sensornode_213_7_34();
  ::TopInfoSensorNode_213_7_34* mutable_topinfo_sensornode_213_7_34();
  void set_allocated_topinfo_sensornode_213_7_34(::TopInfoSensorNode_213_7_34* topinfo_sensornode_213_7_34);

  // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
  bool has_topinfo_transnode_213_3_1_7_0() const;
  void clear_topinfo_transnode_213_3_1_7_0();
  static const int kTopinfoTransnode2133170FieldNumber = 21;
  const ::TopInfoTransNode_213_3_1_7_0& topinfo_transnode_213_3_1_7_0() const;
  ::TopInfoTransNode_213_3_1_7_0* release_topinfo_transnode_213_3_1_7_0();
  ::TopInfoTransNode_213_3_1_7_0* mutable_topinfo_transnode_213_3_1_7_0();
  void set_allocated_topinfo_transnode_213_3_1_7_0(::TopInfoTransNode_213_3_1_7_0* topinfo_transnode_213_3_1_7_0);

  void clear_UpRawDataPackets();
  UpRawDataPacketsCase UpRawDataPackets_case() const;
  // @@protoc_insertion_point(class_scope:SensorMessages.SensorUpRawData)
 private:
  class HasBitSetters;
  void set_has_topinfo_sensornode_213_7_34();
  void set_has_topinfo_transnode_213_3_1_7_0();

  inline bool has_UpRawDataPackets() const;
  inline void clear_has_UpRawDataPackets();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr packet_name_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::int32 nodeid_;
  ::google::protobuf::uint32 unix_time_;
  union UpRawDataPacketsUnion {
    UpRawDataPacketsUnion() {}
    ::TopInfoSensorNode_213_7_34* topinfo_sensornode_213_7_34_;
    ::TopInfoTransNode_213_3_1_7_0* topinfo_transnode_213_3_1_7_0_;
  } UpRawDataPackets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SensorUpRawData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorUpRawData

// string packet_name = 1;
inline void SensorUpRawData::clear_packet_name() {
  packet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorUpRawData::packet_name() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.packet_name)
  return packet_name_.GetNoArena();
}
inline void SensorUpRawData::set_packet_name(const ::std::string& value) {
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpRawData.packet_name)
}
#if LANG_CXX11
inline void SensorUpRawData::set_packet_name(::std::string&& value) {
  
  packet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SensorMessages.SensorUpRawData.packet_name)
}
#endif
inline void SensorUpRawData::set_packet_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMessages.SensorUpRawData.packet_name)
}
inline void SensorUpRawData::set_packet_name(const char* value, size_t size) {
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMessages.SensorUpRawData.packet_name)
}
inline ::std::string* SensorUpRawData::mutable_packet_name() {
  
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpRawData.packet_name)
  return packet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorUpRawData::release_packet_name() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpRawData.packet_name)
  
  return packet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorUpRawData::set_allocated_packet_name(::std::string* packet_name) {
  if (packet_name != nullptr) {
    
  } else {
    
  }
  packet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet_name);
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpRawData.packet_name)
}

// int32 nodeid = 2;
inline void SensorUpRawData::clear_nodeid() {
  nodeid_ = 0;
}
inline ::google::protobuf::int32 SensorUpRawData::nodeid() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.nodeid)
  return nodeid_;
}
inline void SensorUpRawData::set_nodeid(::google::protobuf::int32 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpRawData.nodeid)
}

// string gateway_id = 3;
inline void SensorUpRawData::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorUpRawData::gateway_id() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SensorUpRawData::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpRawData.gateway_id)
}
#if LANG_CXX11
inline void SensorUpRawData::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SensorMessages.SensorUpRawData.gateway_id)
}
#endif
inline void SensorUpRawData::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMessages.SensorUpRawData.gateway_id)
}
inline void SensorUpRawData::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMessages.SensorUpRawData.gateway_id)
}
inline ::std::string* SensorUpRawData::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpRawData.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorUpRawData::release_gateway_id() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpRawData.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorUpRawData::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpRawData.gateway_id)
}

// uint32 unix_time = 4;
inline void SensorUpRawData::clear_unix_time() {
  unix_time_ = 0u;
}
inline ::google::protobuf::uint32 SensorUpRawData::unix_time() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.unix_time)
  return unix_time_;
}
inline void SensorUpRawData::set_unix_time(::google::protobuf::uint32 value) {
  
  unix_time_ = value;
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpRawData.unix_time)
}

// .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
inline bool SensorUpRawData::has_topinfo_sensornode_213_7_34() const {
  return UpRawDataPackets_case() == kTopinfoSensornode213734;
}
inline void SensorUpRawData::set_has_topinfo_sensornode_213_7_34() {
  _oneof_case_[0] = kTopinfoSensornode213734;
}
inline ::TopInfoSensorNode_213_7_34* SensorUpRawData::release_topinfo_sensornode_213_7_34() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpRawData.topinfo_sensornode_213_7_34)
  if (has_topinfo_sensornode_213_7_34()) {
    clear_has_UpRawDataPackets();
      ::TopInfoSensorNode_213_7_34* temp = UpRawDataPackets_.topinfo_sensornode_213_7_34_;
    UpRawDataPackets_.topinfo_sensornode_213_7_34_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TopInfoSensorNode_213_7_34& SensorUpRawData::topinfo_sensornode_213_7_34() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.topinfo_sensornode_213_7_34)
  return has_topinfo_sensornode_213_7_34()
      ? *UpRawDataPackets_.topinfo_sensornode_213_7_34_
      : *reinterpret_cast< ::TopInfoSensorNode_213_7_34*>(&::_TopInfoSensorNode_213_7_34_default_instance_);
}
inline ::TopInfoSensorNode_213_7_34* SensorUpRawData::mutable_topinfo_sensornode_213_7_34() {
  if (!has_topinfo_sensornode_213_7_34()) {
    clear_UpRawDataPackets();
    set_has_topinfo_sensornode_213_7_34();
    UpRawDataPackets_.topinfo_sensornode_213_7_34_ = CreateMaybeMessage< ::TopInfoSensorNode_213_7_34 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpRawData.topinfo_sensornode_213_7_34)
  return UpRawDataPackets_.topinfo_sensornode_213_7_34_;
}

// .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
inline bool SensorUpRawData::has_topinfo_transnode_213_3_1_7_0() const {
  return UpRawDataPackets_case() == kTopinfoTransnode2133170;
}
inline void SensorUpRawData::set_has_topinfo_transnode_213_3_1_7_0() {
  _oneof_case_[0] = kTopinfoTransnode2133170;
}
inline ::TopInfoTransNode_213_3_1_7_0* SensorUpRawData::release_topinfo_transnode_213_3_1_7_0() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpRawData.topinfo_transnode_213_3_1_7_0)
  if (has_topinfo_transnode_213_3_1_7_0()) {
    clear_has_UpRawDataPackets();
      ::TopInfoTransNode_213_3_1_7_0* temp = UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_;
    UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TopInfoTransNode_213_3_1_7_0& SensorUpRawData::topinfo_transnode_213_3_1_7_0() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpRawData.topinfo_transnode_213_3_1_7_0)
  return has_topinfo_transnode_213_3_1_7_0()
      ? *UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_
      : *reinterpret_cast< ::TopInfoTransNode_213_3_1_7_0*>(&::_TopInfoTransNode_213_3_1_7_0_default_instance_);
}
inline ::TopInfoTransNode_213_3_1_7_0* SensorUpRawData::mutable_topinfo_transnode_213_3_1_7_0() {
  if (!has_topinfo_transnode_213_3_1_7_0()) {
    clear_UpRawDataPackets();
    set_has_topinfo_transnode_213_3_1_7_0();
    UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_ = CreateMaybeMessage< ::TopInfoTransNode_213_3_1_7_0 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpRawData.topinfo_transnode_213_3_1_7_0)
  return UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_;
}

inline bool SensorUpRawData::has_UpRawDataPackets() const {
  return UpRawDataPackets_case() != UPRAWDATAPACKETS_NOT_SET;
}
inline void SensorUpRawData::clear_has_UpRawDataPackets() {
  _oneof_case_[0] = UPRAWDATAPACKETS_NOT_SET;
}
inline SensorUpRawData::UpRawDataPacketsCase SensorUpRawData::UpRawDataPackets_case() const {
  return SensorUpRawData::UpRawDataPacketsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorMessages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SensorUpRawData_2eproto
