// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorUpRawData.proto

#include "SensorUpRawData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_SensorPackets_2fSensorPackets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopInfoSensorNode_213_7_34_SensorPackets_2fSensorPackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorPackets_2fSensorPackets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopInfoTransNode_213_3_1_7_0_SensorPackets_2fSensorPackets_2eproto;
namespace SensorMessages {
class SensorUpRawDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorUpRawData> _instance;
  const ::TopInfoSensorNode_213_7_34* topinfo_sensornode_213_7_34_;
  const ::TopInfoTransNode_213_3_1_7_0* topinfo_transnode_213_3_1_7_0_;
} _SensorUpRawData_default_instance_;
}  // namespace SensorMessages
static void InitDefaultsSensorUpRawData_SensorUpRawData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SensorMessages::_SensorUpRawData_default_instance_;
    new (ptr) ::SensorMessages::SensorUpRawData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SensorMessages::SensorUpRawData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SensorUpRawData_SensorUpRawData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSensorUpRawData_SensorUpRawData_2eproto}, {
      &scc_info_TopInfoSensorNode_213_7_34_SensorPackets_2fSensorPackets_2eproto.base,
      &scc_info_TopInfoTransNode_213_3_1_7_0_SensorPackets_2fSensorPackets_2eproto.base,}};

void InitDefaults_SensorUpRawData_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorUpRawData_SensorUpRawData_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_SensorUpRawData_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_SensorUpRawData_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_SensorUpRawData_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_SensorUpRawData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, packet_name_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, nodeid_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, unix_time_),
  offsetof(::SensorMessages::SensorUpRawDataDefaultTypeInternal, topinfo_sensornode_213_7_34_),
  offsetof(::SensorMessages::SensorUpRawDataDefaultTypeInternal, topinfo_transnode_213_3_1_7_0_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpRawData, UpRawDataPackets_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SensorMessages::SensorUpRawData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SensorMessages::_SensorUpRawData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_SensorUpRawData_2eproto = {
  {}, AddDescriptors_SensorUpRawData_2eproto, "SensorUpRawData.proto", schemas,
  file_default_instances, TableStruct_SensorUpRawData_2eproto::offsets,
  file_level_metadata_SensorUpRawData_2eproto, 1, file_level_enum_descriptors_SensorUpRawData_2eproto, file_level_service_descriptors_SensorUpRawData_2eproto,
};

const char descriptor_table_protodef_SensorUpRawData_2eproto[] =
  "\n\025SensorUpRawData.proto\022\016SensorMessages\032"
  "!SensorPackets/SensorPackets.proto\"\375\001\n\017S"
  "ensorUpRawData\022\023\n\013packet_name\030\001 \001(\t\022\016\n\006n"
  "odeid\030\002 \001(\005\022\022\n\ngateway_id\030\003 \001(\t\022\021\n\tunix_"
  "time\030\004 \001(\r\022B\n\033topinfo_sensornode_213_7_3"
  "4\030\024 \001(\0132\033.TopInfoSensorNode_213_7_34H\000\022F"
  "\n\035topinfo_transnode_213_3_1_7_0\030\025 \001(\0132\035."
  "TopInfoTransNode_213_3_1_7_0H\000B\022\n\020UpRawD"
  "ataPacketsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_SensorUpRawData_2eproto = {
  false, InitDefaults_SensorUpRawData_2eproto, 
  descriptor_table_protodef_SensorUpRawData_2eproto,
  "SensorUpRawData.proto", &assign_descriptors_table_SensorUpRawData_2eproto, 338,
};

void AddDescriptors_SensorUpRawData_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_SensorPackets_2fSensorPackets_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_SensorUpRawData_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorUpRawData_2eproto = []() { AddDescriptors_SensorUpRawData_2eproto(); return true; }();
namespace SensorMessages {

// ===================================================================

void SensorUpRawData::InitAsDefaultInstance() {
  ::SensorMessages::_SensorUpRawData_default_instance_.topinfo_sensornode_213_7_34_ = const_cast< ::TopInfoSensorNode_213_7_34*>(
      ::TopInfoSensorNode_213_7_34::internal_default_instance());
  ::SensorMessages::_SensorUpRawData_default_instance_.topinfo_transnode_213_3_1_7_0_ = const_cast< ::TopInfoTransNode_213_3_1_7_0*>(
      ::TopInfoTransNode_213_3_1_7_0::internal_default_instance());
}
class SensorUpRawData::HasBitSetters {
 public:
  static const ::TopInfoSensorNode_213_7_34& topinfo_sensornode_213_7_34(const SensorUpRawData* msg);
  static const ::TopInfoTransNode_213_3_1_7_0& topinfo_transnode_213_3_1_7_0(const SensorUpRawData* msg);
};

const ::TopInfoSensorNode_213_7_34&
SensorUpRawData::HasBitSetters::topinfo_sensornode_213_7_34(const SensorUpRawData* msg) {
  return *msg->UpRawDataPackets_.topinfo_sensornode_213_7_34_;
}
const ::TopInfoTransNode_213_3_1_7_0&
SensorUpRawData::HasBitSetters::topinfo_transnode_213_3_1_7_0(const SensorUpRawData* msg) {
  return *msg->UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_;
}
void SensorUpRawData::set_allocated_topinfo_sensornode_213_7_34(::TopInfoSensorNode_213_7_34* topinfo_sensornode_213_7_34) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_UpRawDataPackets();
  if (topinfo_sensornode_213_7_34) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topinfo_sensornode_213_7_34 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topinfo_sensornode_213_7_34, submessage_arena);
    }
    set_has_topinfo_sensornode_213_7_34();
    UpRawDataPackets_.topinfo_sensornode_213_7_34_ = topinfo_sensornode_213_7_34;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpRawData.topinfo_sensornode_213_7_34)
}
void SensorUpRawData::clear_topinfo_sensornode_213_7_34() {
  if (has_topinfo_sensornode_213_7_34()) {
    delete UpRawDataPackets_.topinfo_sensornode_213_7_34_;
    clear_has_UpRawDataPackets();
  }
}
void SensorUpRawData::set_allocated_topinfo_transnode_213_3_1_7_0(::TopInfoTransNode_213_3_1_7_0* topinfo_transnode_213_3_1_7_0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_UpRawDataPackets();
  if (topinfo_transnode_213_3_1_7_0) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topinfo_transnode_213_3_1_7_0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topinfo_transnode_213_3_1_7_0, submessage_arena);
    }
    set_has_topinfo_transnode_213_3_1_7_0();
    UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_ = topinfo_transnode_213_3_1_7_0;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpRawData.topinfo_transnode_213_3_1_7_0)
}
void SensorUpRawData::clear_topinfo_transnode_213_3_1_7_0() {
  if (has_topinfo_transnode_213_3_1_7_0()) {
    delete UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_;
    clear_has_UpRawDataPackets();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorUpRawData::kPacketNameFieldNumber;
const int SensorUpRawData::kNodeidFieldNumber;
const int SensorUpRawData::kGatewayIdFieldNumber;
const int SensorUpRawData::kUnixTimeFieldNumber;
const int SensorUpRawData::kTopinfoSensornode213734FieldNumber;
const int SensorUpRawData::kTopinfoTransnode2133170FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorUpRawData::SensorUpRawData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorMessages.SensorUpRawData)
}
SensorUpRawData::SensorUpRawData(const SensorUpRawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packet_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.packet_name().size() > 0) {
    packet_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_name_);
  }
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unix_time_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(unix_time_));
  clear_has_UpRawDataPackets();
  switch (from.UpRawDataPackets_case()) {
    case kTopinfoSensornode213734: {
      mutable_topinfo_sensornode_213_7_34()->::TopInfoSensorNode_213_7_34::MergeFrom(from.topinfo_sensornode_213_7_34());
      break;
    }
    case kTopinfoTransnode2133170: {
      mutable_topinfo_transnode_213_3_1_7_0()->::TopInfoTransNode_213_3_1_7_0::MergeFrom(from.topinfo_transnode_213_3_1_7_0());
      break;
    }
    case UPRAWDATAPACKETS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SensorMessages.SensorUpRawData)
}

void SensorUpRawData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorUpRawData_SensorUpRawData_2eproto.base);
  packet_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unix_time_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(unix_time_));
  clear_has_UpRawDataPackets();
}

SensorUpRawData::~SensorUpRawData() {
  // @@protoc_insertion_point(destructor:SensorMessages.SensorUpRawData)
  SharedDtor();
}

void SensorUpRawData::SharedDtor() {
  packet_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_UpRawDataPackets()) {
    clear_UpRawDataPackets();
  }
}

void SensorUpRawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorUpRawData& SensorUpRawData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorUpRawData_SensorUpRawData_2eproto.base);
  return *internal_default_instance();
}


void SensorUpRawData::clear_UpRawDataPackets() {
// @@protoc_insertion_point(one_of_clear_start:SensorMessages.SensorUpRawData)
  switch (UpRawDataPackets_case()) {
    case kTopinfoSensornode213734: {
      delete UpRawDataPackets_.topinfo_sensornode_213_7_34_;
      break;
    }
    case kTopinfoTransnode2133170: {
      delete UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_;
      break;
    }
    case UPRAWDATAPACKETS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPRAWDATAPACKETS_NOT_SET;
}


void SensorUpRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorMessages.SensorUpRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unix_time_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(unix_time_));
  clear_UpRawDataPackets();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorUpRawData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorUpRawData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string packet_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SensorMessages.SensorUpRawData.packet_name");
        object = msg->mutable_packet_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 nodeid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nodeid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string gateway_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SensorMessages.SensorUpRawData.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 unix_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unix_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TopInfoSensorNode_213_7_34::_InternalParse;
        object = msg->mutable_topinfo_sensornode_213_7_34();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TopInfoTransNode_213_3_1_7_0::_InternalParse;
        object = msg->mutable_topinfo_transnode_213_3_1_7_0();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorUpRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorMessages.SensorUpRawData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string packet_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->packet_name().data(), static_cast<int>(this->packet_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SensorMessages.SensorUpRawData.packet_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nodeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SensorMessages.SensorUpRawData.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unix_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topinfo_sensornode_213_7_34()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topinfo_transnode_213_3_1_7_0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorMessages.SensorUpRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorMessages.SensorUpRawData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorUpRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorMessages.SensorUpRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packet_name().data(), static_cast<int>(this->packet_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpRawData.packet_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->packet_name(), output);
  }

  // int32 nodeid = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodeid(), output);
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpRawData.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway_id(), output);
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unix_time(), output);
  }

  // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
  if (has_topinfo_sensornode_213_7_34()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::topinfo_sensornode_213_7_34(this), output);
  }

  // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
  if (has_topinfo_transnode_213_3_1_7_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::topinfo_transnode_213_3_1_7_0(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorMessages.SensorUpRawData)
}

::google::protobuf::uint8* SensorUpRawData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorMessages.SensorUpRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packet_name().data(), static_cast<int>(this->packet_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpRawData.packet_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->packet_name(), target);
  }

  // int32 nodeid = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodeid(), target);
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpRawData.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gateway_id(), target);
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unix_time(), target);
  }

  // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
  if (has_topinfo_sensornode_213_7_34()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::topinfo_sensornode_213_7_34(this), target);
  }

  // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
  if (has_topinfo_transnode_213_3_1_7_0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::topinfo_transnode_213_3_1_7_0(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorMessages.SensorUpRawData)
  return target;
}

size_t SensorUpRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorMessages.SensorUpRawData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->packet_name());
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // int32 nodeid = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nodeid());
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unix_time());
  }

  switch (UpRawDataPackets_case()) {
    // .TopInfoSensorNode_213_7_34 topinfo_sensornode_213_7_34 = 20;
    case kTopinfoSensornode213734: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *UpRawDataPackets_.topinfo_sensornode_213_7_34_);
      break;
    }
    // .TopInfoTransNode_213_3_1_7_0 topinfo_transnode_213_3_1_7_0 = 21;
    case kTopinfoTransnode2133170: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *UpRawDataPackets_.topinfo_transnode_213_3_1_7_0_);
      break;
    }
    case UPRAWDATAPACKETS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorUpRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorMessages.SensorUpRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorUpRawData* source =
      ::google::protobuf::DynamicCastToGenerated<SensorUpRawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorMessages.SensorUpRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorMessages.SensorUpRawData)
    MergeFrom(*source);
  }
}

void SensorUpRawData::MergeFrom(const SensorUpRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorMessages.SensorUpRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_name().size() > 0) {

    packet_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_name_);
  }
  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.unix_time() != 0) {
    set_unix_time(from.unix_time());
  }
  switch (from.UpRawDataPackets_case()) {
    case kTopinfoSensornode213734: {
      mutable_topinfo_sensornode_213_7_34()->::TopInfoSensorNode_213_7_34::MergeFrom(from.topinfo_sensornode_213_7_34());
      break;
    }
    case kTopinfoTransnode2133170: {
      mutable_topinfo_transnode_213_3_1_7_0()->::TopInfoTransNode_213_3_1_7_0::MergeFrom(from.topinfo_transnode_213_3_1_7_0());
      break;
    }
    case UPRAWDATAPACKETS_NOT_SET: {
      break;
    }
  }
}

void SensorUpRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorMessages.SensorUpRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpRawData::CopyFrom(const SensorUpRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorMessages.SensorUpRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpRawData::IsInitialized() const {
  return true;
}

void SensorUpRawData::Swap(SensorUpRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorUpRawData::InternalSwap(SensorUpRawData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  packet_name_.Swap(&other->packet_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nodeid_, other->nodeid_);
  swap(unix_time_, other->unix_time_);
  swap(UpRawDataPackets_, other->UpRawDataPackets_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SensorUpRawData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorUpRawData_2eproto);
  return ::file_level_metadata_SensorUpRawData_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SensorMessages
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::SensorMessages::SensorUpRawData* Arena::CreateMaybeMessage< ::SensorMessages::SensorUpRawData >(Arena* arena) {
  return Arena::CreateInternal< ::SensorMessages::SensorUpRawData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
