// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorUpMessage.proto

#ifndef PROTOBUF_INCLUDED_SensorUpMessage_2eproto
#define PROTOBUF_INCLUDED_SensorUpMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SensorMessages/SensorMessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SensorUpMessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SensorUpMessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SensorUpMessage_2eproto();
namespace SensorMessages {
class SensorUpMessage;
class SensorUpMessageDefaultTypeInternal;
extern SensorUpMessageDefaultTypeInternal _SensorUpMessage_default_instance_;
}  // namespace SensorMessages
namespace google {
namespace protobuf {
template<> ::SensorMessages::SensorUpMessage* Arena::CreateMaybeMessage<::SensorMessages::SensorUpMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SensorMessages {

// ===================================================================

class SensorUpMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorMessages.SensorUpMessage) */ {
 public:
  SensorUpMessage();
  virtual ~SensorUpMessage();

  SensorUpMessage(const SensorUpMessage& from);

  inline SensorUpMessage& operator=(const SensorUpMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorUpMessage(SensorUpMessage&& from) noexcept
    : SensorUpMessage() {
    *this = ::std::move(from);
  }

  inline SensorUpMessage& operator=(SensorUpMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorUpMessage& default_instance();

  enum MsgCase {
    kHighprecisioninclidata = 20,
    kTemphumidata = 21,
    kVibrawiredata = 22,
    kAnemometerdata = 23,
    kInclinationdata = 24,
    kVoltagedata = 25,
    kCurrentdata = 26,
    kResistancedata = 27,
    kMillivoltdata = 28,
    kVibrationdata = 29,
    kCablepeakshcf100 = 30,
    kSettlementdata = 31,
    kStressdata = 32,
    kInclihcf410V1 = 33,
    kGrtu1000 = 34,
    kHos3000Ch4 = 35,
    kDistancedata = 36,
    kUart485Forhfs716Sample = 37,
    kVoltagedatav1 = 38,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorUpMessage* internal_default_instance() {
    return reinterpret_cast<const SensorUpMessage*>(
               &_SensorUpMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorUpMessage* other);
  friend void swap(SensorUpMessage& a, SensorUpMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorUpMessage* New() const final {
    return CreateMaybeMessage<SensorUpMessage>(nullptr);
  }

  SensorUpMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorUpMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorUpMessage& from);
  void MergeFrom(const SensorUpMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorUpMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string packet_name = 1;
  void clear_packet_name();
  static const int kPacketNameFieldNumber = 1;
  const ::std::string& packet_name() const;
  void set_packet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_packet_name(::std::string&& value);
  #endif
  void set_packet_name(const char* value);
  void set_packet_name(const char* value, size_t size);
  ::std::string* mutable_packet_name();
  ::std::string* release_packet_name();
  void set_allocated_packet_name(::std::string* packet_name);

  // string gateway_id = 3;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 3;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // int32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // uint32 unix_time = 4;
  void clear_unix_time();
  static const int kUnixTimeFieldNumber = 4;
  ::google::protobuf::uint32 unix_time() const;
  void set_unix_time(::google::protobuf::uint32 value);

  // .HighPrecisionIncliData highprecisioninclidata = 20;
  bool has_highprecisioninclidata() const;
  void clear_highprecisioninclidata();
  static const int kHighprecisioninclidataFieldNumber = 20;
  const ::HighPrecisionIncliData& highprecisioninclidata() const;
  ::HighPrecisionIncliData* release_highprecisioninclidata();
  ::HighPrecisionIncliData* mutable_highprecisioninclidata();
  void set_allocated_highprecisioninclidata(::HighPrecisionIncliData* highprecisioninclidata);

  // .TempHumiData temphumidata = 21;
  bool has_temphumidata() const;
  void clear_temphumidata();
  static const int kTemphumidataFieldNumber = 21;
  const ::TempHumiData& temphumidata() const;
  ::TempHumiData* release_temphumidata();
  ::TempHumiData* mutable_temphumidata();
  void set_allocated_temphumidata(::TempHumiData* temphumidata);

  // .VibraWireData vibrawiredata = 22;
  bool has_vibrawiredata() const;
  void clear_vibrawiredata();
  static const int kVibrawiredataFieldNumber = 22;
  const ::VibraWireData& vibrawiredata() const;
  ::VibraWireData* release_vibrawiredata();
  ::VibraWireData* mutable_vibrawiredata();
  void set_allocated_vibrawiredata(::VibraWireData* vibrawiredata);

  // .AnemometerData anemometerdata = 23;
  bool has_anemometerdata() const;
  void clear_anemometerdata();
  static const int kAnemometerdataFieldNumber = 23;
  const ::AnemometerData& anemometerdata() const;
  ::AnemometerData* release_anemometerdata();
  ::AnemometerData* mutable_anemometerdata();
  void set_allocated_anemometerdata(::AnemometerData* anemometerdata);

  // .InclinationData inclinationdata = 24;
  bool has_inclinationdata() const;
  void clear_inclinationdata();
  static const int kInclinationdataFieldNumber = 24;
  const ::InclinationData& inclinationdata() const;
  ::InclinationData* release_inclinationdata();
  ::InclinationData* mutable_inclinationdata();
  void set_allocated_inclinationdata(::InclinationData* inclinationdata);

  // .VoltageData voltagedata = 25;
  bool has_voltagedata() const;
  void clear_voltagedata();
  static const int kVoltagedataFieldNumber = 25;
  const ::VoltageData& voltagedata() const;
  ::VoltageData* release_voltagedata();
  ::VoltageData* mutable_voltagedata();
  void set_allocated_voltagedata(::VoltageData* voltagedata);

  // .CurrentData currentdata = 26;
  bool has_currentdata() const;
  void clear_currentdata();
  static const int kCurrentdataFieldNumber = 26;
  const ::CurrentData& currentdata() const;
  ::CurrentData* release_currentdata();
  ::CurrentData* mutable_currentdata();
  void set_allocated_currentdata(::CurrentData* currentdata);

  // .ResistanceData resistancedata = 27;
  bool has_resistancedata() const;
  void clear_resistancedata();
  static const int kResistancedataFieldNumber = 27;
  const ::ResistanceData& resistancedata() const;
  ::ResistanceData* release_resistancedata();
  ::ResistanceData* mutable_resistancedata();
  void set_allocated_resistancedata(::ResistanceData* resistancedata);

  // .MillivoltData millivoltdata = 28;
  bool has_millivoltdata() const;
  void clear_millivoltdata();
  static const int kMillivoltdataFieldNumber = 28;
  const ::MillivoltData& millivoltdata() const;
  ::MillivoltData* release_millivoltdata();
  ::MillivoltData* mutable_millivoltdata();
  void set_allocated_millivoltdata(::MillivoltData* millivoltdata);

  // .VibrationData vibrationdata = 29;
  bool has_vibrationdata() const;
  void clear_vibrationdata();
  static const int kVibrationdataFieldNumber = 29;
  const ::VibrationData& vibrationdata() const;
  ::VibrationData* release_vibrationdata();
  ::VibrationData* mutable_vibrationdata();
  void set_allocated_vibrationdata(::VibrationData* vibrationdata);

  // .CablePeaksHCF100 cablepeakshcf100 = 30;
  bool has_cablepeakshcf100() const;
  void clear_cablepeakshcf100();
  static const int kCablepeakshcf100FieldNumber = 30;
  const ::CablePeaksHCF100& cablepeakshcf100() const;
  ::CablePeaksHCF100* release_cablepeakshcf100();
  ::CablePeaksHCF100* mutable_cablepeakshcf100();
  void set_allocated_cablepeakshcf100(::CablePeaksHCF100* cablepeakshcf100);

  // .SettlementData settlementdata = 31;
  bool has_settlementdata() const;
  void clear_settlementdata();
  static const int kSettlementdataFieldNumber = 31;
  const ::SettlementData& settlementdata() const;
  ::SettlementData* release_settlementdata();
  ::SettlementData* mutable_settlementdata();
  void set_allocated_settlementdata(::SettlementData* settlementdata);

  // .StressData stressdata = 32;
  bool has_stressdata() const;
  void clear_stressdata();
  static const int kStressdataFieldNumber = 32;
  const ::StressData& stressdata() const;
  ::StressData* release_stressdata();
  ::StressData* mutable_stressdata();
  void set_allocated_stressdata(::StressData* stressdata);

  // .IncliHCF410V1 inclihcf410v1 = 33;
  bool has_inclihcf410v1() const;
  void clear_inclihcf410v1();
  static const int kInclihcf410V1FieldNumber = 33;
  const ::IncliHCF410V1& inclihcf410v1() const;
  ::IncliHCF410V1* release_inclihcf410v1();
  ::IncliHCF410V1* mutable_inclihcf410v1();
  void set_allocated_inclihcf410v1(::IncliHCF410V1* inclihcf410v1);

  // .GRTU1000 grtu1000 = 34;
  bool has_grtu1000() const;
  void clear_grtu1000();
  static const int kGrtu1000FieldNumber = 34;
  const ::GRTU1000& grtu1000() const;
  ::GRTU1000* release_grtu1000();
  ::GRTU1000* mutable_grtu1000();
  void set_allocated_grtu1000(::GRTU1000* grtu1000);

  // .HOS3000CH4 hos3000ch4 = 35;
  bool has_hos3000ch4() const;
  void clear_hos3000ch4();
  static const int kHos3000Ch4FieldNumber = 35;
  const ::HOS3000CH4& hos3000ch4() const;
  ::HOS3000CH4* release_hos3000ch4();
  ::HOS3000CH4* mutable_hos3000ch4();
  void set_allocated_hos3000ch4(::HOS3000CH4* hos3000ch4);

  // .DistanceData distancedata = 36;
  bool has_distancedata() const;
  void clear_distancedata();
  static const int kDistancedataFieldNumber = 36;
  const ::DistanceData& distancedata() const;
  ::DistanceData* release_distancedata();
  ::DistanceData* mutable_distancedata();
  void set_allocated_distancedata(::DistanceData* distancedata);

  // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
  bool has_uart485forhfs716sample() const;
  void clear_uart485forhfs716sample();
  static const int kUart485Forhfs716SampleFieldNumber = 37;
  const ::Uart485ForHFS716Sample& uart485forhfs716sample() const;
  ::Uart485ForHFS716Sample* release_uart485forhfs716sample();
  ::Uart485ForHFS716Sample* mutable_uart485forhfs716sample();
  void set_allocated_uart485forhfs716sample(::Uart485ForHFS716Sample* uart485forhfs716sample);

  // .VoltageDataV1 voltagedatav1 = 38;
  bool has_voltagedatav1() const;
  void clear_voltagedatav1();
  static const int kVoltagedatav1FieldNumber = 38;
  const ::VoltageDataV1& voltagedatav1() const;
  ::VoltageDataV1* release_voltagedatav1();
  ::VoltageDataV1* mutable_voltagedatav1();
  void set_allocated_voltagedatav1(::VoltageDataV1* voltagedatav1);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:SensorMessages.SensorUpMessage)
 private:
  class HasBitSetters;
  void set_has_highprecisioninclidata();
  void set_has_temphumidata();
  void set_has_vibrawiredata();
  void set_has_anemometerdata();
  void set_has_inclinationdata();
  void set_has_voltagedata();
  void set_has_currentdata();
  void set_has_resistancedata();
  void set_has_millivoltdata();
  void set_has_vibrationdata();
  void set_has_cablepeakshcf100();
  void set_has_settlementdata();
  void set_has_stressdata();
  void set_has_inclihcf410v1();
  void set_has_grtu1000();
  void set_has_hos3000ch4();
  void set_has_distancedata();
  void set_has_uart485forhfs716sample();
  void set_has_voltagedatav1();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr packet_name_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::uint32 unix_time_;
  union MsgUnion {
    MsgUnion() {}
    ::HighPrecisionIncliData* highprecisioninclidata_;
    ::TempHumiData* temphumidata_;
    ::VibraWireData* vibrawiredata_;
    ::AnemometerData* anemometerdata_;
    ::InclinationData* inclinationdata_;
    ::VoltageData* voltagedata_;
    ::CurrentData* currentdata_;
    ::ResistanceData* resistancedata_;
    ::MillivoltData* millivoltdata_;
    ::VibrationData* vibrationdata_;
    ::CablePeaksHCF100* cablepeakshcf100_;
    ::SettlementData* settlementdata_;
    ::StressData* stressdata_;
    ::IncliHCF410V1* inclihcf410v1_;
    ::GRTU1000* grtu1000_;
    ::HOS3000CH4* hos3000ch4_;
    ::DistanceData* distancedata_;
    ::Uart485ForHFS716Sample* uart485forhfs716sample_;
    ::VoltageDataV1* voltagedatav1_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SensorUpMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorUpMessage

// string packet_name = 1;
inline void SensorUpMessage::clear_packet_name() {
  packet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorUpMessage::packet_name() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.packet_name)
  return packet_name_.GetNoArena();
}
inline void SensorUpMessage::set_packet_name(const ::std::string& value) {
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpMessage.packet_name)
}
#if LANG_CXX11
inline void SensorUpMessage::set_packet_name(::std::string&& value) {
  
  packet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SensorMessages.SensorUpMessage.packet_name)
}
#endif
inline void SensorUpMessage::set_packet_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMessages.SensorUpMessage.packet_name)
}
inline void SensorUpMessage::set_packet_name(const char* value, size_t size) {
  
  packet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMessages.SensorUpMessage.packet_name)
}
inline ::std::string* SensorUpMessage::mutable_packet_name() {
  
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.packet_name)
  return packet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorUpMessage::release_packet_name() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.packet_name)
  
  return packet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorUpMessage::set_allocated_packet_name(::std::string* packet_name) {
  if (packet_name != nullptr) {
    
  } else {
    
  }
  packet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet_name);
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.packet_name)
}

// int32 node_id = 2;
inline void SensorUpMessage::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 SensorUpMessage::node_id() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.node_id)
  return node_id_;
}
inline void SensorUpMessage::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpMessage.node_id)
}

// string gateway_id = 3;
inline void SensorUpMessage::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorUpMessage::gateway_id() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SensorUpMessage::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpMessage.gateway_id)
}
#if LANG_CXX11
inline void SensorUpMessage::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SensorMessages.SensorUpMessage.gateway_id)
}
#endif
inline void SensorUpMessage::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMessages.SensorUpMessage.gateway_id)
}
inline void SensorUpMessage::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMessages.SensorUpMessage.gateway_id)
}
inline ::std::string* SensorUpMessage::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorUpMessage::release_gateway_id() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorUpMessage::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.gateway_id)
}

// uint32 unix_time = 4;
inline void SensorUpMessage::clear_unix_time() {
  unix_time_ = 0u;
}
inline ::google::protobuf::uint32 SensorUpMessage::unix_time() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.unix_time)
  return unix_time_;
}
inline void SensorUpMessage::set_unix_time(::google::protobuf::uint32 value) {
  
  unix_time_ = value;
  // @@protoc_insertion_point(field_set:SensorMessages.SensorUpMessage.unix_time)
}

// .HighPrecisionIncliData highprecisioninclidata = 20;
inline bool SensorUpMessage::has_highprecisioninclidata() const {
  return msg_case() == kHighprecisioninclidata;
}
inline void SensorUpMessage::set_has_highprecisioninclidata() {
  _oneof_case_[0] = kHighprecisioninclidata;
}
inline ::HighPrecisionIncliData* SensorUpMessage::release_highprecisioninclidata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.highprecisioninclidata)
  if (has_highprecisioninclidata()) {
    clear_has_msg();
      ::HighPrecisionIncliData* temp = msg_.highprecisioninclidata_;
    msg_.highprecisioninclidata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::HighPrecisionIncliData& SensorUpMessage::highprecisioninclidata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.highprecisioninclidata)
  return has_highprecisioninclidata()
      ? *msg_.highprecisioninclidata_
      : *reinterpret_cast< ::HighPrecisionIncliData*>(&::_HighPrecisionIncliData_default_instance_);
}
inline ::HighPrecisionIncliData* SensorUpMessage::mutable_highprecisioninclidata() {
  if (!has_highprecisioninclidata()) {
    clear_msg();
    set_has_highprecisioninclidata();
    msg_.highprecisioninclidata_ = CreateMaybeMessage< ::HighPrecisionIncliData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.highprecisioninclidata)
  return msg_.highprecisioninclidata_;
}

// .TempHumiData temphumidata = 21;
inline bool SensorUpMessage::has_temphumidata() const {
  return msg_case() == kTemphumidata;
}
inline void SensorUpMessage::set_has_temphumidata() {
  _oneof_case_[0] = kTemphumidata;
}
inline ::TempHumiData* SensorUpMessage::release_temphumidata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.temphumidata)
  if (has_temphumidata()) {
    clear_has_msg();
      ::TempHumiData* temp = msg_.temphumidata_;
    msg_.temphumidata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TempHumiData& SensorUpMessage::temphumidata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.temphumidata)
  return has_temphumidata()
      ? *msg_.temphumidata_
      : *reinterpret_cast< ::TempHumiData*>(&::_TempHumiData_default_instance_);
}
inline ::TempHumiData* SensorUpMessage::mutable_temphumidata() {
  if (!has_temphumidata()) {
    clear_msg();
    set_has_temphumidata();
    msg_.temphumidata_ = CreateMaybeMessage< ::TempHumiData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.temphumidata)
  return msg_.temphumidata_;
}

// .VibraWireData vibrawiredata = 22;
inline bool SensorUpMessage::has_vibrawiredata() const {
  return msg_case() == kVibrawiredata;
}
inline void SensorUpMessage::set_has_vibrawiredata() {
  _oneof_case_[0] = kVibrawiredata;
}
inline ::VibraWireData* SensorUpMessage::release_vibrawiredata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.vibrawiredata)
  if (has_vibrawiredata()) {
    clear_has_msg();
      ::VibraWireData* temp = msg_.vibrawiredata_;
    msg_.vibrawiredata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VibraWireData& SensorUpMessage::vibrawiredata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.vibrawiredata)
  return has_vibrawiredata()
      ? *msg_.vibrawiredata_
      : *reinterpret_cast< ::VibraWireData*>(&::_VibraWireData_default_instance_);
}
inline ::VibraWireData* SensorUpMessage::mutable_vibrawiredata() {
  if (!has_vibrawiredata()) {
    clear_msg();
    set_has_vibrawiredata();
    msg_.vibrawiredata_ = CreateMaybeMessage< ::VibraWireData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.vibrawiredata)
  return msg_.vibrawiredata_;
}

// .AnemometerData anemometerdata = 23;
inline bool SensorUpMessage::has_anemometerdata() const {
  return msg_case() == kAnemometerdata;
}
inline void SensorUpMessage::set_has_anemometerdata() {
  _oneof_case_[0] = kAnemometerdata;
}
inline ::AnemometerData* SensorUpMessage::release_anemometerdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.anemometerdata)
  if (has_anemometerdata()) {
    clear_has_msg();
      ::AnemometerData* temp = msg_.anemometerdata_;
    msg_.anemometerdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AnemometerData& SensorUpMessage::anemometerdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.anemometerdata)
  return has_anemometerdata()
      ? *msg_.anemometerdata_
      : *reinterpret_cast< ::AnemometerData*>(&::_AnemometerData_default_instance_);
}
inline ::AnemometerData* SensorUpMessage::mutable_anemometerdata() {
  if (!has_anemometerdata()) {
    clear_msg();
    set_has_anemometerdata();
    msg_.anemometerdata_ = CreateMaybeMessage< ::AnemometerData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.anemometerdata)
  return msg_.anemometerdata_;
}

// .InclinationData inclinationdata = 24;
inline bool SensorUpMessage::has_inclinationdata() const {
  return msg_case() == kInclinationdata;
}
inline void SensorUpMessage::set_has_inclinationdata() {
  _oneof_case_[0] = kInclinationdata;
}
inline ::InclinationData* SensorUpMessage::release_inclinationdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.inclinationdata)
  if (has_inclinationdata()) {
    clear_has_msg();
      ::InclinationData* temp = msg_.inclinationdata_;
    msg_.inclinationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InclinationData& SensorUpMessage::inclinationdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.inclinationdata)
  return has_inclinationdata()
      ? *msg_.inclinationdata_
      : *reinterpret_cast< ::InclinationData*>(&::_InclinationData_default_instance_);
}
inline ::InclinationData* SensorUpMessage::mutable_inclinationdata() {
  if (!has_inclinationdata()) {
    clear_msg();
    set_has_inclinationdata();
    msg_.inclinationdata_ = CreateMaybeMessage< ::InclinationData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.inclinationdata)
  return msg_.inclinationdata_;
}

// .VoltageData voltagedata = 25;
inline bool SensorUpMessage::has_voltagedata() const {
  return msg_case() == kVoltagedata;
}
inline void SensorUpMessage::set_has_voltagedata() {
  _oneof_case_[0] = kVoltagedata;
}
inline ::VoltageData* SensorUpMessage::release_voltagedata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.voltagedata)
  if (has_voltagedata()) {
    clear_has_msg();
      ::VoltageData* temp = msg_.voltagedata_;
    msg_.voltagedata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VoltageData& SensorUpMessage::voltagedata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.voltagedata)
  return has_voltagedata()
      ? *msg_.voltagedata_
      : *reinterpret_cast< ::VoltageData*>(&::_VoltageData_default_instance_);
}
inline ::VoltageData* SensorUpMessage::mutable_voltagedata() {
  if (!has_voltagedata()) {
    clear_msg();
    set_has_voltagedata();
    msg_.voltagedata_ = CreateMaybeMessage< ::VoltageData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.voltagedata)
  return msg_.voltagedata_;
}

// .CurrentData currentdata = 26;
inline bool SensorUpMessage::has_currentdata() const {
  return msg_case() == kCurrentdata;
}
inline void SensorUpMessage::set_has_currentdata() {
  _oneof_case_[0] = kCurrentdata;
}
inline ::CurrentData* SensorUpMessage::release_currentdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.currentdata)
  if (has_currentdata()) {
    clear_has_msg();
      ::CurrentData* temp = msg_.currentdata_;
    msg_.currentdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CurrentData& SensorUpMessage::currentdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.currentdata)
  return has_currentdata()
      ? *msg_.currentdata_
      : *reinterpret_cast< ::CurrentData*>(&::_CurrentData_default_instance_);
}
inline ::CurrentData* SensorUpMessage::mutable_currentdata() {
  if (!has_currentdata()) {
    clear_msg();
    set_has_currentdata();
    msg_.currentdata_ = CreateMaybeMessage< ::CurrentData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.currentdata)
  return msg_.currentdata_;
}

// .ResistanceData resistancedata = 27;
inline bool SensorUpMessage::has_resistancedata() const {
  return msg_case() == kResistancedata;
}
inline void SensorUpMessage::set_has_resistancedata() {
  _oneof_case_[0] = kResistancedata;
}
inline ::ResistanceData* SensorUpMessage::release_resistancedata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.resistancedata)
  if (has_resistancedata()) {
    clear_has_msg();
      ::ResistanceData* temp = msg_.resistancedata_;
    msg_.resistancedata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ResistanceData& SensorUpMessage::resistancedata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.resistancedata)
  return has_resistancedata()
      ? *msg_.resistancedata_
      : *reinterpret_cast< ::ResistanceData*>(&::_ResistanceData_default_instance_);
}
inline ::ResistanceData* SensorUpMessage::mutable_resistancedata() {
  if (!has_resistancedata()) {
    clear_msg();
    set_has_resistancedata();
    msg_.resistancedata_ = CreateMaybeMessage< ::ResistanceData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.resistancedata)
  return msg_.resistancedata_;
}

// .MillivoltData millivoltdata = 28;
inline bool SensorUpMessage::has_millivoltdata() const {
  return msg_case() == kMillivoltdata;
}
inline void SensorUpMessage::set_has_millivoltdata() {
  _oneof_case_[0] = kMillivoltdata;
}
inline ::MillivoltData* SensorUpMessage::release_millivoltdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.millivoltdata)
  if (has_millivoltdata()) {
    clear_has_msg();
      ::MillivoltData* temp = msg_.millivoltdata_;
    msg_.millivoltdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MillivoltData& SensorUpMessage::millivoltdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.millivoltdata)
  return has_millivoltdata()
      ? *msg_.millivoltdata_
      : *reinterpret_cast< ::MillivoltData*>(&::_MillivoltData_default_instance_);
}
inline ::MillivoltData* SensorUpMessage::mutable_millivoltdata() {
  if (!has_millivoltdata()) {
    clear_msg();
    set_has_millivoltdata();
    msg_.millivoltdata_ = CreateMaybeMessage< ::MillivoltData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.millivoltdata)
  return msg_.millivoltdata_;
}

// .VibrationData vibrationdata = 29;
inline bool SensorUpMessage::has_vibrationdata() const {
  return msg_case() == kVibrationdata;
}
inline void SensorUpMessage::set_has_vibrationdata() {
  _oneof_case_[0] = kVibrationdata;
}
inline ::VibrationData* SensorUpMessage::release_vibrationdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.vibrationdata)
  if (has_vibrationdata()) {
    clear_has_msg();
      ::VibrationData* temp = msg_.vibrationdata_;
    msg_.vibrationdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VibrationData& SensorUpMessage::vibrationdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.vibrationdata)
  return has_vibrationdata()
      ? *msg_.vibrationdata_
      : *reinterpret_cast< ::VibrationData*>(&::_VibrationData_default_instance_);
}
inline ::VibrationData* SensorUpMessage::mutable_vibrationdata() {
  if (!has_vibrationdata()) {
    clear_msg();
    set_has_vibrationdata();
    msg_.vibrationdata_ = CreateMaybeMessage< ::VibrationData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.vibrationdata)
  return msg_.vibrationdata_;
}

// .CablePeaksHCF100 cablepeakshcf100 = 30;
inline bool SensorUpMessage::has_cablepeakshcf100() const {
  return msg_case() == kCablepeakshcf100;
}
inline void SensorUpMessage::set_has_cablepeakshcf100() {
  _oneof_case_[0] = kCablepeakshcf100;
}
inline ::CablePeaksHCF100* SensorUpMessage::release_cablepeakshcf100() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.cablepeakshcf100)
  if (has_cablepeakshcf100()) {
    clear_has_msg();
      ::CablePeaksHCF100* temp = msg_.cablepeakshcf100_;
    msg_.cablepeakshcf100_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CablePeaksHCF100& SensorUpMessage::cablepeakshcf100() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.cablepeakshcf100)
  return has_cablepeakshcf100()
      ? *msg_.cablepeakshcf100_
      : *reinterpret_cast< ::CablePeaksHCF100*>(&::_CablePeaksHCF100_default_instance_);
}
inline ::CablePeaksHCF100* SensorUpMessage::mutable_cablepeakshcf100() {
  if (!has_cablepeakshcf100()) {
    clear_msg();
    set_has_cablepeakshcf100();
    msg_.cablepeakshcf100_ = CreateMaybeMessage< ::CablePeaksHCF100 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.cablepeakshcf100)
  return msg_.cablepeakshcf100_;
}

// .SettlementData settlementdata = 31;
inline bool SensorUpMessage::has_settlementdata() const {
  return msg_case() == kSettlementdata;
}
inline void SensorUpMessage::set_has_settlementdata() {
  _oneof_case_[0] = kSettlementdata;
}
inline ::SettlementData* SensorUpMessage::release_settlementdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.settlementdata)
  if (has_settlementdata()) {
    clear_has_msg();
      ::SettlementData* temp = msg_.settlementdata_;
    msg_.settlementdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SettlementData& SensorUpMessage::settlementdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.settlementdata)
  return has_settlementdata()
      ? *msg_.settlementdata_
      : *reinterpret_cast< ::SettlementData*>(&::_SettlementData_default_instance_);
}
inline ::SettlementData* SensorUpMessage::mutable_settlementdata() {
  if (!has_settlementdata()) {
    clear_msg();
    set_has_settlementdata();
    msg_.settlementdata_ = CreateMaybeMessage< ::SettlementData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.settlementdata)
  return msg_.settlementdata_;
}

// .StressData stressdata = 32;
inline bool SensorUpMessage::has_stressdata() const {
  return msg_case() == kStressdata;
}
inline void SensorUpMessage::set_has_stressdata() {
  _oneof_case_[0] = kStressdata;
}
inline ::StressData* SensorUpMessage::release_stressdata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.stressdata)
  if (has_stressdata()) {
    clear_has_msg();
      ::StressData* temp = msg_.stressdata_;
    msg_.stressdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StressData& SensorUpMessage::stressdata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.stressdata)
  return has_stressdata()
      ? *msg_.stressdata_
      : *reinterpret_cast< ::StressData*>(&::_StressData_default_instance_);
}
inline ::StressData* SensorUpMessage::mutable_stressdata() {
  if (!has_stressdata()) {
    clear_msg();
    set_has_stressdata();
    msg_.stressdata_ = CreateMaybeMessage< ::StressData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.stressdata)
  return msg_.stressdata_;
}

// .IncliHCF410V1 inclihcf410v1 = 33;
inline bool SensorUpMessage::has_inclihcf410v1() const {
  return msg_case() == kInclihcf410V1;
}
inline void SensorUpMessage::set_has_inclihcf410v1() {
  _oneof_case_[0] = kInclihcf410V1;
}
inline ::IncliHCF410V1* SensorUpMessage::release_inclihcf410v1() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.inclihcf410v1)
  if (has_inclihcf410v1()) {
    clear_has_msg();
      ::IncliHCF410V1* temp = msg_.inclihcf410v1_;
    msg_.inclihcf410v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IncliHCF410V1& SensorUpMessage::inclihcf410v1() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.inclihcf410v1)
  return has_inclihcf410v1()
      ? *msg_.inclihcf410v1_
      : *reinterpret_cast< ::IncliHCF410V1*>(&::_IncliHCF410V1_default_instance_);
}
inline ::IncliHCF410V1* SensorUpMessage::mutable_inclihcf410v1() {
  if (!has_inclihcf410v1()) {
    clear_msg();
    set_has_inclihcf410v1();
    msg_.inclihcf410v1_ = CreateMaybeMessage< ::IncliHCF410V1 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.inclihcf410v1)
  return msg_.inclihcf410v1_;
}

// .GRTU1000 grtu1000 = 34;
inline bool SensorUpMessage::has_grtu1000() const {
  return msg_case() == kGrtu1000;
}
inline void SensorUpMessage::set_has_grtu1000() {
  _oneof_case_[0] = kGrtu1000;
}
inline ::GRTU1000* SensorUpMessage::release_grtu1000() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.grtu1000)
  if (has_grtu1000()) {
    clear_has_msg();
      ::GRTU1000* temp = msg_.grtu1000_;
    msg_.grtu1000_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GRTU1000& SensorUpMessage::grtu1000() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.grtu1000)
  return has_grtu1000()
      ? *msg_.grtu1000_
      : *reinterpret_cast< ::GRTU1000*>(&::_GRTU1000_default_instance_);
}
inline ::GRTU1000* SensorUpMessage::mutable_grtu1000() {
  if (!has_grtu1000()) {
    clear_msg();
    set_has_grtu1000();
    msg_.grtu1000_ = CreateMaybeMessage< ::GRTU1000 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.grtu1000)
  return msg_.grtu1000_;
}

// .HOS3000CH4 hos3000ch4 = 35;
inline bool SensorUpMessage::has_hos3000ch4() const {
  return msg_case() == kHos3000Ch4;
}
inline void SensorUpMessage::set_has_hos3000ch4() {
  _oneof_case_[0] = kHos3000Ch4;
}
inline ::HOS3000CH4* SensorUpMessage::release_hos3000ch4() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.hos3000ch4)
  if (has_hos3000ch4()) {
    clear_has_msg();
      ::HOS3000CH4* temp = msg_.hos3000ch4_;
    msg_.hos3000ch4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::HOS3000CH4& SensorUpMessage::hos3000ch4() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.hos3000ch4)
  return has_hos3000ch4()
      ? *msg_.hos3000ch4_
      : *reinterpret_cast< ::HOS3000CH4*>(&::_HOS3000CH4_default_instance_);
}
inline ::HOS3000CH4* SensorUpMessage::mutable_hos3000ch4() {
  if (!has_hos3000ch4()) {
    clear_msg();
    set_has_hos3000ch4();
    msg_.hos3000ch4_ = CreateMaybeMessage< ::HOS3000CH4 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.hos3000ch4)
  return msg_.hos3000ch4_;
}

// .DistanceData distancedata = 36;
inline bool SensorUpMessage::has_distancedata() const {
  return msg_case() == kDistancedata;
}
inline void SensorUpMessage::set_has_distancedata() {
  _oneof_case_[0] = kDistancedata;
}
inline ::DistanceData* SensorUpMessage::release_distancedata() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.distancedata)
  if (has_distancedata()) {
    clear_has_msg();
      ::DistanceData* temp = msg_.distancedata_;
    msg_.distancedata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DistanceData& SensorUpMessage::distancedata() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.distancedata)
  return has_distancedata()
      ? *msg_.distancedata_
      : *reinterpret_cast< ::DistanceData*>(&::_DistanceData_default_instance_);
}
inline ::DistanceData* SensorUpMessage::mutable_distancedata() {
  if (!has_distancedata()) {
    clear_msg();
    set_has_distancedata();
    msg_.distancedata_ = CreateMaybeMessage< ::DistanceData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.distancedata)
  return msg_.distancedata_;
}

// .Uart485ForHFS716Sample uart485forhfs716sample = 37;
inline bool SensorUpMessage::has_uart485forhfs716sample() const {
  return msg_case() == kUart485Forhfs716Sample;
}
inline void SensorUpMessage::set_has_uart485forhfs716sample() {
  _oneof_case_[0] = kUart485Forhfs716Sample;
}
inline ::Uart485ForHFS716Sample* SensorUpMessage::release_uart485forhfs716sample() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.uart485forhfs716sample)
  if (has_uart485forhfs716sample()) {
    clear_has_msg();
      ::Uart485ForHFS716Sample* temp = msg_.uart485forhfs716sample_;
    msg_.uart485forhfs716sample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Uart485ForHFS716Sample& SensorUpMessage::uart485forhfs716sample() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.uart485forhfs716sample)
  return has_uart485forhfs716sample()
      ? *msg_.uart485forhfs716sample_
      : *reinterpret_cast< ::Uart485ForHFS716Sample*>(&::_Uart485ForHFS716Sample_default_instance_);
}
inline ::Uart485ForHFS716Sample* SensorUpMessage::mutable_uart485forhfs716sample() {
  if (!has_uart485forhfs716sample()) {
    clear_msg();
    set_has_uart485forhfs716sample();
    msg_.uart485forhfs716sample_ = CreateMaybeMessage< ::Uart485ForHFS716Sample >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.uart485forhfs716sample)
  return msg_.uart485forhfs716sample_;
}

// .VoltageDataV1 voltagedatav1 = 38;
inline bool SensorUpMessage::has_voltagedatav1() const {
  return msg_case() == kVoltagedatav1;
}
inline void SensorUpMessage::set_has_voltagedatav1() {
  _oneof_case_[0] = kVoltagedatav1;
}
inline ::VoltageDataV1* SensorUpMessage::release_voltagedatav1() {
  // @@protoc_insertion_point(field_release:SensorMessages.SensorUpMessage.voltagedatav1)
  if (has_voltagedatav1()) {
    clear_has_msg();
      ::VoltageDataV1* temp = msg_.voltagedatav1_;
    msg_.voltagedatav1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VoltageDataV1& SensorUpMessage::voltagedatav1() const {
  // @@protoc_insertion_point(field_get:SensorMessages.SensorUpMessage.voltagedatav1)
  return has_voltagedatav1()
      ? *msg_.voltagedatav1_
      : *reinterpret_cast< ::VoltageDataV1*>(&::_VoltageDataV1_default_instance_);
}
inline ::VoltageDataV1* SensorUpMessage::mutable_voltagedatav1() {
  if (!has_voltagedatav1()) {
    clear_msg();
    set_has_voltagedatav1();
    msg_.voltagedatav1_ = CreateMaybeMessage< ::VoltageDataV1 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:SensorMessages.SensorUpMessage.voltagedatav1)
  return msg_.voltagedatav1_;
}

inline bool SensorUpMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void SensorUpMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline SensorUpMessage::MsgCase SensorUpMessage::msg_case() const {
  return SensorUpMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorMessages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SensorUpMessage_2eproto
