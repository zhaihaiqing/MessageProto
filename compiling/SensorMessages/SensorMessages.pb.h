// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorMessages/SensorMessages.proto

#ifndef PROTOBUF_INCLUDED_SensorMessages_2fSensorMessages_2eproto
#define PROTOBUF_INCLUDED_SensorMessages_2fSensorMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SensorMessages_2fSensorMessages_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SensorMessages_2fSensorMessages_2eproto();
class AnemometerData;
class AnemometerDataDefaultTypeInternal;
extern AnemometerDataDefaultTypeInternal _AnemometerData_default_instance_;
class CablePeaksHCF100;
class CablePeaksHCF100DefaultTypeInternal;
extern CablePeaksHCF100DefaultTypeInternal _CablePeaksHCF100_default_instance_;
class CurrentData;
class CurrentDataDefaultTypeInternal;
extern CurrentDataDefaultTypeInternal _CurrentData_default_instance_;
class DistanceData;
class DistanceDataDefaultTypeInternal;
extern DistanceDataDefaultTypeInternal _DistanceData_default_instance_;
class GRTU1000;
class GRTU1000DefaultTypeInternal;
extern GRTU1000DefaultTypeInternal _GRTU1000_default_instance_;
class HOS3000CH4;
class HOS3000CH4DefaultTypeInternal;
extern HOS3000CH4DefaultTypeInternal _HOS3000CH4_default_instance_;
class HighPrecisionIncliData;
class HighPrecisionIncliDataDefaultTypeInternal;
extern HighPrecisionIncliDataDefaultTypeInternal _HighPrecisionIncliData_default_instance_;
class IncliHCF410V1;
class IncliHCF410V1DefaultTypeInternal;
extern IncliHCF410V1DefaultTypeInternal _IncliHCF410V1_default_instance_;
class InclinationData;
class InclinationDataDefaultTypeInternal;
extern InclinationDataDefaultTypeInternal _InclinationData_default_instance_;
class MillivoltData;
class MillivoltDataDefaultTypeInternal;
extern MillivoltDataDefaultTypeInternal _MillivoltData_default_instance_;
class ResistanceData;
class ResistanceDataDefaultTypeInternal;
extern ResistanceDataDefaultTypeInternal _ResistanceData_default_instance_;
class SettlementData;
class SettlementDataDefaultTypeInternal;
extern SettlementDataDefaultTypeInternal _SettlementData_default_instance_;
class StressData;
class StressDataDefaultTypeInternal;
extern StressDataDefaultTypeInternal _StressData_default_instance_;
class TempHumiData;
class TempHumiDataDefaultTypeInternal;
extern TempHumiDataDefaultTypeInternal _TempHumiData_default_instance_;
class Uart485ForHFS716Sample;
class Uart485ForHFS716SampleDefaultTypeInternal;
extern Uart485ForHFS716SampleDefaultTypeInternal _Uart485ForHFS716Sample_default_instance_;
class VibraWireData;
class VibraWireDataDefaultTypeInternal;
extern VibraWireDataDefaultTypeInternal _VibraWireData_default_instance_;
class VibrationData;
class VibrationDataDefaultTypeInternal;
extern VibrationDataDefaultTypeInternal _VibrationData_default_instance_;
class VoltageData;
class VoltageDataDefaultTypeInternal;
extern VoltageDataDefaultTypeInternal _VoltageData_default_instance_;
class VoltageDataV1;
class VoltageDataV1DefaultTypeInternal;
extern VoltageDataV1DefaultTypeInternal _VoltageDataV1_default_instance_;
namespace google {
namespace protobuf {
template<> ::AnemometerData* Arena::CreateMaybeMessage<::AnemometerData>(Arena*);
template<> ::CablePeaksHCF100* Arena::CreateMaybeMessage<::CablePeaksHCF100>(Arena*);
template<> ::CurrentData* Arena::CreateMaybeMessage<::CurrentData>(Arena*);
template<> ::DistanceData* Arena::CreateMaybeMessage<::DistanceData>(Arena*);
template<> ::GRTU1000* Arena::CreateMaybeMessage<::GRTU1000>(Arena*);
template<> ::HOS3000CH4* Arena::CreateMaybeMessage<::HOS3000CH4>(Arena*);
template<> ::HighPrecisionIncliData* Arena::CreateMaybeMessage<::HighPrecisionIncliData>(Arena*);
template<> ::IncliHCF410V1* Arena::CreateMaybeMessage<::IncliHCF410V1>(Arena*);
template<> ::InclinationData* Arena::CreateMaybeMessage<::InclinationData>(Arena*);
template<> ::MillivoltData* Arena::CreateMaybeMessage<::MillivoltData>(Arena*);
template<> ::ResistanceData* Arena::CreateMaybeMessage<::ResistanceData>(Arena*);
template<> ::SettlementData* Arena::CreateMaybeMessage<::SettlementData>(Arena*);
template<> ::StressData* Arena::CreateMaybeMessage<::StressData>(Arena*);
template<> ::TempHumiData* Arena::CreateMaybeMessage<::TempHumiData>(Arena*);
template<> ::Uart485ForHFS716Sample* Arena::CreateMaybeMessage<::Uart485ForHFS716Sample>(Arena*);
template<> ::VibraWireData* Arena::CreateMaybeMessage<::VibraWireData>(Arena*);
template<> ::VibrationData* Arena::CreateMaybeMessage<::VibrationData>(Arena*);
template<> ::VoltageData* Arena::CreateMaybeMessage<::VoltageData>(Arena*);
template<> ::VoltageDataV1* Arena::CreateMaybeMessage<::VoltageDataV1>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class HighPrecisionIncliData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HighPrecisionIncliData) */ {
 public:
  HighPrecisionIncliData();
  virtual ~HighPrecisionIncliData();

  HighPrecisionIncliData(const HighPrecisionIncliData& from);

  inline HighPrecisionIncliData& operator=(const HighPrecisionIncliData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HighPrecisionIncliData(HighPrecisionIncliData&& from) noexcept
    : HighPrecisionIncliData() {
    *this = ::std::move(from);
  }

  inline HighPrecisionIncliData& operator=(HighPrecisionIncliData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HighPrecisionIncliData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HighPrecisionIncliData* internal_default_instance() {
    return reinterpret_cast<const HighPrecisionIncliData*>(
               &_HighPrecisionIncliData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HighPrecisionIncliData* other);
  friend void swap(HighPrecisionIncliData& a, HighPrecisionIncliData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HighPrecisionIncliData* New() const final {
    return CreateMaybeMessage<HighPrecisionIncliData>(nullptr);
  }

  HighPrecisionIncliData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HighPrecisionIncliData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HighPrecisionIncliData& from);
  void MergeFrom(const HighPrecisionIncliData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HighPrecisionIncliData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double angle = 1;
  void clear_angle();
  static const int kAngleFieldNumber = 1;
  double angle() const;
  void set_angle(double value);

  // double chip_temp = 2;
  void clear_chip_temp();
  static const int kChipTempFieldNumber = 2;
  double chip_temp() const;
  void set_chip_temp(double value);

  // @@protoc_insertion_point(class_scope:HighPrecisionIncliData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double angle_;
  double chip_temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class TempHumiData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TempHumiData) */ {
 public:
  TempHumiData();
  virtual ~TempHumiData();

  TempHumiData(const TempHumiData& from);

  inline TempHumiData& operator=(const TempHumiData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TempHumiData(TempHumiData&& from) noexcept
    : TempHumiData() {
    *this = ::std::move(from);
  }

  inline TempHumiData& operator=(TempHumiData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TempHumiData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempHumiData* internal_default_instance() {
    return reinterpret_cast<const TempHumiData*>(
               &_TempHumiData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TempHumiData* other);
  friend void swap(TempHumiData& a, TempHumiData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TempHumiData* New() const final {
    return CreateMaybeMessage<TempHumiData>(nullptr);
  }

  TempHumiData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TempHumiData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TempHumiData& from);
  void MergeFrom(const TempHumiData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempHumiData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double humi = 1;
  void clear_humi();
  static const int kHumiFieldNumber = 1;
  double humi() const;
  void set_humi(double value);

  // double temp = 2;
  void clear_temp();
  static const int kTempFieldNumber = 2;
  double temp() const;
  void set_temp(double value);

  // @@protoc_insertion_point(class_scope:TempHumiData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double humi_;
  double temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class VibraWireData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VibraWireData) */ {
 public:
  VibraWireData();
  virtual ~VibraWireData();

  VibraWireData(const VibraWireData& from);

  inline VibraWireData& operator=(const VibraWireData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VibraWireData(VibraWireData&& from) noexcept
    : VibraWireData() {
    *this = ::std::move(from);
  }

  inline VibraWireData& operator=(VibraWireData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VibraWireData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibraWireData* internal_default_instance() {
    return reinterpret_cast<const VibraWireData*>(
               &_VibraWireData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VibraWireData* other);
  friend void swap(VibraWireData& a, VibraWireData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VibraWireData* New() const final {
    return CreateMaybeMessage<VibraWireData>(nullptr);
  }

  VibraWireData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VibraWireData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VibraWireData& from);
  void MergeFrom(const VibraWireData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibraWireData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double freq = 3;
  void clear_freq();
  static const int kFreqFieldNumber = 3;
  double freq() const;
  void set_freq(double value);

  // double temp = 4;
  void clear_temp();
  static const int kTempFieldNumber = 4;
  double temp() const;
  void set_temp(double value);

  // int32 db = 2;
  void clear_db();
  static const int kDbFieldNumber = 2;
  ::google::protobuf::int32 db() const;
  void set_db(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VibraWireData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double freq_;
  double temp_;
  ::google::protobuf::int32 db_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class AnemometerData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AnemometerData) */ {
 public:
  AnemometerData();
  virtual ~AnemometerData();

  AnemometerData(const AnemometerData& from);

  inline AnemometerData& operator=(const AnemometerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnemometerData(AnemometerData&& from) noexcept
    : AnemometerData() {
    *this = ::std::move(from);
  }

  inline AnemometerData& operator=(AnemometerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AnemometerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnemometerData* internal_default_instance() {
    return reinterpret_cast<const AnemometerData*>(
               &_AnemometerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AnemometerData* other);
  friend void swap(AnemometerData& a, AnemometerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnemometerData* New() const final {
    return CreateMaybeMessage<AnemometerData>(nullptr);
  }

  AnemometerData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnemometerData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnemometerData& from);
  void MergeFrom(const AnemometerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnemometerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double dev_temp = 1;
  void clear_dev_temp();
  static const int kDevTempFieldNumber = 1;
  double dev_temp() const;
  void set_dev_temp(double value);

  // double humi = 2;
  void clear_humi();
  static const int kHumiFieldNumber = 2;
  double humi() const;
  void set_humi(double value);

  // double smooth_wind_direction = 3;
  void clear_smooth_wind_direction();
  static const int kSmoothWindDirectionFieldNumber = 3;
  double smooth_wind_direction() const;
  void set_smooth_wind_direction(double value);

  // double smooth_wind_speed = 4;
  void clear_smooth_wind_speed();
  static const int kSmoothWindSpeedFieldNumber = 4;
  double smooth_wind_speed() const;
  void set_smooth_wind_speed(double value);

  // double temp = 5;
  void clear_temp();
  static const int kTempFieldNumber = 5;
  double temp() const;
  void set_temp(double value);

  // double wind_direction = 6;
  void clear_wind_direction();
  static const int kWindDirectionFieldNumber = 6;
  double wind_direction() const;
  void set_wind_direction(double value);

  // double wind_speed = 7;
  void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 7;
  double wind_speed() const;
  void set_wind_speed(double value);

  // @@protoc_insertion_point(class_scope:AnemometerData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double dev_temp_;
  double humi_;
  double smooth_wind_direction_;
  double smooth_wind_speed_;
  double temp_;
  double wind_direction_;
  double wind_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class InclinationData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InclinationData) */ {
 public:
  InclinationData();
  virtual ~InclinationData();

  InclinationData(const InclinationData& from);

  inline InclinationData& operator=(const InclinationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InclinationData(InclinationData&& from) noexcept
    : InclinationData() {
    *this = ::std::move(from);
  }

  inline InclinationData& operator=(InclinationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InclinationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InclinationData* internal_default_instance() {
    return reinterpret_cast<const InclinationData*>(
               &_InclinationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InclinationData* other);
  friend void swap(InclinationData& a, InclinationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InclinationData* New() const final {
    return CreateMaybeMessage<InclinationData>(nullptr);
  }

  InclinationData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InclinationData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InclinationData& from);
  void MergeFrom(const InclinationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InclinationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double absolute_angle = 1;
  void clear_absolute_angle();
  static const int kAbsoluteAngleFieldNumber = 1;
  double absolute_angle() const;
  void set_absolute_angle(double value);

  // double primary_projection = 2;
  void clear_primary_projection();
  static const int kPrimaryProjectionFieldNumber = 2;
  double primary_projection() const;
  void set_primary_projection(double value);

  // double secondary_projection = 3;
  void clear_secondary_projection();
  static const int kSecondaryProjectionFieldNumber = 3;
  double secondary_projection() const;
  void set_secondary_projection(double value);

  // @@protoc_insertion_point(class_scope:InclinationData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double absolute_angle_;
  double primary_projection_;
  double secondary_projection_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class VoltageData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoltageData) */ {
 public:
  VoltageData();
  virtual ~VoltageData();

  VoltageData(const VoltageData& from);

  inline VoltageData& operator=(const VoltageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoltageData(VoltageData&& from) noexcept
    : VoltageData() {
    *this = ::std::move(from);
  }

  inline VoltageData& operator=(VoltageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VoltageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoltageData* internal_default_instance() {
    return reinterpret_cast<const VoltageData*>(
               &_VoltageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(VoltageData* other);
  friend void swap(VoltageData& a, VoltageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoltageData* New() const final {
    return CreateMaybeMessage<VoltageData>(nullptr);
  }

  VoltageData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VoltageData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VoltageData& from);
  void MergeFrom(const VoltageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoltageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VoltageData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class CurrentData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CurrentData) */ {
 public:
  CurrentData();
  virtual ~CurrentData();

  CurrentData(const CurrentData& from);

  inline CurrentData& operator=(const CurrentData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrentData(CurrentData&& from) noexcept
    : CurrentData() {
    *this = ::std::move(from);
  }

  inline CurrentData& operator=(CurrentData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CurrentData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentData* internal_default_instance() {
    return reinterpret_cast<const CurrentData*>(
               &_CurrentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CurrentData* other);
  friend void swap(CurrentData& a, CurrentData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrentData* New() const final {
    return CreateMaybeMessage<CurrentData>(nullptr);
  }

  CurrentData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CurrentData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CurrentData& from);
  void MergeFrom(const CurrentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CurrentData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class ResistanceData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResistanceData) */ {
 public:
  ResistanceData();
  virtual ~ResistanceData();

  ResistanceData(const ResistanceData& from);

  inline ResistanceData& operator=(const ResistanceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResistanceData(ResistanceData&& from) noexcept
    : ResistanceData() {
    *this = ::std::move(from);
  }

  inline ResistanceData& operator=(ResistanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResistanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResistanceData* internal_default_instance() {
    return reinterpret_cast<const ResistanceData*>(
               &_ResistanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResistanceData* other);
  friend void swap(ResistanceData& a, ResistanceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResistanceData* New() const final {
    return CreateMaybeMessage<ResistanceData>(nullptr);
  }

  ResistanceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResistanceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResistanceData& from);
  void MergeFrom(const ResistanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResistanceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ResistanceData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class MillivoltData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MillivoltData) */ {
 public:
  MillivoltData();
  virtual ~MillivoltData();

  MillivoltData(const MillivoltData& from);

  inline MillivoltData& operator=(const MillivoltData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MillivoltData(MillivoltData&& from) noexcept
    : MillivoltData() {
    *this = ::std::move(from);
  }

  inline MillivoltData& operator=(MillivoltData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MillivoltData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MillivoltData* internal_default_instance() {
    return reinterpret_cast<const MillivoltData*>(
               &_MillivoltData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MillivoltData* other);
  friend void swap(MillivoltData& a, MillivoltData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MillivoltData* New() const final {
    return CreateMaybeMessage<MillivoltData>(nullptr);
  }

  MillivoltData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MillivoltData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MillivoltData& from);
  void MergeFrom(const MillivoltData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MillivoltData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MillivoltData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class VibrationData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VibrationData) */ {
 public:
  VibrationData();
  virtual ~VibrationData();

  VibrationData(const VibrationData& from);

  inline VibrationData& operator=(const VibrationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VibrationData(VibrationData&& from) noexcept
    : VibrationData() {
    *this = ::std::move(from);
  }

  inline VibrationData& operator=(VibrationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VibrationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VibrationData* internal_default_instance() {
    return reinterpret_cast<const VibrationData*>(
               &_VibrationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(VibrationData* other);
  friend void swap(VibrationData& a, VibrationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VibrationData* New() const final {
    return CreateMaybeMessage<VibrationData>(nullptr);
  }

  VibrationData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VibrationData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VibrationData& from);
  void MergeFrom(const VibrationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VibrationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VibrationData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class CablePeaksHCF100 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CablePeaksHCF100) */ {
 public:
  CablePeaksHCF100();
  virtual ~CablePeaksHCF100();

  CablePeaksHCF100(const CablePeaksHCF100& from);

  inline CablePeaksHCF100& operator=(const CablePeaksHCF100& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CablePeaksHCF100(CablePeaksHCF100&& from) noexcept
    : CablePeaksHCF100() {
    *this = ::std::move(from);
  }

  inline CablePeaksHCF100& operator=(CablePeaksHCF100&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CablePeaksHCF100& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CablePeaksHCF100* internal_default_instance() {
    return reinterpret_cast<const CablePeaksHCF100*>(
               &_CablePeaksHCF100_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CablePeaksHCF100* other);
  friend void swap(CablePeaksHCF100& a, CablePeaksHCF100& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CablePeaksHCF100* New() const final {
    return CreateMaybeMessage<CablePeaksHCF100>(nullptr);
  }

  CablePeaksHCF100* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CablePeaksHCF100>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CablePeaksHCF100& from);
  void MergeFrom(const CablePeaksHCF100& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CablePeaksHCF100* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 peaks = 2;
  int peaks_size() const;
  void clear_peaks();
  static const int kPeaksFieldNumber = 2;
  ::google::protobuf::int32 peaks(int index) const;
  void set_peaks(int index, ::google::protobuf::int32 value);
  void add_peaks(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      peaks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_peaks();

  // repeated int32 values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::google::protobuf::int32 values(int index) const;
  void set_values(int index, ::google::protobuf::int32 value);
  void add_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // double base_freq = 1;
  void clear_base_freq();
  static const int kBaseFreqFieldNumber = 1;
  double base_freq() const;
  void set_base_freq(double value);

  // @@protoc_insertion_point(class_scope:CablePeaksHCF100)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > peaks_;
  mutable std::atomic<int> _peaks_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  double base_freq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class SettlementData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SettlementData) */ {
 public:
  SettlementData();
  virtual ~SettlementData();

  SettlementData(const SettlementData& from);

  inline SettlementData& operator=(const SettlementData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettlementData(SettlementData&& from) noexcept
    : SettlementData() {
    *this = ::std::move(from);
  }

  inline SettlementData& operator=(SettlementData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettlementData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettlementData* internal_default_instance() {
    return reinterpret_cast<const SettlementData*>(
               &_SettlementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SettlementData* other);
  friend void swap(SettlementData& a, SettlementData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettlementData* New() const final {
    return CreateMaybeMessage<SettlementData>(nullptr);
  }

  SettlementData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettlementData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettlementData& from);
  void MergeFrom(const SettlementData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlementData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double adc_value = 1;
  void clear_adc_value();
  static const int kAdcValueFieldNumber = 1;
  double adc_value() const;
  void set_adc_value(double value);

  // double raw_press = 3;
  void clear_raw_press();
  static const int kRawPressFieldNumber = 3;
  double raw_press() const;
  void set_raw_press(double value);

  // double raw_value = 4;
  void clear_raw_value();
  static const int kRawValueFieldNumber = 4;
  double raw_value() const;
  void set_raw_value(double value);

  // double relative_value = 5;
  void clear_relative_value();
  static const int kRelativeValueFieldNumber = 5;
  double relative_value() const;
  void set_relative_value(double value);

  // double temp = 6;
  void clear_temp();
  static const int kTempFieldNumber = 6;
  double temp() const;
  void set_temp(double value);

  // double value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  double value() const;
  void set_value(double value);

  // int32 err = 2;
  void clear_err();
  static const int kErrFieldNumber = 2;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SettlementData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double adc_value_;
  double raw_press_;
  double raw_value_;
  double relative_value_;
  double temp_;
  double value_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class StressData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StressData) */ {
 public:
  StressData();
  virtual ~StressData();

  StressData(const StressData& from);

  inline StressData& operator=(const StressData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StressData(StressData&& from) noexcept
    : StressData() {
    *this = ::std::move(from);
  }

  inline StressData& operator=(StressData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StressData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StressData* internal_default_instance() {
    return reinterpret_cast<const StressData*>(
               &_StressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StressData* other);
  friend void swap(StressData& a, StressData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StressData* New() const final {
    return CreateMaybeMessage<StressData>(nullptr);
  }

  StressData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StressData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StressData& from);
  void MergeFrom(const StressData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StressData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  double data() const;
  void set_data(double value);

  // double sample_interval = 4;
  void clear_sample_interval();
  static const int kSampleIntervalFieldNumber = 4;
  double sample_interval() const;
  void set_sample_interval(double value);

  // int32 microsecond = 3;
  void clear_microsecond();
  static const int kMicrosecondFieldNumber = 3;
  ::google::protobuf::int32 microsecond() const;
  void set_microsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StressData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double data_;
  double sample_interval_;
  ::google::protobuf::int32 microsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class IncliHCF410V1 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IncliHCF410V1) */ {
 public:
  IncliHCF410V1();
  virtual ~IncliHCF410V1();

  IncliHCF410V1(const IncliHCF410V1& from);

  inline IncliHCF410V1& operator=(const IncliHCF410V1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncliHCF410V1(IncliHCF410V1&& from) noexcept
    : IncliHCF410V1() {
    *this = ::std::move(from);
  }

  inline IncliHCF410V1& operator=(IncliHCF410V1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IncliHCF410V1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncliHCF410V1* internal_default_instance() {
    return reinterpret_cast<const IncliHCF410V1*>(
               &_IncliHCF410V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(IncliHCF410V1* other);
  friend void swap(IncliHCF410V1& a, IncliHCF410V1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncliHCF410V1* New() const final {
    return CreateMaybeMessage<IncliHCF410V1>(nullptr);
  }

  IncliHCF410V1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncliHCF410V1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncliHCF410V1& from);
  void MergeFrom(const IncliHCF410V1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncliHCF410V1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:IncliHCF410V1)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class GRTU1000 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GRTU1000) */ {
 public:
  GRTU1000();
  virtual ~GRTU1000();

  GRTU1000(const GRTU1000& from);

  inline GRTU1000& operator=(const GRTU1000& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GRTU1000(GRTU1000&& from) noexcept
    : GRTU1000() {
    *this = ::std::move(from);
  }

  inline GRTU1000& operator=(GRTU1000&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GRTU1000& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GRTU1000* internal_default_instance() {
    return reinterpret_cast<const GRTU1000*>(
               &_GRTU1000_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GRTU1000* other);
  friend void swap(GRTU1000& a, GRTU1000& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GRTU1000* New() const final {
    return CreateMaybeMessage<GRTU1000>(nullptr);
  }

  GRTU1000* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GRTU1000>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GRTU1000& from);
  void MergeFrom(const GRTU1000& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GRTU1000* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 gas_channel_1 = 1;
  void clear_gas_channel_1();
  static const int kGasChannel1FieldNumber = 1;
  ::google::protobuf::int32 gas_channel_1() const;
  void set_gas_channel_1(::google::protobuf::int32 value);

  // int32 gas_channel_2 = 2;
  void clear_gas_channel_2();
  static const int kGasChannel2FieldNumber = 2;
  ::google::protobuf::int32 gas_channel_2() const;
  void set_gas_channel_2(::google::protobuf::int32 value);

  // int32 gas_channel_3 = 3;
  void clear_gas_channel_3();
  static const int kGasChannel3FieldNumber = 3;
  ::google::protobuf::int32 gas_channel_3() const;
  void set_gas_channel_3(::google::protobuf::int32 value);

  // int32 gas_channel_4 = 4;
  void clear_gas_channel_4();
  static const int kGasChannel4FieldNumber = 4;
  ::google::protobuf::int32 gas_channel_4() const;
  void set_gas_channel_4(::google::protobuf::int32 value);

  // double temp = 5;
  void clear_temp();
  static const int kTempFieldNumber = 5;
  double temp() const;
  void set_temp(double value);

  // @@protoc_insertion_point(class_scope:GRTU1000)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gas_channel_1_;
  ::google::protobuf::int32 gas_channel_2_;
  ::google::protobuf::int32 gas_channel_3_;
  ::google::protobuf::int32 gas_channel_4_;
  double temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class HOS3000CH4 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HOS3000CH4) */ {
 public:
  HOS3000CH4();
  virtual ~HOS3000CH4();

  HOS3000CH4(const HOS3000CH4& from);

  inline HOS3000CH4& operator=(const HOS3000CH4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HOS3000CH4(HOS3000CH4&& from) noexcept
    : HOS3000CH4() {
    *this = ::std::move(from);
  }

  inline HOS3000CH4& operator=(HOS3000CH4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HOS3000CH4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HOS3000CH4* internal_default_instance() {
    return reinterpret_cast<const HOS3000CH4*>(
               &_HOS3000CH4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(HOS3000CH4* other);
  friend void swap(HOS3000CH4& a, HOS3000CH4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HOS3000CH4* New() const final {
    return CreateMaybeMessage<HOS3000CH4>(nullptr);
  }

  HOS3000CH4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HOS3000CH4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HOS3000CH4& from);
  void MergeFrom(const HOS3000CH4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HOS3000CH4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 GasStrength = 1;
  void clear_gasstrength();
  static const int kGasStrengthFieldNumber = 1;
  ::google::protobuf::int32 gasstrength() const;
  void set_gasstrength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HOS3000CH4)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gasstrength_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class DistanceData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistanceData) */ {
 public:
  DistanceData();
  virtual ~DistanceData();

  DistanceData(const DistanceData& from);

  inline DistanceData& operator=(const DistanceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistanceData(DistanceData&& from) noexcept
    : DistanceData() {
    *this = ::std::move(from);
  }

  inline DistanceData& operator=(DistanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DistanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceData* internal_default_instance() {
    return reinterpret_cast<const DistanceData*>(
               &_DistanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(DistanceData* other);
  friend void swap(DistanceData& a, DistanceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistanceData* New() const final {
    return CreateMaybeMessage<DistanceData>(nullptr);
  }

  DistanceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistanceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistanceData& from);
  void MergeFrom(const DistanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double Distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:DistanceData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class Uart485ForHFS716Sample :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Uart485ForHFS716Sample) */ {
 public:
  Uart485ForHFS716Sample();
  virtual ~Uart485ForHFS716Sample();

  Uart485ForHFS716Sample(const Uart485ForHFS716Sample& from);

  inline Uart485ForHFS716Sample& operator=(const Uart485ForHFS716Sample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uart485ForHFS716Sample(Uart485ForHFS716Sample&& from) noexcept
    : Uart485ForHFS716Sample() {
    *this = ::std::move(from);
  }

  inline Uart485ForHFS716Sample& operator=(Uart485ForHFS716Sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Uart485ForHFS716Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uart485ForHFS716Sample* internal_default_instance() {
    return reinterpret_cast<const Uart485ForHFS716Sample*>(
               &_Uart485ForHFS716Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Uart485ForHFS716Sample* other);
  friend void swap(Uart485ForHFS716Sample& a, Uart485ForHFS716Sample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uart485ForHFS716Sample* New() const final {
    return CreateMaybeMessage<Uart485ForHFS716Sample>(nullptr);
  }

  Uart485ForHFS716Sample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uart485ForHFS716Sample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uart485ForHFS716Sample& from);
  void MergeFrom(const Uart485ForHFS716Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uart485ForHFS716Sample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // double Hz_or_resratio = 1;
  void clear_hz_or_resratio();
  static const int kHzOrResratioFieldNumber = 1;
  double hz_or_resratio() const;
  void set_hz_or_resratio(double value);

  // double temperature_or_ressum = 4;
  void clear_temperature_or_ressum();
  static const int kTemperatureOrRessumFieldNumber = 4;
  double temperature_or_ressum() const;
  void set_temperature_or_ressum(double value);

  // int32 channel_unixtime = 3;
  void clear_channel_unixtime();
  static const int kChannelUnixtimeFieldNumber = 3;
  ::google::protobuf::int32 channel_unixtime() const;
  void set_channel_unixtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Uart485ForHFS716Sample)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  double hz_or_resratio_;
  double temperature_or_ressum_;
  ::google::protobuf::int32 channel_unixtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// -------------------------------------------------------------------

class VoltageDataV1 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoltageDataV1) */ {
 public:
  VoltageDataV1();
  virtual ~VoltageDataV1();

  VoltageDataV1(const VoltageDataV1& from);

  inline VoltageDataV1& operator=(const VoltageDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoltageDataV1(VoltageDataV1&& from) noexcept
    : VoltageDataV1() {
    *this = ::std::move(from);
  }

  inline VoltageDataV1& operator=(VoltageDataV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VoltageDataV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoltageDataV1* internal_default_instance() {
    return reinterpret_cast<const VoltageDataV1*>(
               &_VoltageDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(VoltageDataV1* other);
  friend void swap(VoltageDataV1& a, VoltageDataV1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoltageDataV1* New() const final {
    return CreateMaybeMessage<VoltageDataV1>(nullptr);
  }

  VoltageDataV1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VoltageDataV1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VoltageDataV1& from);
  void MergeFrom(const VoltageDataV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoltageDataV1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double mV = 1;
  void clear_mv();
  static const int kMVFieldNumber = 1;
  double mv() const;
  void set_mv(double value);

  // double temp = 2;
  void clear_temp();
  static const int kTempFieldNumber = 2;
  double temp() const;
  void set_temp(double value);

  // @@protoc_insertion_point(class_scope:VoltageDataV1)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double mv_;
  double temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SensorMessages_2fSensorMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HighPrecisionIncliData

// double angle = 1;
inline void HighPrecisionIncliData::clear_angle() {
  angle_ = 0;
}
inline double HighPrecisionIncliData::angle() const {
  // @@protoc_insertion_point(field_get:HighPrecisionIncliData.angle)
  return angle_;
}
inline void HighPrecisionIncliData::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:HighPrecisionIncliData.angle)
}

// double chip_temp = 2;
inline void HighPrecisionIncliData::clear_chip_temp() {
  chip_temp_ = 0;
}
inline double HighPrecisionIncliData::chip_temp() const {
  // @@protoc_insertion_point(field_get:HighPrecisionIncliData.chip_temp)
  return chip_temp_;
}
inline void HighPrecisionIncliData::set_chip_temp(double value) {
  
  chip_temp_ = value;
  // @@protoc_insertion_point(field_set:HighPrecisionIncliData.chip_temp)
}

// -------------------------------------------------------------------

// TempHumiData

// double humi = 1;
inline void TempHumiData::clear_humi() {
  humi_ = 0;
}
inline double TempHumiData::humi() const {
  // @@protoc_insertion_point(field_get:TempHumiData.humi)
  return humi_;
}
inline void TempHumiData::set_humi(double value) {
  
  humi_ = value;
  // @@protoc_insertion_point(field_set:TempHumiData.humi)
}

// double temp = 2;
inline void TempHumiData::clear_temp() {
  temp_ = 0;
}
inline double TempHumiData::temp() const {
  // @@protoc_insertion_point(field_get:TempHumiData.temp)
  return temp_;
}
inline void TempHumiData::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:TempHumiData.temp)
}

// -------------------------------------------------------------------

// VibraWireData

// string channel = 1;
inline void VibraWireData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VibraWireData::channel() const {
  // @@protoc_insertion_point(field_get:VibraWireData.channel)
  return channel_.GetNoArena();
}
inline void VibraWireData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VibraWireData.channel)
}
#if LANG_CXX11
inline void VibraWireData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VibraWireData.channel)
}
#endif
inline void VibraWireData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VibraWireData.channel)
}
inline void VibraWireData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VibraWireData.channel)
}
inline ::std::string* VibraWireData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:VibraWireData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VibraWireData::release_channel() {
  // @@protoc_insertion_point(field_release:VibraWireData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VibraWireData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:VibraWireData.channel)
}

// int32 db = 2;
inline void VibraWireData::clear_db() {
  db_ = 0;
}
inline ::google::protobuf::int32 VibraWireData::db() const {
  // @@protoc_insertion_point(field_get:VibraWireData.db)
  return db_;
}
inline void VibraWireData::set_db(::google::protobuf::int32 value) {
  
  db_ = value;
  // @@protoc_insertion_point(field_set:VibraWireData.db)
}

// double freq = 3;
inline void VibraWireData::clear_freq() {
  freq_ = 0;
}
inline double VibraWireData::freq() const {
  // @@protoc_insertion_point(field_get:VibraWireData.freq)
  return freq_;
}
inline void VibraWireData::set_freq(double value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:VibraWireData.freq)
}

// double temp = 4;
inline void VibraWireData::clear_temp() {
  temp_ = 0;
}
inline double VibraWireData::temp() const {
  // @@protoc_insertion_point(field_get:VibraWireData.temp)
  return temp_;
}
inline void VibraWireData::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:VibraWireData.temp)
}

// -------------------------------------------------------------------

// AnemometerData

// double dev_temp = 1;
inline void AnemometerData::clear_dev_temp() {
  dev_temp_ = 0;
}
inline double AnemometerData::dev_temp() const {
  // @@protoc_insertion_point(field_get:AnemometerData.dev_temp)
  return dev_temp_;
}
inline void AnemometerData::set_dev_temp(double value) {
  
  dev_temp_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.dev_temp)
}

// double humi = 2;
inline void AnemometerData::clear_humi() {
  humi_ = 0;
}
inline double AnemometerData::humi() const {
  // @@protoc_insertion_point(field_get:AnemometerData.humi)
  return humi_;
}
inline void AnemometerData::set_humi(double value) {
  
  humi_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.humi)
}

// double smooth_wind_direction = 3;
inline void AnemometerData::clear_smooth_wind_direction() {
  smooth_wind_direction_ = 0;
}
inline double AnemometerData::smooth_wind_direction() const {
  // @@protoc_insertion_point(field_get:AnemometerData.smooth_wind_direction)
  return smooth_wind_direction_;
}
inline void AnemometerData::set_smooth_wind_direction(double value) {
  
  smooth_wind_direction_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.smooth_wind_direction)
}

// double smooth_wind_speed = 4;
inline void AnemometerData::clear_smooth_wind_speed() {
  smooth_wind_speed_ = 0;
}
inline double AnemometerData::smooth_wind_speed() const {
  // @@protoc_insertion_point(field_get:AnemometerData.smooth_wind_speed)
  return smooth_wind_speed_;
}
inline void AnemometerData::set_smooth_wind_speed(double value) {
  
  smooth_wind_speed_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.smooth_wind_speed)
}

// double temp = 5;
inline void AnemometerData::clear_temp() {
  temp_ = 0;
}
inline double AnemometerData::temp() const {
  // @@protoc_insertion_point(field_get:AnemometerData.temp)
  return temp_;
}
inline void AnemometerData::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.temp)
}

// double wind_direction = 6;
inline void AnemometerData::clear_wind_direction() {
  wind_direction_ = 0;
}
inline double AnemometerData::wind_direction() const {
  // @@protoc_insertion_point(field_get:AnemometerData.wind_direction)
  return wind_direction_;
}
inline void AnemometerData::set_wind_direction(double value) {
  
  wind_direction_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.wind_direction)
}

// double wind_speed = 7;
inline void AnemometerData::clear_wind_speed() {
  wind_speed_ = 0;
}
inline double AnemometerData::wind_speed() const {
  // @@protoc_insertion_point(field_get:AnemometerData.wind_speed)
  return wind_speed_;
}
inline void AnemometerData::set_wind_speed(double value) {
  
  wind_speed_ = value;
  // @@protoc_insertion_point(field_set:AnemometerData.wind_speed)
}

// -------------------------------------------------------------------

// InclinationData

// double absolute_angle = 1;
inline void InclinationData::clear_absolute_angle() {
  absolute_angle_ = 0;
}
inline double InclinationData::absolute_angle() const {
  // @@protoc_insertion_point(field_get:InclinationData.absolute_angle)
  return absolute_angle_;
}
inline void InclinationData::set_absolute_angle(double value) {
  
  absolute_angle_ = value;
  // @@protoc_insertion_point(field_set:InclinationData.absolute_angle)
}

// double primary_projection = 2;
inline void InclinationData::clear_primary_projection() {
  primary_projection_ = 0;
}
inline double InclinationData::primary_projection() const {
  // @@protoc_insertion_point(field_get:InclinationData.primary_projection)
  return primary_projection_;
}
inline void InclinationData::set_primary_projection(double value) {
  
  primary_projection_ = value;
  // @@protoc_insertion_point(field_set:InclinationData.primary_projection)
}

// double secondary_projection = 3;
inline void InclinationData::clear_secondary_projection() {
  secondary_projection_ = 0;
}
inline double InclinationData::secondary_projection() const {
  // @@protoc_insertion_point(field_get:InclinationData.secondary_projection)
  return secondary_projection_;
}
inline void InclinationData::set_secondary_projection(double value) {
  
  secondary_projection_ = value;
  // @@protoc_insertion_point(field_set:InclinationData.secondary_projection)
}

// -------------------------------------------------------------------

// VoltageData

// string channel = 1;
inline void VoltageData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoltageData::channel() const {
  // @@protoc_insertion_point(field_get:VoltageData.channel)
  return channel_.GetNoArena();
}
inline void VoltageData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoltageData.channel)
}
#if LANG_CXX11
inline void VoltageData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VoltageData.channel)
}
#endif
inline void VoltageData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoltageData.channel)
}
inline void VoltageData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoltageData.channel)
}
inline ::std::string* VoltageData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:VoltageData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoltageData::release_channel() {
  // @@protoc_insertion_point(field_release:VoltageData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoltageData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:VoltageData.channel)
}

// double data = 2;
inline void VoltageData::clear_data() {
  data_ = 0;
}
inline double VoltageData::data() const {
  // @@protoc_insertion_point(field_get:VoltageData.data)
  return data_;
}
inline void VoltageData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:VoltageData.data)
}

// int32 microsecond = 3;
inline void VoltageData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 VoltageData::microsecond() const {
  // @@protoc_insertion_point(field_get:VoltageData.microsecond)
  return microsecond_;
}
inline void VoltageData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:VoltageData.microsecond)
}

// double sample_interval = 4;
inline void VoltageData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double VoltageData::sample_interval() const {
  // @@protoc_insertion_point(field_get:VoltageData.sample_interval)
  return sample_interval_;
}
inline void VoltageData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:VoltageData.sample_interval)
}

// -------------------------------------------------------------------

// CurrentData

// string channel = 1;
inline void CurrentData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CurrentData::channel() const {
  // @@protoc_insertion_point(field_get:CurrentData.channel)
  return channel_.GetNoArena();
}
inline void CurrentData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CurrentData.channel)
}
#if LANG_CXX11
inline void CurrentData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CurrentData.channel)
}
#endif
inline void CurrentData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CurrentData.channel)
}
inline void CurrentData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CurrentData.channel)
}
inline ::std::string* CurrentData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:CurrentData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CurrentData::release_channel() {
  // @@protoc_insertion_point(field_release:CurrentData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:CurrentData.channel)
}

// double data = 2;
inline void CurrentData::clear_data() {
  data_ = 0;
}
inline double CurrentData::data() const {
  // @@protoc_insertion_point(field_get:CurrentData.data)
  return data_;
}
inline void CurrentData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:CurrentData.data)
}

// int32 microsecond = 3;
inline void CurrentData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 CurrentData::microsecond() const {
  // @@protoc_insertion_point(field_get:CurrentData.microsecond)
  return microsecond_;
}
inline void CurrentData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:CurrentData.microsecond)
}

// double sample_interval = 4;
inline void CurrentData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double CurrentData::sample_interval() const {
  // @@protoc_insertion_point(field_get:CurrentData.sample_interval)
  return sample_interval_;
}
inline void CurrentData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:CurrentData.sample_interval)
}

// -------------------------------------------------------------------

// ResistanceData

// string channel = 1;
inline void ResistanceData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResistanceData::channel() const {
  // @@protoc_insertion_point(field_get:ResistanceData.channel)
  return channel_.GetNoArena();
}
inline void ResistanceData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResistanceData.channel)
}
#if LANG_CXX11
inline void ResistanceData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResistanceData.channel)
}
#endif
inline void ResistanceData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResistanceData.channel)
}
inline void ResistanceData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResistanceData.channel)
}
inline ::std::string* ResistanceData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:ResistanceData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResistanceData::release_channel() {
  // @@protoc_insertion_point(field_release:ResistanceData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResistanceData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:ResistanceData.channel)
}

// double data = 2;
inline void ResistanceData::clear_data() {
  data_ = 0;
}
inline double ResistanceData::data() const {
  // @@protoc_insertion_point(field_get:ResistanceData.data)
  return data_;
}
inline void ResistanceData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:ResistanceData.data)
}

// int32 microsecond = 3;
inline void ResistanceData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 ResistanceData::microsecond() const {
  // @@protoc_insertion_point(field_get:ResistanceData.microsecond)
  return microsecond_;
}
inline void ResistanceData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:ResistanceData.microsecond)
}

// double sample_interval = 4;
inline void ResistanceData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double ResistanceData::sample_interval() const {
  // @@protoc_insertion_point(field_get:ResistanceData.sample_interval)
  return sample_interval_;
}
inline void ResistanceData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:ResistanceData.sample_interval)
}

// -------------------------------------------------------------------

// MillivoltData

// string channel = 1;
inline void MillivoltData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MillivoltData::channel() const {
  // @@protoc_insertion_point(field_get:MillivoltData.channel)
  return channel_.GetNoArena();
}
inline void MillivoltData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MillivoltData.channel)
}
#if LANG_CXX11
inline void MillivoltData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MillivoltData.channel)
}
#endif
inline void MillivoltData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MillivoltData.channel)
}
inline void MillivoltData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MillivoltData.channel)
}
inline ::std::string* MillivoltData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:MillivoltData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MillivoltData::release_channel() {
  // @@protoc_insertion_point(field_release:MillivoltData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MillivoltData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:MillivoltData.channel)
}

// double data = 2;
inline void MillivoltData::clear_data() {
  data_ = 0;
}
inline double MillivoltData::data() const {
  // @@protoc_insertion_point(field_get:MillivoltData.data)
  return data_;
}
inline void MillivoltData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:MillivoltData.data)
}

// int32 microsecond = 3;
inline void MillivoltData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 MillivoltData::microsecond() const {
  // @@protoc_insertion_point(field_get:MillivoltData.microsecond)
  return microsecond_;
}
inline void MillivoltData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:MillivoltData.microsecond)
}

// double sample_interval = 4;
inline void MillivoltData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double MillivoltData::sample_interval() const {
  // @@protoc_insertion_point(field_get:MillivoltData.sample_interval)
  return sample_interval_;
}
inline void MillivoltData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:MillivoltData.sample_interval)
}

// -------------------------------------------------------------------

// VibrationData

// string channel = 1;
inline void VibrationData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VibrationData::channel() const {
  // @@protoc_insertion_point(field_get:VibrationData.channel)
  return channel_.GetNoArena();
}
inline void VibrationData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VibrationData.channel)
}
#if LANG_CXX11
inline void VibrationData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VibrationData.channel)
}
#endif
inline void VibrationData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VibrationData.channel)
}
inline void VibrationData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VibrationData.channel)
}
inline ::std::string* VibrationData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:VibrationData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VibrationData::release_channel() {
  // @@protoc_insertion_point(field_release:VibrationData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VibrationData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:VibrationData.channel)
}

// double data = 2;
inline void VibrationData::clear_data() {
  data_ = 0;
}
inline double VibrationData::data() const {
  // @@protoc_insertion_point(field_get:VibrationData.data)
  return data_;
}
inline void VibrationData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:VibrationData.data)
}

// int32 microsecond = 3;
inline void VibrationData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 VibrationData::microsecond() const {
  // @@protoc_insertion_point(field_get:VibrationData.microsecond)
  return microsecond_;
}
inline void VibrationData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:VibrationData.microsecond)
}

// double sample_interval = 4;
inline void VibrationData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double VibrationData::sample_interval() const {
  // @@protoc_insertion_point(field_get:VibrationData.sample_interval)
  return sample_interval_;
}
inline void VibrationData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:VibrationData.sample_interval)
}

// -------------------------------------------------------------------

// CablePeaksHCF100

// double base_freq = 1;
inline void CablePeaksHCF100::clear_base_freq() {
  base_freq_ = 0;
}
inline double CablePeaksHCF100::base_freq() const {
  // @@protoc_insertion_point(field_get:CablePeaksHCF100.base_freq)
  return base_freq_;
}
inline void CablePeaksHCF100::set_base_freq(double value) {
  
  base_freq_ = value;
  // @@protoc_insertion_point(field_set:CablePeaksHCF100.base_freq)
}

// repeated int32 peaks = 2;
inline int CablePeaksHCF100::peaks_size() const {
  return peaks_.size();
}
inline void CablePeaksHCF100::clear_peaks() {
  peaks_.Clear();
}
inline ::google::protobuf::int32 CablePeaksHCF100::peaks(int index) const {
  // @@protoc_insertion_point(field_get:CablePeaksHCF100.peaks)
  return peaks_.Get(index);
}
inline void CablePeaksHCF100::set_peaks(int index, ::google::protobuf::int32 value) {
  peaks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CablePeaksHCF100.peaks)
}
inline void CablePeaksHCF100::add_peaks(::google::protobuf::int32 value) {
  peaks_.Add(value);
  // @@protoc_insertion_point(field_add:CablePeaksHCF100.peaks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CablePeaksHCF100::peaks() const {
  // @@protoc_insertion_point(field_list:CablePeaksHCF100.peaks)
  return peaks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CablePeaksHCF100::mutable_peaks() {
  // @@protoc_insertion_point(field_mutable_list:CablePeaksHCF100.peaks)
  return &peaks_;
}

// repeated int32 values = 3;
inline int CablePeaksHCF100::values_size() const {
  return values_.size();
}
inline void CablePeaksHCF100::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 CablePeaksHCF100::values(int index) const {
  // @@protoc_insertion_point(field_get:CablePeaksHCF100.values)
  return values_.Get(index);
}
inline void CablePeaksHCF100::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CablePeaksHCF100.values)
}
inline void CablePeaksHCF100::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CablePeaksHCF100.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CablePeaksHCF100::values() const {
  // @@protoc_insertion_point(field_list:CablePeaksHCF100.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CablePeaksHCF100::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CablePeaksHCF100.values)
  return &values_;
}

// -------------------------------------------------------------------

// SettlementData

// double adc_value = 1;
inline void SettlementData::clear_adc_value() {
  adc_value_ = 0;
}
inline double SettlementData::adc_value() const {
  // @@protoc_insertion_point(field_get:SettlementData.adc_value)
  return adc_value_;
}
inline void SettlementData::set_adc_value(double value) {
  
  adc_value_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.adc_value)
}

// int32 err = 2;
inline void SettlementData::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 SettlementData::err() const {
  // @@protoc_insertion_point(field_get:SettlementData.err)
  return err_;
}
inline void SettlementData::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.err)
}

// double raw_press = 3;
inline void SettlementData::clear_raw_press() {
  raw_press_ = 0;
}
inline double SettlementData::raw_press() const {
  // @@protoc_insertion_point(field_get:SettlementData.raw_press)
  return raw_press_;
}
inline void SettlementData::set_raw_press(double value) {
  
  raw_press_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.raw_press)
}

// double raw_value = 4;
inline void SettlementData::clear_raw_value() {
  raw_value_ = 0;
}
inline double SettlementData::raw_value() const {
  // @@protoc_insertion_point(field_get:SettlementData.raw_value)
  return raw_value_;
}
inline void SettlementData::set_raw_value(double value) {
  
  raw_value_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.raw_value)
}

// double relative_value = 5;
inline void SettlementData::clear_relative_value() {
  relative_value_ = 0;
}
inline double SettlementData::relative_value() const {
  // @@protoc_insertion_point(field_get:SettlementData.relative_value)
  return relative_value_;
}
inline void SettlementData::set_relative_value(double value) {
  
  relative_value_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.relative_value)
}

// double temp = 6;
inline void SettlementData::clear_temp() {
  temp_ = 0;
}
inline double SettlementData::temp() const {
  // @@protoc_insertion_point(field_get:SettlementData.temp)
  return temp_;
}
inline void SettlementData::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.temp)
}

// double value = 7;
inline void SettlementData::clear_value() {
  value_ = 0;
}
inline double SettlementData::value() const {
  // @@protoc_insertion_point(field_get:SettlementData.value)
  return value_;
}
inline void SettlementData::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:SettlementData.value)
}

// -------------------------------------------------------------------

// StressData

// string channel = 1;
inline void StressData::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StressData::channel() const {
  // @@protoc_insertion_point(field_get:StressData.channel)
  return channel_.GetNoArena();
}
inline void StressData::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StressData.channel)
}
#if LANG_CXX11
inline void StressData::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StressData.channel)
}
#endif
inline void StressData::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StressData.channel)
}
inline void StressData::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StressData.channel)
}
inline ::std::string* StressData::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:StressData.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StressData::release_channel() {
  // @@protoc_insertion_point(field_release:StressData.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StressData::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:StressData.channel)
}

// double data = 2;
inline void StressData::clear_data() {
  data_ = 0;
}
inline double StressData::data() const {
  // @@protoc_insertion_point(field_get:StressData.data)
  return data_;
}
inline void StressData::set_data(double value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:StressData.data)
}

// int32 microsecond = 3;
inline void StressData::clear_microsecond() {
  microsecond_ = 0;
}
inline ::google::protobuf::int32 StressData::microsecond() const {
  // @@protoc_insertion_point(field_get:StressData.microsecond)
  return microsecond_;
}
inline void StressData::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:StressData.microsecond)
}

// double sample_interval = 4;
inline void StressData::clear_sample_interval() {
  sample_interval_ = 0;
}
inline double StressData::sample_interval() const {
  // @@protoc_insertion_point(field_get:StressData.sample_interval)
  return sample_interval_;
}
inline void StressData::set_sample_interval(double value) {
  
  sample_interval_ = value;
  // @@protoc_insertion_point(field_set:StressData.sample_interval)
}

// -------------------------------------------------------------------

// IncliHCF410V1

// double x = 1;
inline void IncliHCF410V1::clear_x() {
  x_ = 0;
}
inline double IncliHCF410V1::x() const {
  // @@protoc_insertion_point(field_get:IncliHCF410V1.x)
  return x_;
}
inline void IncliHCF410V1::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:IncliHCF410V1.x)
}

// double y = 2;
inline void IncliHCF410V1::clear_y() {
  y_ = 0;
}
inline double IncliHCF410V1::y() const {
  // @@protoc_insertion_point(field_get:IncliHCF410V1.y)
  return y_;
}
inline void IncliHCF410V1::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:IncliHCF410V1.y)
}

// double z = 3;
inline void IncliHCF410V1::clear_z() {
  z_ = 0;
}
inline double IncliHCF410V1::z() const {
  // @@protoc_insertion_point(field_get:IncliHCF410V1.z)
  return z_;
}
inline void IncliHCF410V1::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:IncliHCF410V1.z)
}

// -------------------------------------------------------------------

// GRTU1000

// int32 gas_channel_1 = 1;
inline void GRTU1000::clear_gas_channel_1() {
  gas_channel_1_ = 0;
}
inline ::google::protobuf::int32 GRTU1000::gas_channel_1() const {
  // @@protoc_insertion_point(field_get:GRTU1000.gas_channel_1)
  return gas_channel_1_;
}
inline void GRTU1000::set_gas_channel_1(::google::protobuf::int32 value) {
  
  gas_channel_1_ = value;
  // @@protoc_insertion_point(field_set:GRTU1000.gas_channel_1)
}

// int32 gas_channel_2 = 2;
inline void GRTU1000::clear_gas_channel_2() {
  gas_channel_2_ = 0;
}
inline ::google::protobuf::int32 GRTU1000::gas_channel_2() const {
  // @@protoc_insertion_point(field_get:GRTU1000.gas_channel_2)
  return gas_channel_2_;
}
inline void GRTU1000::set_gas_channel_2(::google::protobuf::int32 value) {
  
  gas_channel_2_ = value;
  // @@protoc_insertion_point(field_set:GRTU1000.gas_channel_2)
}

// int32 gas_channel_3 = 3;
inline void GRTU1000::clear_gas_channel_3() {
  gas_channel_3_ = 0;
}
inline ::google::protobuf::int32 GRTU1000::gas_channel_3() const {
  // @@protoc_insertion_point(field_get:GRTU1000.gas_channel_3)
  return gas_channel_3_;
}
inline void GRTU1000::set_gas_channel_3(::google::protobuf::int32 value) {
  
  gas_channel_3_ = value;
  // @@protoc_insertion_point(field_set:GRTU1000.gas_channel_3)
}

// int32 gas_channel_4 = 4;
inline void GRTU1000::clear_gas_channel_4() {
  gas_channel_4_ = 0;
}
inline ::google::protobuf::int32 GRTU1000::gas_channel_4() const {
  // @@protoc_insertion_point(field_get:GRTU1000.gas_channel_4)
  return gas_channel_4_;
}
inline void GRTU1000::set_gas_channel_4(::google::protobuf::int32 value) {
  
  gas_channel_4_ = value;
  // @@protoc_insertion_point(field_set:GRTU1000.gas_channel_4)
}

// double temp = 5;
inline void GRTU1000::clear_temp() {
  temp_ = 0;
}
inline double GRTU1000::temp() const {
  // @@protoc_insertion_point(field_get:GRTU1000.temp)
  return temp_;
}
inline void GRTU1000::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:GRTU1000.temp)
}

// -------------------------------------------------------------------

// HOS3000CH4

// int32 GasStrength = 1;
inline void HOS3000CH4::clear_gasstrength() {
  gasstrength_ = 0;
}
inline ::google::protobuf::int32 HOS3000CH4::gasstrength() const {
  // @@protoc_insertion_point(field_get:HOS3000CH4.GasStrength)
  return gasstrength_;
}
inline void HOS3000CH4::set_gasstrength(::google::protobuf::int32 value) {
  
  gasstrength_ = value;
  // @@protoc_insertion_point(field_set:HOS3000CH4.GasStrength)
}

// -------------------------------------------------------------------

// DistanceData

// double Distance = 1;
inline void DistanceData::clear_distance() {
  distance_ = 0;
}
inline double DistanceData::distance() const {
  // @@protoc_insertion_point(field_get:DistanceData.Distance)
  return distance_;
}
inline void DistanceData::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:DistanceData.Distance)
}

// -------------------------------------------------------------------

// Uart485ForHFS716Sample

// double Hz_or_resratio = 1;
inline void Uart485ForHFS716Sample::clear_hz_or_resratio() {
  hz_or_resratio_ = 0;
}
inline double Uart485ForHFS716Sample::hz_or_resratio() const {
  // @@protoc_insertion_point(field_get:Uart485ForHFS716Sample.Hz_or_resratio)
  return hz_or_resratio_;
}
inline void Uart485ForHFS716Sample::set_hz_or_resratio(double value) {
  
  hz_or_resratio_ = value;
  // @@protoc_insertion_point(field_set:Uart485ForHFS716Sample.Hz_or_resratio)
}

// string channel = 2;
inline void Uart485ForHFS716Sample::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uart485ForHFS716Sample::channel() const {
  // @@protoc_insertion_point(field_get:Uart485ForHFS716Sample.channel)
  return channel_.GetNoArena();
}
inline void Uart485ForHFS716Sample::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Uart485ForHFS716Sample.channel)
}
#if LANG_CXX11
inline void Uart485ForHFS716Sample::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Uart485ForHFS716Sample.channel)
}
#endif
inline void Uart485ForHFS716Sample::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Uart485ForHFS716Sample.channel)
}
inline void Uart485ForHFS716Sample::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Uart485ForHFS716Sample.channel)
}
inline ::std::string* Uart485ForHFS716Sample::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Uart485ForHFS716Sample.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uart485ForHFS716Sample::release_channel() {
  // @@protoc_insertion_point(field_release:Uart485ForHFS716Sample.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uart485ForHFS716Sample::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Uart485ForHFS716Sample.channel)
}

// int32 channel_unixtime = 3;
inline void Uart485ForHFS716Sample::clear_channel_unixtime() {
  channel_unixtime_ = 0;
}
inline ::google::protobuf::int32 Uart485ForHFS716Sample::channel_unixtime() const {
  // @@protoc_insertion_point(field_get:Uart485ForHFS716Sample.channel_unixtime)
  return channel_unixtime_;
}
inline void Uart485ForHFS716Sample::set_channel_unixtime(::google::protobuf::int32 value) {
  
  channel_unixtime_ = value;
  // @@protoc_insertion_point(field_set:Uart485ForHFS716Sample.channel_unixtime)
}

// double temperature_or_ressum = 4;
inline void Uart485ForHFS716Sample::clear_temperature_or_ressum() {
  temperature_or_ressum_ = 0;
}
inline double Uart485ForHFS716Sample::temperature_or_ressum() const {
  // @@protoc_insertion_point(field_get:Uart485ForHFS716Sample.temperature_or_ressum)
  return temperature_or_ressum_;
}
inline void Uart485ForHFS716Sample::set_temperature_or_ressum(double value) {
  
  temperature_or_ressum_ = value;
  // @@protoc_insertion_point(field_set:Uart485ForHFS716Sample.temperature_or_ressum)
}

// -------------------------------------------------------------------

// VoltageDataV1

// double mV = 1;
inline void VoltageDataV1::clear_mv() {
  mv_ = 0;
}
inline double VoltageDataV1::mv() const {
  // @@protoc_insertion_point(field_get:VoltageDataV1.mV)
  return mv_;
}
inline void VoltageDataV1::set_mv(double value) {
  
  mv_ = value;
  // @@protoc_insertion_point(field_set:VoltageDataV1.mV)
}

// double temp = 2;
inline void VoltageDataV1::clear_temp() {
  temp_ = 0;
}
inline double VoltageDataV1::temp() const {
  // @@protoc_insertion_point(field_get:VoltageDataV1.temp)
  return temp_;
}
inline void VoltageDataV1::set_temp(double value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:VoltageDataV1.temp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SensorMessages_2fSensorMessages_2eproto
