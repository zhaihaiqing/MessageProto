// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorMessages/SensorMessages.proto

#include "SensorMessages/SensorMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class HighPrecisionIncliDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HighPrecisionIncliData> _instance;
} _HighPrecisionIncliData_default_instance_;
class TempHumiDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TempHumiData> _instance;
} _TempHumiData_default_instance_;
class VibraWireDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VibraWireData> _instance;
} _VibraWireData_default_instance_;
class AnemometerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnemometerData> _instance;
} _AnemometerData_default_instance_;
class InclinationDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InclinationData> _instance;
} _InclinationData_default_instance_;
class VoltageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoltageData> _instance;
} _VoltageData_default_instance_;
class CurrentDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentData> _instance;
} _CurrentData_default_instance_;
class ResistanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResistanceData> _instance;
} _ResistanceData_default_instance_;
class MillivoltDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MillivoltData> _instance;
} _MillivoltData_default_instance_;
class VibrationDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VibrationData> _instance;
} _VibrationData_default_instance_;
class CablePeaksHCF100DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CablePeaksHCF100> _instance;
} _CablePeaksHCF100_default_instance_;
class SettlementDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettlementData> _instance;
} _SettlementData_default_instance_;
class StressDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StressData> _instance;
} _StressData_default_instance_;
class IncliHCF410V1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IncliHCF410V1> _instance;
} _IncliHCF410V1_default_instance_;
class GRTU1000DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GRTU1000> _instance;
} _GRTU1000_default_instance_;
class HOS3000CH4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HOS3000CH4> _instance;
} _HOS3000CH4_default_instance_;
class DistanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistanceData> _instance;
} _DistanceData_default_instance_;
class Uart485ForHFS716SampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uart485ForHFS716Sample> _instance;
} _Uart485ForHFS716Sample_default_instance_;
class VoltageDataV1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoltageDataV1> _instance;
} _VoltageDataV1_default_instance_;
static void InitDefaultsHighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HighPrecisionIncliData_default_instance_;
    new (ptr) ::HighPrecisionIncliData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HighPrecisionIncliData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsTempHumiData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TempHumiData_default_instance_;
    new (ptr) ::TempHumiData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TempHumiData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TempHumiData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTempHumiData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsVibraWireData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VibraWireData_default_instance_;
    new (ptr) ::VibraWireData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VibraWireData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVibraWireData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsAnemometerData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnemometerData_default_instance_;
    new (ptr) ::AnemometerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnemometerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AnemometerData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnemometerData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsInclinationData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InclinationData_default_instance_;
    new (ptr) ::InclinationData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InclinationData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InclinationData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInclinationData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsVoltageData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoltageData_default_instance_;
    new (ptr) ::VoltageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoltageData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoltageData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsCurrentData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CurrentData_default_instance_;
    new (ptr) ::CurrentData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CurrentData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsResistanceData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResistanceData_default_instance_;
    new (ptr) ::ResistanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResistanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResistanceData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsMillivoltData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MillivoltData_default_instance_;
    new (ptr) ::MillivoltData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MillivoltData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMillivoltData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsVibrationData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VibrationData_default_instance_;
    new (ptr) ::VibrationData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VibrationData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVibrationData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsCablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CablePeaksHCF100_default_instance_;
    new (ptr) ::CablePeaksHCF100();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CablePeaksHCF100::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsSettlementData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SettlementData_default_instance_;
    new (ptr) ::SettlementData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SettlementData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SettlementData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSettlementData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsStressData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StressData_default_instance_;
    new (ptr) ::StressData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StressData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StressData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStressData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsIncliHCF410V1_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IncliHCF410V1_default_instance_;
    new (ptr) ::IncliHCF410V1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IncliHCF410V1::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IncliHCF410V1_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIncliHCF410V1_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsGRTU1000_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GRTU1000_default_instance_;
    new (ptr) ::GRTU1000();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRTU1000::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GRTU1000_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGRTU1000_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsHOS3000CH4_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HOS3000CH4_default_instance_;
    new (ptr) ::HOS3000CH4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HOS3000CH4::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HOS3000CH4_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHOS3000CH4_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsDistanceData_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DistanceData_default_instance_;
    new (ptr) ::DistanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DistanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistanceData_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistanceData_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsUart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Uart485ForHFS716Sample_default_instance_;
    new (ptr) ::Uart485ForHFS716Sample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Uart485ForHFS716Sample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto}, {}};

static void InitDefaultsVoltageDataV1_SensorMessages_2fSensorMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoltageDataV1_default_instance_;
    new (ptr) ::VoltageDataV1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoltageDataV1::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoltageDataV1_SensorMessages_2fSensorMessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoltageDataV1_SensorMessages_2fSensorMessages_2eproto}, {}};

void InitDefaults_SensorMessages_2fSensorMessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TempHumiData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnemometerData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InclinationData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettlementData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StressData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IncliHCF410V1_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GRTU1000_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HOS3000CH4_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistanceData_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoltageDataV1_SensorMessages_2fSensorMessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_SensorMessages_2fSensorMessages_2eproto[19];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_SensorMessages_2fSensorMessages_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_SensorMessages_2fSensorMessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_SensorMessages_2fSensorMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HighPrecisionIncliData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HighPrecisionIncliData, angle_),
  PROTOBUF_FIELD_OFFSET(::HighPrecisionIncliData, chip_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TempHumiData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TempHumiData, humi_),
  PROTOBUF_FIELD_OFFSET(::TempHumiData, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VibraWireData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VibraWireData, channel_),
  PROTOBUF_FIELD_OFFSET(::VibraWireData, db_),
  PROTOBUF_FIELD_OFFSET(::VibraWireData, freq_),
  PROTOBUF_FIELD_OFFSET(::VibraWireData, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnemometerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AnemometerData, dev_temp_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, humi_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, smooth_wind_direction_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, smooth_wind_speed_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, temp_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, wind_direction_),
  PROTOBUF_FIELD_OFFSET(::AnemometerData, wind_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InclinationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InclinationData, absolute_angle_),
  PROTOBUF_FIELD_OFFSET(::InclinationData, primary_projection_),
  PROTOBUF_FIELD_OFFSET(::InclinationData, secondary_projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VoltageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VoltageData, channel_),
  PROTOBUF_FIELD_OFFSET(::VoltageData, data_),
  PROTOBUF_FIELD_OFFSET(::VoltageData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::VoltageData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CurrentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CurrentData, channel_),
  PROTOBUF_FIELD_OFFSET(::CurrentData, data_),
  PROTOBUF_FIELD_OFFSET(::CurrentData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::CurrentData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResistanceData, channel_),
  PROTOBUF_FIELD_OFFSET(::ResistanceData, data_),
  PROTOBUF_FIELD_OFFSET(::ResistanceData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::ResistanceData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MillivoltData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MillivoltData, channel_),
  PROTOBUF_FIELD_OFFSET(::MillivoltData, data_),
  PROTOBUF_FIELD_OFFSET(::MillivoltData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::MillivoltData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VibrationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VibrationData, channel_),
  PROTOBUF_FIELD_OFFSET(::VibrationData, data_),
  PROTOBUF_FIELD_OFFSET(::VibrationData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::VibrationData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CablePeaksHCF100, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CablePeaksHCF100, base_freq_),
  PROTOBUF_FIELD_OFFSET(::CablePeaksHCF100, peaks_),
  PROTOBUF_FIELD_OFFSET(::CablePeaksHCF100, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SettlementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SettlementData, adc_value_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, err_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, raw_press_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, raw_value_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, relative_value_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, temp_),
  PROTOBUF_FIELD_OFFSET(::SettlementData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StressData, channel_),
  PROTOBUF_FIELD_OFFSET(::StressData, data_),
  PROTOBUF_FIELD_OFFSET(::StressData, microsecond_),
  PROTOBUF_FIELD_OFFSET(::StressData, sample_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IncliHCF410V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IncliHCF410V1, x_),
  PROTOBUF_FIELD_OFFSET(::IncliHCF410V1, y_),
  PROTOBUF_FIELD_OFFSET(::IncliHCF410V1, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRTU1000, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRTU1000, gas_channel_1_),
  PROTOBUF_FIELD_OFFSET(::GRTU1000, gas_channel_2_),
  PROTOBUF_FIELD_OFFSET(::GRTU1000, gas_channel_3_),
  PROTOBUF_FIELD_OFFSET(::GRTU1000, gas_channel_4_),
  PROTOBUF_FIELD_OFFSET(::GRTU1000, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HOS3000CH4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HOS3000CH4, gasstrength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DistanceData, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uart485ForHFS716Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Uart485ForHFS716Sample, hz_or_resratio_),
  PROTOBUF_FIELD_OFFSET(::Uart485ForHFS716Sample, channel_),
  PROTOBUF_FIELD_OFFSET(::Uart485ForHFS716Sample, channel_unixtime_),
  PROTOBUF_FIELD_OFFSET(::Uart485ForHFS716Sample, temperature_or_ressum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VoltageDataV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VoltageDataV1, mv_),
  PROTOBUF_FIELD_OFFSET(::VoltageDataV1, temp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HighPrecisionIncliData)},
  { 7, -1, sizeof(::TempHumiData)},
  { 14, -1, sizeof(::VibraWireData)},
  { 23, -1, sizeof(::AnemometerData)},
  { 35, -1, sizeof(::InclinationData)},
  { 43, -1, sizeof(::VoltageData)},
  { 52, -1, sizeof(::CurrentData)},
  { 61, -1, sizeof(::ResistanceData)},
  { 70, -1, sizeof(::MillivoltData)},
  { 79, -1, sizeof(::VibrationData)},
  { 88, -1, sizeof(::CablePeaksHCF100)},
  { 96, -1, sizeof(::SettlementData)},
  { 108, -1, sizeof(::StressData)},
  { 117, -1, sizeof(::IncliHCF410V1)},
  { 125, -1, sizeof(::GRTU1000)},
  { 135, -1, sizeof(::HOS3000CH4)},
  { 141, -1, sizeof(::DistanceData)},
  { 147, -1, sizeof(::Uart485ForHFS716Sample)},
  { 156, -1, sizeof(::VoltageDataV1)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HighPrecisionIncliData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TempHumiData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VibraWireData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AnemometerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InclinationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VoltageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CurrentData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ResistanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MillivoltData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VibrationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CablePeaksHCF100_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SettlementData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StressData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_IncliHCF410V1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GRTU1000_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HOS3000CH4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DistanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Uart485ForHFS716Sample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_VoltageDataV1_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto = {
  {}, AddDescriptors_SensorMessages_2fSensorMessages_2eproto, "SensorMessages/SensorMessages.proto", schemas,
  file_default_instances, TableStruct_SensorMessages_2fSensorMessages_2eproto::offsets,
  file_level_metadata_SensorMessages_2fSensorMessages_2eproto, 19, file_level_enum_descriptors_SensorMessages_2fSensorMessages_2eproto, file_level_service_descriptors_SensorMessages_2fSensorMessages_2eproto,
};

const char descriptor_table_protodef_SensorMessages_2fSensorMessages_2eproto[] =
  "\n#SensorMessages/SensorMessages.proto\":\n"
  "\026HighPrecisionIncliData\022\r\n\005angle\030\001 \001(\001\022\021"
  "\n\tchip_temp\030\002 \001(\001\"*\n\014TempHumiData\022\014\n\004hum"
  "i\030\001 \001(\001\022\014\n\004temp\030\002 \001(\001\"H\n\rVibraWireData\022\017"
  "\n\007channel\030\001 \001(\t\022\n\n\002db\030\002 \001(\005\022\014\n\004freq\030\003 \001("
  "\001\022\014\n\004temp\030\004 \001(\001\"\244\001\n\016AnemometerData\022\020\n\010de"
  "v_temp\030\001 \001(\001\022\014\n\004humi\030\002 \001(\001\022\035\n\025smooth_win"
  "d_direction\030\003 \001(\001\022\031\n\021smooth_wind_speed\030\004"
  " \001(\001\022\014\n\004temp\030\005 \001(\001\022\026\n\016wind_direction\030\006 \001"
  "(\001\022\022\n\nwind_speed\030\007 \001(\001\"c\n\017InclinationDat"
  "a\022\026\n\016absolute_angle\030\001 \001(\001\022\032\n\022primary_pro"
  "jection\030\002 \001(\001\022\034\n\024secondary_projection\030\003 "
  "\001(\001\"Z\n\013VoltageData\022\017\n\007channel\030\001 \001(\t\022\014\n\004d"
  "ata\030\002 \001(\001\022\023\n\013microsecond\030\003 \001(\005\022\027\n\017sample"
  "_interval\030\004 \001(\001\"Z\n\013CurrentData\022\017\n\007channe"
  "l\030\001 \001(\t\022\014\n\004data\030\002 \001(\001\022\023\n\013microsecond\030\003 \001"
  "(\005\022\027\n\017sample_interval\030\004 \001(\001\"]\n\016Resistanc"
  "eData\022\017\n\007channel\030\001 \001(\t\022\014\n\004data\030\002 \001(\001\022\023\n\013"
  "microsecond\030\003 \001(\005\022\027\n\017sample_interval\030\004 \001"
  "(\001\"\\\n\rMillivoltData\022\017\n\007channel\030\001 \001(\t\022\014\n\004"
  "data\030\002 \001(\001\022\023\n\013microsecond\030\003 \001(\005\022\027\n\017sampl"
  "e_interval\030\004 \001(\001\"\\\n\rVibrationData\022\017\n\007cha"
  "nnel\030\001 \001(\t\022\014\n\004data\030\002 \001(\001\022\023\n\013microsecond\030"
  "\003 \001(\005\022\027\n\017sample_interval\030\004 \001(\001\"D\n\020CableP"
  "eaksHCF100\022\021\n\tbase_freq\030\001 \001(\001\022\r\n\005peaks\030\002"
  " \003(\005\022\016\n\006values\030\003 \003(\005\"\213\001\n\016SettlementData\022"
  "\021\n\tadc_value\030\001 \001(\001\022\013\n\003err\030\002 \001(\005\022\021\n\traw_p"
  "ress\030\003 \001(\001\022\021\n\traw_value\030\004 \001(\001\022\026\n\016relativ"
  "e_value\030\005 \001(\001\022\014\n\004temp\030\006 \001(\001\022\r\n\005value\030\007 \001"
  "(\001\"Y\n\nStressData\022\017\n\007channel\030\001 \001(\t\022\014\n\004dat"
  "a\030\002 \001(\001\022\023\n\013microsecond\030\003 \001(\005\022\027\n\017sample_i"
  "nterval\030\004 \001(\001\"0\n\rIncliHCF410V1\022\t\n\001x\030\001 \001("
  "\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"t\n\010GRTU1000\022\025\n\rg"
  "as_channel_1\030\001 \001(\005\022\025\n\rgas_channel_2\030\002 \001("
  "\005\022\025\n\rgas_channel_3\030\003 \001(\005\022\025\n\rgas_channel_"
  "4\030\004 \001(\005\022\014\n\004temp\030\005 \001(\001\"!\n\nHOS3000CH4\022\023\n\013G"
  "asStrength\030\001 \001(\005\" \n\014DistanceData\022\020\n\010Dist"
  "ance\030\001 \001(\001\"z\n\026Uart485ForHFS716Sample\022\026\n\016"
  "Hz_or_resratio\030\001 \001(\001\022\017\n\007channel\030\002 \001(\t\022\030\n"
  "\020channel_unixtime\030\003 \001(\005\022\035\n\025temperature_o"
  "r_ressum\030\004 \001(\001\")\n\rVoltageDataV1\022\n\n\002mV\030\001 "
  "\001(\001\022\014\n\004temp\030\002 \001(\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_SensorMessages_2fSensorMessages_2eproto = {
  false, InitDefaults_SensorMessages_2fSensorMessages_2eproto, 
  descriptor_table_protodef_SensorMessages_2fSensorMessages_2eproto,
  "SensorMessages/SensorMessages.proto", &assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto, 1665,
};

void AddDescriptors_SensorMessages_2fSensorMessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_SensorMessages_2fSensorMessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorMessages_2fSensorMessages_2eproto = []() { AddDescriptors_SensorMessages_2fSensorMessages_2eproto(); return true; }();

// ===================================================================

void HighPrecisionIncliData::InitAsDefaultInstance() {
}
class HighPrecisionIncliData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HighPrecisionIncliData::kAngleFieldNumber;
const int HighPrecisionIncliData::kChipTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HighPrecisionIncliData::HighPrecisionIncliData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HighPrecisionIncliData)
}
HighPrecisionIncliData::HighPrecisionIncliData(const HighPrecisionIncliData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&chip_temp_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(chip_temp_));
  // @@protoc_insertion_point(copy_constructor:HighPrecisionIncliData)
}

void HighPrecisionIncliData::SharedCtor() {
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_temp_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(chip_temp_));
}

HighPrecisionIncliData::~HighPrecisionIncliData() {
  // @@protoc_insertion_point(destructor:HighPrecisionIncliData)
  SharedDtor();
}

void HighPrecisionIncliData::SharedDtor() {
}

void HighPrecisionIncliData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HighPrecisionIncliData& HighPrecisionIncliData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void HighPrecisionIncliData::Clear() {
// @@protoc_insertion_point(message_clear_start:HighPrecisionIncliData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_temp_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(chip_temp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HighPrecisionIncliData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HighPrecisionIncliData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_angle(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double chip_temp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_chip_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HighPrecisionIncliData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HighPrecisionIncliData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double chip_temp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chip_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HighPrecisionIncliData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HighPrecisionIncliData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HighPrecisionIncliData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HighPrecisionIncliData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  // double chip_temp = 2;
  if (this->chip_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->chip_temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HighPrecisionIncliData)
}

::google::protobuf::uint8* HighPrecisionIncliData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HighPrecisionIncliData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  // double chip_temp = 2;
  if (this->chip_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->chip_temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HighPrecisionIncliData)
  return target;
}

size_t HighPrecisionIncliData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HighPrecisionIncliData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double angle = 1;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // double chip_temp = 2;
  if (this->chip_temp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HighPrecisionIncliData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HighPrecisionIncliData)
  GOOGLE_DCHECK_NE(&from, this);
  const HighPrecisionIncliData* source =
      ::google::protobuf::DynamicCastToGenerated<HighPrecisionIncliData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HighPrecisionIncliData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HighPrecisionIncliData)
    MergeFrom(*source);
  }
}

void HighPrecisionIncliData::MergeFrom(const HighPrecisionIncliData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HighPrecisionIncliData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.chip_temp() != 0) {
    set_chip_temp(from.chip_temp());
  }
}

void HighPrecisionIncliData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HighPrecisionIncliData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighPrecisionIncliData::CopyFrom(const HighPrecisionIncliData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HighPrecisionIncliData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighPrecisionIncliData::IsInitialized() const {
  return true;
}

void HighPrecisionIncliData::Swap(HighPrecisionIncliData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HighPrecisionIncliData::InternalSwap(HighPrecisionIncliData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
  swap(chip_temp_, other->chip_temp_);
}

::google::protobuf::Metadata HighPrecisionIncliData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TempHumiData::InitAsDefaultInstance() {
}
class TempHumiData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempHumiData::kHumiFieldNumber;
const int TempHumiData::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempHumiData::TempHumiData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TempHumiData)
}
TempHumiData::TempHumiData(const TempHumiData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&humi_, &from.humi_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&humi_)) + sizeof(temp_));
  // @@protoc_insertion_point(copy_constructor:TempHumiData)
}

void TempHumiData::SharedCtor() {
  ::memset(&humi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&humi_)) + sizeof(temp_));
}

TempHumiData::~TempHumiData() {
  // @@protoc_insertion_point(destructor:TempHumiData)
  SharedDtor();
}

void TempHumiData::SharedDtor() {
}

void TempHumiData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TempHumiData& TempHumiData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TempHumiData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void TempHumiData::Clear() {
// @@protoc_insertion_point(message_clear_start:TempHumiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&humi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&humi_)) + sizeof(temp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TempHumiData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TempHumiData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double humi = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_humi(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double temp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TempHumiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TempHumiData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double humi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &humi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TempHumiData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TempHumiData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TempHumiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TempHumiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double humi = 1;
  if (this->humi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->humi(), output);
  }

  // double temp = 2;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TempHumiData)
}

::google::protobuf::uint8* TempHumiData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TempHumiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double humi = 1;
  if (this->humi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->humi(), target);
  }

  // double temp = 2;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempHumiData)
  return target;
}

size_t TempHumiData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempHumiData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double humi = 1;
  if (this->humi() != 0) {
    total_size += 1 + 8;
  }

  // double temp = 2;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TempHumiData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TempHumiData)
  GOOGLE_DCHECK_NE(&from, this);
  const TempHumiData* source =
      ::google::protobuf::DynamicCastToGenerated<TempHumiData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TempHumiData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TempHumiData)
    MergeFrom(*source);
  }
}

void TempHumiData::MergeFrom(const TempHumiData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TempHumiData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.humi() != 0) {
    set_humi(from.humi());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
}

void TempHumiData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TempHumiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempHumiData::CopyFrom(const TempHumiData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempHumiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempHumiData::IsInitialized() const {
  return true;
}

void TempHumiData::Swap(TempHumiData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempHumiData::InternalSwap(TempHumiData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(humi_, other->humi_);
  swap(temp_, other->temp_);
}

::google::protobuf::Metadata TempHumiData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VibraWireData::InitAsDefaultInstance() {
}
class VibraWireData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VibraWireData::kChannelFieldNumber;
const int VibraWireData::kDbFieldNumber;
const int VibraWireData::kFreqFieldNumber;
const int VibraWireData::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VibraWireData::VibraWireData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VibraWireData)
}
VibraWireData::VibraWireData(const VibraWireData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&freq_, &from.freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&db_) -
    reinterpret_cast<char*>(&freq_)) + sizeof(db_));
  // @@protoc_insertion_point(copy_constructor:VibraWireData)
}

void VibraWireData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(db_));
}

VibraWireData::~VibraWireData() {
  // @@protoc_insertion_point(destructor:VibraWireData)
  SharedDtor();
}

void VibraWireData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VibraWireData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibraWireData& VibraWireData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void VibraWireData::Clear() {
// @@protoc_insertion_point(message_clear_start:VibraWireData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(db_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibraWireData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VibraWireData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("VibraWireData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 db = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_db(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double freq = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_freq(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double temp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibraWireData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VibraWireData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VibraWireData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double freq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VibraWireData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VibraWireData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibraWireData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VibraWireData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VibraWireData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // int32 db = 2;
  if (this->db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->db(), output);
  }

  // double freq = 3;
  if (this->freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freq(), output);
  }

  // double temp = 4;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VibraWireData)
}

::google::protobuf::uint8* VibraWireData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VibraWireData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VibraWireData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // int32 db = 2;
  if (this->db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->db(), target);
  }

  // double freq = 3;
  if (this->freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freq(), target);
  }

  // double temp = 4;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VibraWireData)
  return target;
}

size_t VibraWireData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VibraWireData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double freq = 3;
  if (this->freq() != 0) {
    total_size += 1 + 8;
  }

  // double temp = 4;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  // int32 db = 2;
  if (this->db() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->db());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibraWireData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VibraWireData)
  GOOGLE_DCHECK_NE(&from, this);
  const VibraWireData* source =
      ::google::protobuf::DynamicCastToGenerated<VibraWireData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VibraWireData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VibraWireData)
    MergeFrom(*source);
  }
}

void VibraWireData::MergeFrom(const VibraWireData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VibraWireData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.db() != 0) {
    set_db(from.db());
  }
}

void VibraWireData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VibraWireData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibraWireData::CopyFrom(const VibraWireData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VibraWireData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibraWireData::IsInitialized() const {
  return true;
}

void VibraWireData::Swap(VibraWireData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VibraWireData::InternalSwap(VibraWireData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(freq_, other->freq_);
  swap(temp_, other->temp_);
  swap(db_, other->db_);
}

::google::protobuf::Metadata VibraWireData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnemometerData::InitAsDefaultInstance() {
}
class AnemometerData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnemometerData::kDevTempFieldNumber;
const int AnemometerData::kHumiFieldNumber;
const int AnemometerData::kSmoothWindDirectionFieldNumber;
const int AnemometerData::kSmoothWindSpeedFieldNumber;
const int AnemometerData::kTempFieldNumber;
const int AnemometerData::kWindDirectionFieldNumber;
const int AnemometerData::kWindSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnemometerData::AnemometerData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnemometerData)
}
AnemometerData::AnemometerData(const AnemometerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dev_temp_, &from.dev_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&wind_speed_) -
    reinterpret_cast<char*>(&dev_temp_)) + sizeof(wind_speed_));
  // @@protoc_insertion_point(copy_constructor:AnemometerData)
}

void AnemometerData::SharedCtor() {
  ::memset(&dev_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wind_speed_) -
      reinterpret_cast<char*>(&dev_temp_)) + sizeof(wind_speed_));
}

AnemometerData::~AnemometerData() {
  // @@protoc_insertion_point(destructor:AnemometerData)
  SharedDtor();
}

void AnemometerData::SharedDtor() {
}

void AnemometerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnemometerData& AnemometerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnemometerData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void AnemometerData::Clear() {
// @@protoc_insertion_point(message_clear_start:AnemometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dev_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wind_speed_) -
      reinterpret_cast<char*>(&dev_temp_)) + sizeof(wind_speed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnemometerData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnemometerData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double dev_temp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_dev_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double humi = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_humi(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double smooth_wind_direction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_smooth_wind_direction(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double smooth_wind_speed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_smooth_wind_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double temp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double wind_direction = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_wind_direction(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double wind_speed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_wind_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnemometerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AnemometerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dev_temp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dev_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double humi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &humi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double smooth_wind_direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &smooth_wind_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double smooth_wind_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &smooth_wind_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wind_direction = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wind_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnemometerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnemometerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnemometerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnemometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dev_temp = 1;
  if (this->dev_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dev_temp(), output);
  }

  // double humi = 2;
  if (this->humi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->humi(), output);
  }

  // double smooth_wind_direction = 3;
  if (this->smooth_wind_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->smooth_wind_direction(), output);
  }

  // double smooth_wind_speed = 4;
  if (this->smooth_wind_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->smooth_wind_speed(), output);
  }

  // double temp = 5;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->temp(), output);
  }

  // double wind_direction = 6;
  if (this->wind_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wind_direction(), output);
  }

  // double wind_speed = 7;
  if (this->wind_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wind_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AnemometerData)
}

::google::protobuf::uint8* AnemometerData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnemometerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dev_temp = 1;
  if (this->dev_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dev_temp(), target);
  }

  // double humi = 2;
  if (this->humi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->humi(), target);
  }

  // double smooth_wind_direction = 3;
  if (this->smooth_wind_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->smooth_wind_direction(), target);
  }

  // double smooth_wind_speed = 4;
  if (this->smooth_wind_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->smooth_wind_speed(), target);
  }

  // double temp = 5;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->temp(), target);
  }

  // double wind_direction = 6;
  if (this->wind_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wind_direction(), target);
  }

  // double wind_speed = 7;
  if (this->wind_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wind_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnemometerData)
  return target;
}

size_t AnemometerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnemometerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dev_temp = 1;
  if (this->dev_temp() != 0) {
    total_size += 1 + 8;
  }

  // double humi = 2;
  if (this->humi() != 0) {
    total_size += 1 + 8;
  }

  // double smooth_wind_direction = 3;
  if (this->smooth_wind_direction() != 0) {
    total_size += 1 + 8;
  }

  // double smooth_wind_speed = 4;
  if (this->smooth_wind_speed() != 0) {
    total_size += 1 + 8;
  }

  // double temp = 5;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  // double wind_direction = 6;
  if (this->wind_direction() != 0) {
    total_size += 1 + 8;
  }

  // double wind_speed = 7;
  if (this->wind_speed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnemometerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnemometerData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnemometerData* source =
      ::google::protobuf::DynamicCastToGenerated<AnemometerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnemometerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnemometerData)
    MergeFrom(*source);
  }
}

void AnemometerData::MergeFrom(const AnemometerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnemometerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_temp() != 0) {
    set_dev_temp(from.dev_temp());
  }
  if (from.humi() != 0) {
    set_humi(from.humi());
  }
  if (from.smooth_wind_direction() != 0) {
    set_smooth_wind_direction(from.smooth_wind_direction());
  }
  if (from.smooth_wind_speed() != 0) {
    set_smooth_wind_speed(from.smooth_wind_speed());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.wind_direction() != 0) {
    set_wind_direction(from.wind_direction());
  }
  if (from.wind_speed() != 0) {
    set_wind_speed(from.wind_speed());
  }
}

void AnemometerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnemometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnemometerData::CopyFrom(const AnemometerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnemometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnemometerData::IsInitialized() const {
  return true;
}

void AnemometerData::Swap(AnemometerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnemometerData::InternalSwap(AnemometerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dev_temp_, other->dev_temp_);
  swap(humi_, other->humi_);
  swap(smooth_wind_direction_, other->smooth_wind_direction_);
  swap(smooth_wind_speed_, other->smooth_wind_speed_);
  swap(temp_, other->temp_);
  swap(wind_direction_, other->wind_direction_);
  swap(wind_speed_, other->wind_speed_);
}

::google::protobuf::Metadata AnemometerData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InclinationData::InitAsDefaultInstance() {
}
class InclinationData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InclinationData::kAbsoluteAngleFieldNumber;
const int InclinationData::kPrimaryProjectionFieldNumber;
const int InclinationData::kSecondaryProjectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InclinationData::InclinationData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InclinationData)
}
InclinationData::InclinationData(const InclinationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&absolute_angle_, &from.absolute_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_projection_) -
    reinterpret_cast<char*>(&absolute_angle_)) + sizeof(secondary_projection_));
  // @@protoc_insertion_point(copy_constructor:InclinationData)
}

void InclinationData::SharedCtor() {
  ::memset(&absolute_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_projection_) -
      reinterpret_cast<char*>(&absolute_angle_)) + sizeof(secondary_projection_));
}

InclinationData::~InclinationData() {
  // @@protoc_insertion_point(destructor:InclinationData)
  SharedDtor();
}

void InclinationData::SharedDtor() {
}

void InclinationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InclinationData& InclinationData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InclinationData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void InclinationData::Clear() {
// @@protoc_insertion_point(message_clear_start:InclinationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&absolute_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_projection_) -
      reinterpret_cast<char*>(&absolute_angle_)) + sizeof(secondary_projection_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InclinationData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InclinationData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double absolute_angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_absolute_angle(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double primary_projection = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_primary_projection(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double secondary_projection = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_secondary_projection(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InclinationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InclinationData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double absolute_angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &absolute_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double primary_projection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primary_projection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double secondary_projection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondary_projection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InclinationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InclinationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InclinationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InclinationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double absolute_angle = 1;
  if (this->absolute_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->absolute_angle(), output);
  }

  // double primary_projection = 2;
  if (this->primary_projection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->primary_projection(), output);
  }

  // double secondary_projection = 3;
  if (this->secondary_projection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->secondary_projection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InclinationData)
}

::google::protobuf::uint8* InclinationData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InclinationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double absolute_angle = 1;
  if (this->absolute_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->absolute_angle(), target);
  }

  // double primary_projection = 2;
  if (this->primary_projection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->primary_projection(), target);
  }

  // double secondary_projection = 3;
  if (this->secondary_projection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->secondary_projection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InclinationData)
  return target;
}

size_t InclinationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InclinationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double absolute_angle = 1;
  if (this->absolute_angle() != 0) {
    total_size += 1 + 8;
  }

  // double primary_projection = 2;
  if (this->primary_projection() != 0) {
    total_size += 1 + 8;
  }

  // double secondary_projection = 3;
  if (this->secondary_projection() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InclinationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InclinationData)
  GOOGLE_DCHECK_NE(&from, this);
  const InclinationData* source =
      ::google::protobuf::DynamicCastToGenerated<InclinationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InclinationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InclinationData)
    MergeFrom(*source);
  }
}

void InclinationData::MergeFrom(const InclinationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InclinationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.absolute_angle() != 0) {
    set_absolute_angle(from.absolute_angle());
  }
  if (from.primary_projection() != 0) {
    set_primary_projection(from.primary_projection());
  }
  if (from.secondary_projection() != 0) {
    set_secondary_projection(from.secondary_projection());
  }
}

void InclinationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InclinationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InclinationData::CopyFrom(const InclinationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InclinationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InclinationData::IsInitialized() const {
  return true;
}

void InclinationData::Swap(InclinationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InclinationData::InternalSwap(InclinationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(absolute_angle_, other->absolute_angle_);
  swap(primary_projection_, other->primary_projection_);
  swap(secondary_projection_, other->secondary_projection_);
}

::google::protobuf::Metadata InclinationData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoltageData::InitAsDefaultInstance() {
}
class VoltageData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoltageData::kChannelFieldNumber;
const int VoltageData::kDataFieldNumber;
const int VoltageData::kMicrosecondFieldNumber;
const int VoltageData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoltageData::VoltageData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoltageData)
}
VoltageData::VoltageData(const VoltageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:VoltageData)
}

void VoltageData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

VoltageData::~VoltageData() {
  // @@protoc_insertion_point(destructor:VoltageData)
  SharedDtor();
}

void VoltageData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoltageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoltageData& VoltageData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void VoltageData::Clear() {
// @@protoc_insertion_point(message_clear_start:VoltageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoltageData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoltageData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("VoltageData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoltageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoltageData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VoltageData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoltageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoltageData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoltageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoltageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VoltageData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoltageData)
}

::google::protobuf::uint8* VoltageData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoltageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VoltageData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoltageData)
  return target;
}

size_t VoltageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoltageData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VoltageData)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageData* source =
      ::google::protobuf::DynamicCastToGenerated<VoltageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VoltageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VoltageData)
    MergeFrom(*source);
  }
}

void VoltageData::MergeFrom(const VoltageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoltageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void VoltageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VoltageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageData::CopyFrom(const VoltageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoltageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageData::IsInitialized() const {
  return true;
}

void VoltageData::Swap(VoltageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoltageData::InternalSwap(VoltageData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata VoltageData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CurrentData::InitAsDefaultInstance() {
}
class CurrentData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentData::kChannelFieldNumber;
const int CurrentData::kDataFieldNumber;
const int CurrentData::kMicrosecondFieldNumber;
const int CurrentData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentData::CurrentData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CurrentData)
}
CurrentData::CurrentData(const CurrentData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:CurrentData)
}

void CurrentData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

CurrentData::~CurrentData() {
  // @@protoc_insertion_point(destructor:CurrentData)
  SharedDtor();
}

void CurrentData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentData& CurrentData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void CurrentData::Clear() {
// @@protoc_insertion_point(message_clear_start:CurrentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurrentData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CurrentData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("CurrentData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurrentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CurrentData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CurrentData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CurrentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CurrentData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurrentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CurrentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CurrentData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CurrentData)
}

::google::protobuf::uint8* CurrentData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CurrentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CurrentData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurrentData)
  return target;
}

size_t CurrentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CurrentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentData* source =
      ::google::protobuf::DynamicCastToGenerated<CurrentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CurrentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CurrentData)
    MergeFrom(*source);
  }
}

void CurrentData::MergeFrom(const CurrentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void CurrentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentData::CopyFrom(const CurrentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentData::IsInitialized() const {
  return true;
}

void CurrentData::Swap(CurrentData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentData::InternalSwap(CurrentData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata CurrentData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResistanceData::InitAsDefaultInstance() {
}
class ResistanceData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResistanceData::kChannelFieldNumber;
const int ResistanceData::kDataFieldNumber;
const int ResistanceData::kMicrosecondFieldNumber;
const int ResistanceData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResistanceData::ResistanceData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResistanceData)
}
ResistanceData::ResistanceData(const ResistanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:ResistanceData)
}

void ResistanceData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

ResistanceData::~ResistanceData() {
  // @@protoc_insertion_point(destructor:ResistanceData)
  SharedDtor();
}

void ResistanceData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResistanceData& ResistanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void ResistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResistanceData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResistanceData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ResistanceData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResistanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResistanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ResistanceData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResistanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResistanceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResistanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResistanceData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResistanceData)
}

::google::protobuf::uint8* ResistanceData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResistanceData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResistanceData)
  return target;
}

size_t ResistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResistanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResistanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResistanceData* source =
      ::google::protobuf::DynamicCastToGenerated<ResistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResistanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResistanceData)
    MergeFrom(*source);
  }
}

void ResistanceData::MergeFrom(const ResistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void ResistanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResistanceData::CopyFrom(const ResistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResistanceData::IsInitialized() const {
  return true;
}

void ResistanceData::Swap(ResistanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResistanceData::InternalSwap(ResistanceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata ResistanceData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MillivoltData::InitAsDefaultInstance() {
}
class MillivoltData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MillivoltData::kChannelFieldNumber;
const int MillivoltData::kDataFieldNumber;
const int MillivoltData::kMicrosecondFieldNumber;
const int MillivoltData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MillivoltData::MillivoltData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MillivoltData)
}
MillivoltData::MillivoltData(const MillivoltData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:MillivoltData)
}

void MillivoltData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

MillivoltData::~MillivoltData() {
  // @@protoc_insertion_point(destructor:MillivoltData)
  SharedDtor();
}

void MillivoltData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MillivoltData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MillivoltData& MillivoltData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void MillivoltData::Clear() {
// @@protoc_insertion_point(message_clear_start:MillivoltData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MillivoltData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MillivoltData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("MillivoltData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MillivoltData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MillivoltData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MillivoltData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MillivoltData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MillivoltData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MillivoltData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MillivoltData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MillivoltData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MillivoltData)
}

::google::protobuf::uint8* MillivoltData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MillivoltData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MillivoltData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MillivoltData)
  return target;
}

size_t MillivoltData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MillivoltData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MillivoltData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MillivoltData)
  GOOGLE_DCHECK_NE(&from, this);
  const MillivoltData* source =
      ::google::protobuf::DynamicCastToGenerated<MillivoltData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MillivoltData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MillivoltData)
    MergeFrom(*source);
  }
}

void MillivoltData::MergeFrom(const MillivoltData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MillivoltData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void MillivoltData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MillivoltData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillivoltData::CopyFrom(const MillivoltData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MillivoltData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillivoltData::IsInitialized() const {
  return true;
}

void MillivoltData::Swap(MillivoltData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MillivoltData::InternalSwap(MillivoltData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata MillivoltData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VibrationData::InitAsDefaultInstance() {
}
class VibrationData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VibrationData::kChannelFieldNumber;
const int VibrationData::kDataFieldNumber;
const int VibrationData::kMicrosecondFieldNumber;
const int VibrationData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VibrationData::VibrationData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VibrationData)
}
VibrationData::VibrationData(const VibrationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:VibrationData)
}

void VibrationData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

VibrationData::~VibrationData() {
  // @@protoc_insertion_point(destructor:VibrationData)
  SharedDtor();
}

void VibrationData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VibrationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibrationData& VibrationData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void VibrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:VibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibrationData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VibrationData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("VibrationData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VibrationData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VibrationData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VibrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VibrationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VibrationData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VibrationData)
}

::google::protobuf::uint8* VibrationData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VibrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VibrationData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VibrationData)
  return target;
}

size_t VibrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VibrationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibrationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  const VibrationData* source =
      ::google::protobuf::DynamicCastToGenerated<VibrationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VibrationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VibrationData)
    MergeFrom(*source);
  }
}

void VibrationData::MergeFrom(const VibrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void VibrationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibrationData::CopyFrom(const VibrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationData::IsInitialized() const {
  return true;
}

void VibrationData::Swap(VibrationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VibrationData::InternalSwap(VibrationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata VibrationData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CablePeaksHCF100::InitAsDefaultInstance() {
}
class CablePeaksHCF100::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CablePeaksHCF100::kBaseFreqFieldNumber;
const int CablePeaksHCF100::kPeaksFieldNumber;
const int CablePeaksHCF100::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CablePeaksHCF100::CablePeaksHCF100()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CablePeaksHCF100)
}
CablePeaksHCF100::CablePeaksHCF100(const CablePeaksHCF100& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      peaks_(from.peaks_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_freq_ = from.base_freq_;
  // @@protoc_insertion_point(copy_constructor:CablePeaksHCF100)
}

void CablePeaksHCF100::SharedCtor() {
  base_freq_ = 0;
}

CablePeaksHCF100::~CablePeaksHCF100() {
  // @@protoc_insertion_point(destructor:CablePeaksHCF100)
  SharedDtor();
}

void CablePeaksHCF100::SharedDtor() {
}

void CablePeaksHCF100::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CablePeaksHCF100& CablePeaksHCF100::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void CablePeaksHCF100::Clear() {
// @@protoc_insertion_point(message_clear_start:CablePeaksHCF100)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peaks_.Clear();
  values_.Clear();
  base_freq_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CablePeaksHCF100::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CablePeaksHCF100*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double base_freq = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_base_freq(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated int32 peaks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_peaks();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_peaks(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated int32 values = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_values();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_values(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CablePeaksHCF100::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CablePeaksHCF100)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double base_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 peaks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_peaks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_peaks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CablePeaksHCF100)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CablePeaksHCF100)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CablePeaksHCF100::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CablePeaksHCF100)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double base_freq = 1;
  if (this->base_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base_freq(), output);
  }

  // repeated int32 peaks = 2;
  if (this->peaks_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_peaks_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->peaks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->peaks(i), output);
  }

  // repeated int32 values = 3;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CablePeaksHCF100)
}

::google::protobuf::uint8* CablePeaksHCF100::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CablePeaksHCF100)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double base_freq = 1;
  if (this->base_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base_freq(), target);
  }

  // repeated int32 peaks = 2;
  if (this->peaks_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _peaks_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->peaks_, target);
  }

  // repeated int32 values = 3;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _values_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CablePeaksHCF100)
  return target;
}

size_t CablePeaksHCF100::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CablePeaksHCF100)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 peaks = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->peaks_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _peaks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 values = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double base_freq = 1;
  if (this->base_freq() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CablePeaksHCF100::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CablePeaksHCF100)
  GOOGLE_DCHECK_NE(&from, this);
  const CablePeaksHCF100* source =
      ::google::protobuf::DynamicCastToGenerated<CablePeaksHCF100>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CablePeaksHCF100)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CablePeaksHCF100)
    MergeFrom(*source);
  }
}

void CablePeaksHCF100::MergeFrom(const CablePeaksHCF100& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CablePeaksHCF100)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peaks_.MergeFrom(from.peaks_);
  values_.MergeFrom(from.values_);
  if (from.base_freq() != 0) {
    set_base_freq(from.base_freq());
  }
}

void CablePeaksHCF100::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CablePeaksHCF100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CablePeaksHCF100::CopyFrom(const CablePeaksHCF100& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CablePeaksHCF100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CablePeaksHCF100::IsInitialized() const {
  return true;
}

void CablePeaksHCF100::Swap(CablePeaksHCF100* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CablePeaksHCF100::InternalSwap(CablePeaksHCF100* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peaks_.InternalSwap(&other->peaks_);
  values_.InternalSwap(&other->values_);
  swap(base_freq_, other->base_freq_);
}

::google::protobuf::Metadata CablePeaksHCF100::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettlementData::InitAsDefaultInstance() {
}
class SettlementData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettlementData::kAdcValueFieldNumber;
const int SettlementData::kErrFieldNumber;
const int SettlementData::kRawPressFieldNumber;
const int SettlementData::kRawValueFieldNumber;
const int SettlementData::kRelativeValueFieldNumber;
const int SettlementData::kTempFieldNumber;
const int SettlementData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettlementData::SettlementData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SettlementData)
}
SettlementData::SettlementData(const SettlementData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_value_, &from.adc_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&adc_value_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:SettlementData)
}

void SettlementData::SharedCtor() {
  ::memset(&adc_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&adc_value_)) + sizeof(err_));
}

SettlementData::~SettlementData() {
  // @@protoc_insertion_point(destructor:SettlementData)
  SharedDtor();
}

void SettlementData::SharedDtor() {
}

void SettlementData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlementData& SettlementData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettlementData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void SettlementData::Clear() {
// @@protoc_insertion_point(message_clear_start:SettlementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&adc_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&adc_value_)) + sizeof(err_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettlementData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettlementData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double adc_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_adc_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 err = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_err(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double raw_press = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_raw_press(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double raw_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_raw_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double relative_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_relative_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double temp = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double value = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettlementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SettlementData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double adc_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double raw_press = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raw_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double raw_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raw_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double relative_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SettlementData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SettlementData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettlementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SettlementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double adc_value = 1;
  if (this->adc_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->adc_value(), output);
  }

  // int32 err = 2;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err(), output);
  }

  // double raw_press = 3;
  if (this->raw_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->raw_press(), output);
  }

  // double raw_value = 4;
  if (this->raw_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->raw_value(), output);
  }

  // double relative_value = 5;
  if (this->relative_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_value(), output);
  }

  // double temp = 6;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->temp(), output);
  }

  // double value = 7;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SettlementData)
}

::google::protobuf::uint8* SettlementData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SettlementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double adc_value = 1;
  if (this->adc_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->adc_value(), target);
  }

  // int32 err = 2;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err(), target);
  }

  // double raw_press = 3;
  if (this->raw_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->raw_press(), target);
  }

  // double raw_value = 4;
  if (this->raw_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->raw_value(), target);
  }

  // double relative_value = 5;
  if (this->relative_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_value(), target);
  }

  // double temp = 6;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->temp(), target);
  }

  // double value = 7;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SettlementData)
  return target;
}

size_t SettlementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SettlementData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double adc_value = 1;
  if (this->adc_value() != 0) {
    total_size += 1 + 8;
  }

  // double raw_press = 3;
  if (this->raw_press() != 0) {
    total_size += 1 + 8;
  }

  // double raw_value = 4;
  if (this->raw_value() != 0) {
    total_size += 1 + 8;
  }

  // double relative_value = 5;
  if (this->relative_value() != 0) {
    total_size += 1 + 8;
  }

  // double temp = 6;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  // double value = 7;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // int32 err = 2;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlementData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SettlementData)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlementData* source =
      ::google::protobuf::DynamicCastToGenerated<SettlementData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SettlementData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SettlementData)
    MergeFrom(*source);
  }
}

void SettlementData::MergeFrom(const SettlementData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SettlementData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.adc_value() != 0) {
    set_adc_value(from.adc_value());
  }
  if (from.raw_press() != 0) {
    set_raw_press(from.raw_press());
  }
  if (from.raw_value() != 0) {
    set_raw_value(from.raw_value());
  }
  if (from.relative_value() != 0) {
    set_relative_value(from.relative_value());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.err() != 0) {
    set_err(from.err());
  }
}

void SettlementData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SettlementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlementData::CopyFrom(const SettlementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SettlementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlementData::IsInitialized() const {
  return true;
}

void SettlementData::Swap(SettlementData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettlementData::InternalSwap(SettlementData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(adc_value_, other->adc_value_);
  swap(raw_press_, other->raw_press_);
  swap(raw_value_, other->raw_value_);
  swap(relative_value_, other->relative_value_);
  swap(temp_, other->temp_);
  swap(value_, other->value_);
  swap(err_, other->err_);
}

::google::protobuf::Metadata SettlementData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StressData::InitAsDefaultInstance() {
}
class StressData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StressData::kChannelFieldNumber;
const int StressData::kDataFieldNumber;
const int StressData::kMicrosecondFieldNumber;
const int StressData::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StressData::StressData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StressData)
}
StressData::StressData(const StressData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:StressData)
}

void StressData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StressData_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
}

StressData::~StressData() {
  // @@protoc_insertion_point(destructor:StressData)
  SharedDtor();
}

void StressData::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StressData& StressData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StressData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void StressData::Clear() {
// @@protoc_insertion_point(message_clear_start:StressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&data_)) + sizeof(microsecond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StressData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StressData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("StressData.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_data(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 microsecond = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_microsecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double sample_interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_sample_interval(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StressData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StressData.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StressData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StressData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StressData.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // double data = 2;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sample_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StressData)
}

::google::protobuf::uint8* StressData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StressData.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // double data = 2;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data(), target);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->microsecond(), target);
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sample_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StressData)
  return target;
}

size_t StressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StressData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 1;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double data = 2;
  if (this->data() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 4;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StressData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StressData)
  GOOGLE_DCHECK_NE(&from, this);
  const StressData* source =
      ::google::protobuf::DynamicCastToGenerated<StressData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StressData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StressData)
    MergeFrom(*source);
  }
}

void StressData::MergeFrom(const StressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void StressData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StressData::CopyFrom(const StressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StressData::IsInitialized() const {
  return true;
}

void StressData::Swap(StressData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StressData::InternalSwap(StressData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(sample_interval_, other->sample_interval_);
  swap(microsecond_, other->microsecond_);
}

::google::protobuf::Metadata StressData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IncliHCF410V1::InitAsDefaultInstance() {
}
class IncliHCF410V1::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncliHCF410V1::kXFieldNumber;
const int IncliHCF410V1::kYFieldNumber;
const int IncliHCF410V1::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncliHCF410V1::IncliHCF410V1()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IncliHCF410V1)
}
IncliHCF410V1::IncliHCF410V1(const IncliHCF410V1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:IncliHCF410V1)
}

void IncliHCF410V1::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

IncliHCF410V1::~IncliHCF410V1() {
  // @@protoc_insertion_point(destructor:IncliHCF410V1)
  SharedDtor();
}

void IncliHCF410V1::SharedDtor() {
}

void IncliHCF410V1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncliHCF410V1& IncliHCF410V1::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IncliHCF410V1_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void IncliHCF410V1::Clear() {
// @@protoc_insertion_point(message_clear_start:IncliHCF410V1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncliHCF410V1::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IncliHCF410V1*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncliHCF410V1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IncliHCF410V1)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IncliHCF410V1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IncliHCF410V1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncliHCF410V1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IncliHCF410V1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IncliHCF410V1)
}

::google::protobuf::uint8* IncliHCF410V1::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IncliHCF410V1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IncliHCF410V1)
  return target;
}

size_t IncliHCF410V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IncliHCF410V1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncliHCF410V1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IncliHCF410V1)
  GOOGLE_DCHECK_NE(&from, this);
  const IncliHCF410V1* source =
      ::google::protobuf::DynamicCastToGenerated<IncliHCF410V1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IncliHCF410V1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IncliHCF410V1)
    MergeFrom(*source);
  }
}

void IncliHCF410V1::MergeFrom(const IncliHCF410V1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IncliHCF410V1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void IncliHCF410V1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IncliHCF410V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncliHCF410V1::CopyFrom(const IncliHCF410V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IncliHCF410V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncliHCF410V1::IsInitialized() const {
  return true;
}

void IncliHCF410V1::Swap(IncliHCF410V1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncliHCF410V1::InternalSwap(IncliHCF410V1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata IncliHCF410V1::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GRTU1000::InitAsDefaultInstance() {
}
class GRTU1000::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GRTU1000::kGasChannel1FieldNumber;
const int GRTU1000::kGasChannel2FieldNumber;
const int GRTU1000::kGasChannel3FieldNumber;
const int GRTU1000::kGasChannel4FieldNumber;
const int GRTU1000::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GRTU1000::GRTU1000()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRTU1000)
}
GRTU1000::GRTU1000(const GRTU1000& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_channel_1_, &from.gas_channel_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&gas_channel_1_)) + sizeof(temp_));
  // @@protoc_insertion_point(copy_constructor:GRTU1000)
}

void GRTU1000::SharedCtor() {
  ::memset(&gas_channel_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&gas_channel_1_)) + sizeof(temp_));
}

GRTU1000::~GRTU1000() {
  // @@protoc_insertion_point(destructor:GRTU1000)
  SharedDtor();
}

void GRTU1000::SharedDtor() {
}

void GRTU1000::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GRTU1000& GRTU1000::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GRTU1000_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void GRTU1000::Clear() {
// @@protoc_insertion_point(message_clear_start:GRTU1000)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gas_channel_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&gas_channel_1_)) + sizeof(temp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GRTU1000::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GRTU1000*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 gas_channel_1 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gas_channel_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gas_channel_2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gas_channel_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gas_channel_3 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_gas_channel_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gas_channel_4 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_gas_channel_4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double temp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GRTU1000::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRTU1000)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gas_channel_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_channel_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gas_channel_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_channel_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gas_channel_3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_channel_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gas_channel_4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_channel_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRTU1000)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRTU1000)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GRTU1000::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRTU1000)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gas_channel_1 = 1;
  if (this->gas_channel_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gas_channel_1(), output);
  }

  // int32 gas_channel_2 = 2;
  if (this->gas_channel_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gas_channel_2(), output);
  }

  // int32 gas_channel_3 = 3;
  if (this->gas_channel_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gas_channel_3(), output);
  }

  // int32 gas_channel_4 = 4;
  if (this->gas_channel_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gas_channel_4(), output);
  }

  // double temp = 5;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRTU1000)
}

::google::protobuf::uint8* GRTU1000::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRTU1000)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gas_channel_1 = 1;
  if (this->gas_channel_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gas_channel_1(), target);
  }

  // int32 gas_channel_2 = 2;
  if (this->gas_channel_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gas_channel_2(), target);
  }

  // int32 gas_channel_3 = 3;
  if (this->gas_channel_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gas_channel_3(), target);
  }

  // int32 gas_channel_4 = 4;
  if (this->gas_channel_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gas_channel_4(), target);
  }

  // double temp = 5;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRTU1000)
  return target;
}

size_t GRTU1000::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRTU1000)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gas_channel_1 = 1;
  if (this->gas_channel_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas_channel_1());
  }

  // int32 gas_channel_2 = 2;
  if (this->gas_channel_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas_channel_2());
  }

  // int32 gas_channel_3 = 3;
  if (this->gas_channel_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas_channel_3());
  }

  // int32 gas_channel_4 = 4;
  if (this->gas_channel_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas_channel_4());
  }

  // double temp = 5;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GRTU1000::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRTU1000)
  GOOGLE_DCHECK_NE(&from, this);
  const GRTU1000* source =
      ::google::protobuf::DynamicCastToGenerated<GRTU1000>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRTU1000)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRTU1000)
    MergeFrom(*source);
  }
}

void GRTU1000::MergeFrom(const GRTU1000& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRTU1000)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gas_channel_1() != 0) {
    set_gas_channel_1(from.gas_channel_1());
  }
  if (from.gas_channel_2() != 0) {
    set_gas_channel_2(from.gas_channel_2());
  }
  if (from.gas_channel_3() != 0) {
    set_gas_channel_3(from.gas_channel_3());
  }
  if (from.gas_channel_4() != 0) {
    set_gas_channel_4(from.gas_channel_4());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
}

void GRTU1000::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRTU1000)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRTU1000::CopyFrom(const GRTU1000& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRTU1000)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRTU1000::IsInitialized() const {
  return true;
}

void GRTU1000::Swap(GRTU1000* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GRTU1000::InternalSwap(GRTU1000* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gas_channel_1_, other->gas_channel_1_);
  swap(gas_channel_2_, other->gas_channel_2_);
  swap(gas_channel_3_, other->gas_channel_3_);
  swap(gas_channel_4_, other->gas_channel_4_);
  swap(temp_, other->temp_);
}

::google::protobuf::Metadata GRTU1000::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HOS3000CH4::InitAsDefaultInstance() {
}
class HOS3000CH4::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HOS3000CH4::kGasStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HOS3000CH4::HOS3000CH4()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HOS3000CH4)
}
HOS3000CH4::HOS3000CH4(const HOS3000CH4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gasstrength_ = from.gasstrength_;
  // @@protoc_insertion_point(copy_constructor:HOS3000CH4)
}

void HOS3000CH4::SharedCtor() {
  gasstrength_ = 0;
}

HOS3000CH4::~HOS3000CH4() {
  // @@protoc_insertion_point(destructor:HOS3000CH4)
  SharedDtor();
}

void HOS3000CH4::SharedDtor() {
}

void HOS3000CH4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HOS3000CH4& HOS3000CH4::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HOS3000CH4_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void HOS3000CH4::Clear() {
// @@protoc_insertion_point(message_clear_start:HOS3000CH4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gasstrength_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HOS3000CH4::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HOS3000CH4*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 GasStrength = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gasstrength(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HOS3000CH4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HOS3000CH4)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 GasStrength = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gasstrength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HOS3000CH4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HOS3000CH4)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HOS3000CH4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HOS3000CH4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GasStrength = 1;
  if (this->gasstrength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gasstrength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HOS3000CH4)
}

::google::protobuf::uint8* HOS3000CH4::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HOS3000CH4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 GasStrength = 1;
  if (this->gasstrength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gasstrength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HOS3000CH4)
  return target;
}

size_t HOS3000CH4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HOS3000CH4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 GasStrength = 1;
  if (this->gasstrength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gasstrength());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HOS3000CH4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HOS3000CH4)
  GOOGLE_DCHECK_NE(&from, this);
  const HOS3000CH4* source =
      ::google::protobuf::DynamicCastToGenerated<HOS3000CH4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HOS3000CH4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HOS3000CH4)
    MergeFrom(*source);
  }
}

void HOS3000CH4::MergeFrom(const HOS3000CH4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HOS3000CH4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gasstrength() != 0) {
    set_gasstrength(from.gasstrength());
  }
}

void HOS3000CH4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HOS3000CH4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HOS3000CH4::CopyFrom(const HOS3000CH4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HOS3000CH4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HOS3000CH4::IsInitialized() const {
  return true;
}

void HOS3000CH4::Swap(HOS3000CH4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HOS3000CH4::InternalSwap(HOS3000CH4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gasstrength_, other->gasstrength_);
}

::google::protobuf::Metadata HOS3000CH4::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DistanceData::InitAsDefaultInstance() {
}
class DistanceData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceData::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceData::DistanceData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DistanceData)
}
DistanceData::DistanceData(const DistanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:DistanceData)
}

void DistanceData::SharedCtor() {
  distance_ = 0;
}

DistanceData::~DistanceData() {
  // @@protoc_insertion_point(destructor:DistanceData)
  SharedDtor();
}

void DistanceData::SharedDtor() {
}

void DistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceData& DistanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistanceData_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void DistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:DistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistanceData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistanceData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double Distance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DistanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double Distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DistanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DistanceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Distance = 1;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DistanceData)
}

::google::protobuf::uint8* DistanceData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DistanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Distance = 1;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DistanceData)
  return target;
}

size_t DistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DistanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Distance = 1;
  if (this->distance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceData* source =
      ::google::protobuf::DynamicCastToGenerated<DistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DistanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DistanceData)
    MergeFrom(*source);
  }
}

void DistanceData::MergeFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void DistanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceData::CopyFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceData::IsInitialized() const {
  return true;
}

void DistanceData::Swap(DistanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceData::InternalSwap(DistanceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata DistanceData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Uart485ForHFS716Sample::InitAsDefaultInstance() {
}
class Uart485ForHFS716Sample::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uart485ForHFS716Sample::kHzOrResratioFieldNumber;
const int Uart485ForHFS716Sample::kChannelFieldNumber;
const int Uart485ForHFS716Sample::kChannelUnixtimeFieldNumber;
const int Uart485ForHFS716Sample::kTemperatureOrRessumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uart485ForHFS716Sample::Uart485ForHFS716Sample()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Uart485ForHFS716Sample)
}
Uart485ForHFS716Sample::Uart485ForHFS716Sample(const Uart485ForHFS716Sample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel().size() > 0) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  ::memcpy(&hz_or_resratio_, &from.hz_or_resratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_unixtime_) -
    reinterpret_cast<char*>(&hz_or_resratio_)) + sizeof(channel_unixtime_));
  // @@protoc_insertion_point(copy_constructor:Uart485ForHFS716Sample)
}

void Uart485ForHFS716Sample::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hz_or_resratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_unixtime_) -
      reinterpret_cast<char*>(&hz_or_resratio_)) + sizeof(channel_unixtime_));
}

Uart485ForHFS716Sample::~Uart485ForHFS716Sample() {
  // @@protoc_insertion_point(destructor:Uart485ForHFS716Sample)
  SharedDtor();
}

void Uart485ForHFS716Sample::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Uart485ForHFS716Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uart485ForHFS716Sample& Uart485ForHFS716Sample::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void Uart485ForHFS716Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:Uart485ForHFS716Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hz_or_resratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_unixtime_) -
      reinterpret_cast<char*>(&hz_or_resratio_)) + sizeof(channel_unixtime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Uart485ForHFS716Sample::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Uart485ForHFS716Sample*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double Hz_or_resratio = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_hz_or_resratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Uart485ForHFS716Sample.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 channel_unixtime = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_channel_unixtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double temperature_or_ressum = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_temperature_or_ressum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Uart485ForHFS716Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Uart485ForHFS716Sample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double Hz_or_resratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hz_or_resratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Uart485ForHFS716Sample.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel_unixtime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_unixtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature_or_ressum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_or_ressum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Uart485ForHFS716Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Uart485ForHFS716Sample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Uart485ForHFS716Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Uart485ForHFS716Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Hz_or_resratio = 1;
  if (this->hz_or_resratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->hz_or_resratio(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Uart485ForHFS716Sample.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // int32 channel_unixtime = 3;
  if (this->channel_unixtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_unixtime(), output);
  }

  // double temperature_or_ressum = 4;
  if (this->temperature_or_ressum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature_or_ressum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Uart485ForHFS716Sample)
}

::google::protobuf::uint8* Uart485ForHFS716Sample::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uart485ForHFS716Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Hz_or_resratio = 1;
  if (this->hz_or_resratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->hz_or_resratio(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Uart485ForHFS716Sample.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // int32 channel_unixtime = 3;
  if (this->channel_unixtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_unixtime(), target);
  }

  // double temperature_or_ressum = 4;
  if (this->temperature_or_ressum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature_or_ressum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uart485ForHFS716Sample)
  return target;
}

size_t Uart485ForHFS716Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uart485ForHFS716Sample)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // double Hz_or_resratio = 1;
  if (this->hz_or_resratio() != 0) {
    total_size += 1 + 8;
  }

  // double temperature_or_ressum = 4;
  if (this->temperature_or_ressum() != 0) {
    total_size += 1 + 8;
  }

  // int32 channel_unixtime = 3;
  if (this->channel_unixtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_unixtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uart485ForHFS716Sample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Uart485ForHFS716Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Uart485ForHFS716Sample* source =
      ::google::protobuf::DynamicCastToGenerated<Uart485ForHFS716Sample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Uart485ForHFS716Sample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Uart485ForHFS716Sample)
    MergeFrom(*source);
  }
}

void Uart485ForHFS716Sample::MergeFrom(const Uart485ForHFS716Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Uart485ForHFS716Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.hz_or_resratio() != 0) {
    set_hz_or_resratio(from.hz_or_resratio());
  }
  if (from.temperature_or_ressum() != 0) {
    set_temperature_or_ressum(from.temperature_or_ressum());
  }
  if (from.channel_unixtime() != 0) {
    set_channel_unixtime(from.channel_unixtime());
  }
}

void Uart485ForHFS716Sample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Uart485ForHFS716Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uart485ForHFS716Sample::CopyFrom(const Uart485ForHFS716Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uart485ForHFS716Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uart485ForHFS716Sample::IsInitialized() const {
  return true;
}

void Uart485ForHFS716Sample::Swap(Uart485ForHFS716Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uart485ForHFS716Sample::InternalSwap(Uart485ForHFS716Sample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hz_or_resratio_, other->hz_or_resratio_);
  swap(temperature_or_ressum_, other->temperature_or_ressum_);
  swap(channel_unixtime_, other->channel_unixtime_);
}

::google::protobuf::Metadata Uart485ForHFS716Sample::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoltageDataV1::InitAsDefaultInstance() {
}
class VoltageDataV1::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoltageDataV1::kMVFieldNumber;
const int VoltageDataV1::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoltageDataV1::VoltageDataV1()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoltageDataV1)
}
VoltageDataV1::VoltageDataV1(const VoltageDataV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mv_, &from.mv_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&mv_)) + sizeof(temp_));
  // @@protoc_insertion_point(copy_constructor:VoltageDataV1)
}

void VoltageDataV1::SharedCtor() {
  ::memset(&mv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&mv_)) + sizeof(temp_));
}

VoltageDataV1::~VoltageDataV1() {
  // @@protoc_insertion_point(destructor:VoltageDataV1)
  SharedDtor();
}

void VoltageDataV1::SharedDtor() {
}

void VoltageDataV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoltageDataV1& VoltageDataV1::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoltageDataV1_SensorMessages_2fSensorMessages_2eproto.base);
  return *internal_default_instance();
}


void VoltageDataV1::Clear() {
// @@protoc_insertion_point(message_clear_start:VoltageDataV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&mv_)) + sizeof(temp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoltageDataV1::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoltageDataV1*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double mV = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_mv(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double temp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_temp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoltageDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoltageDataV1)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double mV = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoltageDataV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoltageDataV1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoltageDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoltageDataV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mV = 1;
  if (this->mv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mv(), output);
  }

  // double temp = 2;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoltageDataV1)
}

::google::protobuf::uint8* VoltageDataV1::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoltageDataV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mV = 1;
  if (this->mv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mv(), target);
  }

  // double temp = 2;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoltageDataV1)
  return target;
}

size_t VoltageDataV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoltageDataV1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mV = 1;
  if (this->mv() != 0) {
    total_size += 1 + 8;
  }

  // double temp = 2;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoltageDataV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VoltageDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  const VoltageDataV1* source =
      ::google::protobuf::DynamicCastToGenerated<VoltageDataV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VoltageDataV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VoltageDataV1)
    MergeFrom(*source);
  }
}

void VoltageDataV1::MergeFrom(const VoltageDataV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoltageDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mv() != 0) {
    set_mv(from.mv());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
}

void VoltageDataV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VoltageDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoltageDataV1::CopyFrom(const VoltageDataV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoltageDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoltageDataV1::IsInitialized() const {
  return true;
}

void VoltageDataV1::Swap(VoltageDataV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoltageDataV1::InternalSwap(VoltageDataV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mv_, other->mv_);
  swap(temp_, other->temp_);
}

::google::protobuf::Metadata VoltageDataV1::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorMessages_2fSensorMessages_2eproto);
  return ::file_level_metadata_SensorMessages_2fSensorMessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::HighPrecisionIncliData* Arena::CreateMaybeMessage< ::HighPrecisionIncliData >(Arena* arena) {
  return Arena::CreateInternal< ::HighPrecisionIncliData >(arena);
}
template<> PROTOBUF_NOINLINE ::TempHumiData* Arena::CreateMaybeMessage< ::TempHumiData >(Arena* arena) {
  return Arena::CreateInternal< ::TempHumiData >(arena);
}
template<> PROTOBUF_NOINLINE ::VibraWireData* Arena::CreateMaybeMessage< ::VibraWireData >(Arena* arena) {
  return Arena::CreateInternal< ::VibraWireData >(arena);
}
template<> PROTOBUF_NOINLINE ::AnemometerData* Arena::CreateMaybeMessage< ::AnemometerData >(Arena* arena) {
  return Arena::CreateInternal< ::AnemometerData >(arena);
}
template<> PROTOBUF_NOINLINE ::InclinationData* Arena::CreateMaybeMessage< ::InclinationData >(Arena* arena) {
  return Arena::CreateInternal< ::InclinationData >(arena);
}
template<> PROTOBUF_NOINLINE ::VoltageData* Arena::CreateMaybeMessage< ::VoltageData >(Arena* arena) {
  return Arena::CreateInternal< ::VoltageData >(arena);
}
template<> PROTOBUF_NOINLINE ::CurrentData* Arena::CreateMaybeMessage< ::CurrentData >(Arena* arena) {
  return Arena::CreateInternal< ::CurrentData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResistanceData* Arena::CreateMaybeMessage< ::ResistanceData >(Arena* arena) {
  return Arena::CreateInternal< ::ResistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::MillivoltData* Arena::CreateMaybeMessage< ::MillivoltData >(Arena* arena) {
  return Arena::CreateInternal< ::MillivoltData >(arena);
}
template<> PROTOBUF_NOINLINE ::VibrationData* Arena::CreateMaybeMessage< ::VibrationData >(Arena* arena) {
  return Arena::CreateInternal< ::VibrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::CablePeaksHCF100* Arena::CreateMaybeMessage< ::CablePeaksHCF100 >(Arena* arena) {
  return Arena::CreateInternal< ::CablePeaksHCF100 >(arena);
}
template<> PROTOBUF_NOINLINE ::SettlementData* Arena::CreateMaybeMessage< ::SettlementData >(Arena* arena) {
  return Arena::CreateInternal< ::SettlementData >(arena);
}
template<> PROTOBUF_NOINLINE ::StressData* Arena::CreateMaybeMessage< ::StressData >(Arena* arena) {
  return Arena::CreateInternal< ::StressData >(arena);
}
template<> PROTOBUF_NOINLINE ::IncliHCF410V1* Arena::CreateMaybeMessage< ::IncliHCF410V1 >(Arena* arena) {
  return Arena::CreateInternal< ::IncliHCF410V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::GRTU1000* Arena::CreateMaybeMessage< ::GRTU1000 >(Arena* arena) {
  return Arena::CreateInternal< ::GRTU1000 >(arena);
}
template<> PROTOBUF_NOINLINE ::HOS3000CH4* Arena::CreateMaybeMessage< ::HOS3000CH4 >(Arena* arena) {
  return Arena::CreateInternal< ::HOS3000CH4 >(arena);
}
template<> PROTOBUF_NOINLINE ::DistanceData* Arena::CreateMaybeMessage< ::DistanceData >(Arena* arena) {
  return Arena::CreateInternal< ::DistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::Uart485ForHFS716Sample* Arena::CreateMaybeMessage< ::Uart485ForHFS716Sample >(Arena* arena) {
  return Arena::CreateInternal< ::Uart485ForHFS716Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::VoltageDataV1* Arena::CreateMaybeMessage< ::VoltageDataV1 >(Arena* arena) {
  return Arena::CreateInternal< ::VoltageDataV1 >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
