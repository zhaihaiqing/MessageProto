// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorUpMessage.proto

#include "SensorUpMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AnemometerData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DistanceData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GRTU1000_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HOS3000CH4_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IncliHCF410V1_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InclinationData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SettlementData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StressData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TempHumiData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoltageDataV1_SensorMessages_2fSensorMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorMessages_2fSensorMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto;
namespace SensorMessages {
class SensorUpMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorUpMessage> _instance;
  const ::HighPrecisionIncliData* highprecisioninclidata_;
  const ::TempHumiData* temphumidata_;
  const ::VibraWireData* vibrawiredata_;
  const ::AnemometerData* anemometerdata_;
  const ::InclinationData* inclinationdata_;
  const ::VoltageData* voltagedata_;
  const ::CurrentData* currentdata_;
  const ::ResistanceData* resistancedata_;
  const ::MillivoltData* millivoltdata_;
  const ::VibrationData* vibrationdata_;
  const ::CablePeaksHCF100* cablepeakshcf100_;
  const ::SettlementData* settlementdata_;
  const ::StressData* stressdata_;
  const ::IncliHCF410V1* inclihcf410v1_;
  const ::GRTU1000* grtu1000_;
  const ::HOS3000CH4* hos3000ch4_;
  const ::DistanceData* distancedata_;
  const ::Uart485ForHFS716Sample* uart485forhfs716sample_;
  const ::VoltageDataV1* voltagedatav1_;
} _SensorUpMessage_default_instance_;
}  // namespace SensorMessages
static void InitDefaultsSensorUpMessage_SensorUpMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SensorMessages::_SensorUpMessage_default_instance_;
    new (ptr) ::SensorMessages::SensorUpMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SensorMessages::SensorUpMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<19> scc_info_SensorUpMessage_SensorUpMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 19, InitDefaultsSensorUpMessage_SensorUpMessage_2eproto}, {
      &scc_info_HighPrecisionIncliData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_TempHumiData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_VibraWireData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_AnemometerData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_InclinationData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_VoltageData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_CurrentData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_ResistanceData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_MillivoltData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_VibrationData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_CablePeaksHCF100_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_SettlementData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_StressData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_IncliHCF410V1_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_GRTU1000_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_HOS3000CH4_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_DistanceData_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_Uart485ForHFS716Sample_SensorMessages_2fSensorMessages_2eproto.base,
      &scc_info_VoltageDataV1_SensorMessages_2fSensorMessages_2eproto.base,}};

void InitDefaults_SensorUpMessage_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorUpMessage_SensorUpMessage_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_SensorUpMessage_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_SensorUpMessage_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_SensorUpMessage_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_SensorUpMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, packet_name_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, node_id_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, unix_time_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, highprecisioninclidata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, temphumidata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, vibrawiredata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, anemometerdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, inclinationdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, voltagedata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, currentdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, resistancedata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, millivoltdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, vibrationdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, cablepeakshcf100_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, settlementdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, stressdata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, inclihcf410v1_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, grtu1000_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, hos3000ch4_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, distancedata_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, uart485forhfs716sample_),
  offsetof(::SensorMessages::SensorUpMessageDefaultTypeInternal, voltagedatav1_),
  PROTOBUF_FIELD_OFFSET(::SensorMessages::SensorUpMessage, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SensorMessages::SensorUpMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SensorMessages::_SensorUpMessage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_SensorUpMessage_2eproto = {
  {}, AddDescriptors_SensorUpMessage_2eproto, "SensorUpMessage.proto", schemas,
  file_default_instances, TableStruct_SensorUpMessage_2eproto::offsets,
  file_level_metadata_SensorUpMessage_2eproto, 1, file_level_enum_descriptors_SensorUpMessage_2eproto, file_level_service_descriptors_SensorUpMessage_2eproto,
};

const char descriptor_table_protodef_SensorUpMessage_2eproto[] =
  "\n\025SensorUpMessage.proto\022\016SensorMessages\032"
  "#SensorMessages/SensorMessages.proto\"\202\007\n"
  "\017SensorUpMessage\022\023\n\013packet_name\030\001 \001(\t\022\017\n"
  "\007node_id\030\002 \001(\005\022\022\n\ngateway_id\030\003 \001(\t\022\021\n\tun"
  "ix_time\030\004 \001(\r\0229\n\026highprecisioninclidata\030"
  "\024 \001(\0132\027.HighPrecisionIncliDataH\000\022%\n\014temp"
  "humidata\030\025 \001(\0132\r.TempHumiDataH\000\022\'\n\rvibra"
  "wiredata\030\026 \001(\0132\016.VibraWireDataH\000\022)\n\016anem"
  "ometerdata\030\027 \001(\0132\017.AnemometerDataH\000\022+\n\017i"
  "nclinationdata\030\030 \001(\0132\020.InclinationDataH\000"
  "\022#\n\013voltagedata\030\031 \001(\0132\014.VoltageDataH\000\022#\n"
  "\013currentdata\030\032 \001(\0132\014.CurrentDataH\000\022)\n\016re"
  "sistancedata\030\033 \001(\0132\017.ResistanceDataH\000\022\'\n"
  "\rmillivoltdata\030\034 \001(\0132\016.MillivoltDataH\000\022\'"
  "\n\rvibrationdata\030\035 \001(\0132\016.VibrationDataH\000\022"
  "-\n\020cablepeakshcf100\030\036 \001(\0132\021.CablePeaksHC"
  "F100H\000\022)\n\016settlementdata\030\037 \001(\0132\017.Settlem"
  "entDataH\000\022!\n\nstressdata\030  \001(\0132\013.StressDa"
  "taH\000\022\'\n\rinclihcf410v1\030! \001(\0132\016.IncliHCF41"
  "0V1H\000\022\035\n\010grtu1000\030\" \001(\0132\t.GRTU1000H\000\022!\n\n"
  "hos3000ch4\030# \001(\0132\013.HOS3000CH4H\000\022%\n\014dista"
  "ncedata\030$ \001(\0132\r.DistanceDataH\000\0229\n\026uart48"
  "5forhfs716sample\030% \001(\0132\027.Uart485ForHFS71"
  "6SampleH\000\022\'\n\rvoltagedatav1\030& \001(\0132\016.Volta"
  "geDataV1H\000B\005\n\003msgb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_SensorUpMessage_2eproto = {
  false, InitDefaults_SensorUpMessage_2eproto, 
  descriptor_table_protodef_SensorUpMessage_2eproto,
  "SensorUpMessage.proto", &assign_descriptors_table_SensorUpMessage_2eproto, 985,
};

void AddDescriptors_SensorUpMessage_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_SensorMessages_2fSensorMessages_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_SensorUpMessage_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorUpMessage_2eproto = []() { AddDescriptors_SensorUpMessage_2eproto(); return true; }();
namespace SensorMessages {

// ===================================================================

void SensorUpMessage::InitAsDefaultInstance() {
  ::SensorMessages::_SensorUpMessage_default_instance_.highprecisioninclidata_ = const_cast< ::HighPrecisionIncliData*>(
      ::HighPrecisionIncliData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.temphumidata_ = const_cast< ::TempHumiData*>(
      ::TempHumiData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.vibrawiredata_ = const_cast< ::VibraWireData*>(
      ::VibraWireData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.anemometerdata_ = const_cast< ::AnemometerData*>(
      ::AnemometerData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.inclinationdata_ = const_cast< ::InclinationData*>(
      ::InclinationData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.voltagedata_ = const_cast< ::VoltageData*>(
      ::VoltageData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.currentdata_ = const_cast< ::CurrentData*>(
      ::CurrentData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.resistancedata_ = const_cast< ::ResistanceData*>(
      ::ResistanceData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.millivoltdata_ = const_cast< ::MillivoltData*>(
      ::MillivoltData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.vibrationdata_ = const_cast< ::VibrationData*>(
      ::VibrationData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.cablepeakshcf100_ = const_cast< ::CablePeaksHCF100*>(
      ::CablePeaksHCF100::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.settlementdata_ = const_cast< ::SettlementData*>(
      ::SettlementData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.stressdata_ = const_cast< ::StressData*>(
      ::StressData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.inclihcf410v1_ = const_cast< ::IncliHCF410V1*>(
      ::IncliHCF410V1::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.grtu1000_ = const_cast< ::GRTU1000*>(
      ::GRTU1000::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.hos3000ch4_ = const_cast< ::HOS3000CH4*>(
      ::HOS3000CH4::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.distancedata_ = const_cast< ::DistanceData*>(
      ::DistanceData::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.uart485forhfs716sample_ = const_cast< ::Uart485ForHFS716Sample*>(
      ::Uart485ForHFS716Sample::internal_default_instance());
  ::SensorMessages::_SensorUpMessage_default_instance_.voltagedatav1_ = const_cast< ::VoltageDataV1*>(
      ::VoltageDataV1::internal_default_instance());
}
class SensorUpMessage::HasBitSetters {
 public:
  static const ::HighPrecisionIncliData& highprecisioninclidata(const SensorUpMessage* msg);
  static const ::TempHumiData& temphumidata(const SensorUpMessage* msg);
  static const ::VibraWireData& vibrawiredata(const SensorUpMessage* msg);
  static const ::AnemometerData& anemometerdata(const SensorUpMessage* msg);
  static const ::InclinationData& inclinationdata(const SensorUpMessage* msg);
  static const ::VoltageData& voltagedata(const SensorUpMessage* msg);
  static const ::CurrentData& currentdata(const SensorUpMessage* msg);
  static const ::ResistanceData& resistancedata(const SensorUpMessage* msg);
  static const ::MillivoltData& millivoltdata(const SensorUpMessage* msg);
  static const ::VibrationData& vibrationdata(const SensorUpMessage* msg);
  static const ::CablePeaksHCF100& cablepeakshcf100(const SensorUpMessage* msg);
  static const ::SettlementData& settlementdata(const SensorUpMessage* msg);
  static const ::StressData& stressdata(const SensorUpMessage* msg);
  static const ::IncliHCF410V1& inclihcf410v1(const SensorUpMessage* msg);
  static const ::GRTU1000& grtu1000(const SensorUpMessage* msg);
  static const ::HOS3000CH4& hos3000ch4(const SensorUpMessage* msg);
  static const ::DistanceData& distancedata(const SensorUpMessage* msg);
  static const ::Uart485ForHFS716Sample& uart485forhfs716sample(const SensorUpMessage* msg);
  static const ::VoltageDataV1& voltagedatav1(const SensorUpMessage* msg);
};

const ::HighPrecisionIncliData&
SensorUpMessage::HasBitSetters::highprecisioninclidata(const SensorUpMessage* msg) {
  return *msg->msg_.highprecisioninclidata_;
}
const ::TempHumiData&
SensorUpMessage::HasBitSetters::temphumidata(const SensorUpMessage* msg) {
  return *msg->msg_.temphumidata_;
}
const ::VibraWireData&
SensorUpMessage::HasBitSetters::vibrawiredata(const SensorUpMessage* msg) {
  return *msg->msg_.vibrawiredata_;
}
const ::AnemometerData&
SensorUpMessage::HasBitSetters::anemometerdata(const SensorUpMessage* msg) {
  return *msg->msg_.anemometerdata_;
}
const ::InclinationData&
SensorUpMessage::HasBitSetters::inclinationdata(const SensorUpMessage* msg) {
  return *msg->msg_.inclinationdata_;
}
const ::VoltageData&
SensorUpMessage::HasBitSetters::voltagedata(const SensorUpMessage* msg) {
  return *msg->msg_.voltagedata_;
}
const ::CurrentData&
SensorUpMessage::HasBitSetters::currentdata(const SensorUpMessage* msg) {
  return *msg->msg_.currentdata_;
}
const ::ResistanceData&
SensorUpMessage::HasBitSetters::resistancedata(const SensorUpMessage* msg) {
  return *msg->msg_.resistancedata_;
}
const ::MillivoltData&
SensorUpMessage::HasBitSetters::millivoltdata(const SensorUpMessage* msg) {
  return *msg->msg_.millivoltdata_;
}
const ::VibrationData&
SensorUpMessage::HasBitSetters::vibrationdata(const SensorUpMessage* msg) {
  return *msg->msg_.vibrationdata_;
}
const ::CablePeaksHCF100&
SensorUpMessage::HasBitSetters::cablepeakshcf100(const SensorUpMessage* msg) {
  return *msg->msg_.cablepeakshcf100_;
}
const ::SettlementData&
SensorUpMessage::HasBitSetters::settlementdata(const SensorUpMessage* msg) {
  return *msg->msg_.settlementdata_;
}
const ::StressData&
SensorUpMessage::HasBitSetters::stressdata(const SensorUpMessage* msg) {
  return *msg->msg_.stressdata_;
}
const ::IncliHCF410V1&
SensorUpMessage::HasBitSetters::inclihcf410v1(const SensorUpMessage* msg) {
  return *msg->msg_.inclihcf410v1_;
}
const ::GRTU1000&
SensorUpMessage::HasBitSetters::grtu1000(const SensorUpMessage* msg) {
  return *msg->msg_.grtu1000_;
}
const ::HOS3000CH4&
SensorUpMessage::HasBitSetters::hos3000ch4(const SensorUpMessage* msg) {
  return *msg->msg_.hos3000ch4_;
}
const ::DistanceData&
SensorUpMessage::HasBitSetters::distancedata(const SensorUpMessage* msg) {
  return *msg->msg_.distancedata_;
}
const ::Uart485ForHFS716Sample&
SensorUpMessage::HasBitSetters::uart485forhfs716sample(const SensorUpMessage* msg) {
  return *msg->msg_.uart485forhfs716sample_;
}
const ::VoltageDataV1&
SensorUpMessage::HasBitSetters::voltagedatav1(const SensorUpMessage* msg) {
  return *msg->msg_.voltagedatav1_;
}
void SensorUpMessage::set_allocated_highprecisioninclidata(::HighPrecisionIncliData* highprecisioninclidata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (highprecisioninclidata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      highprecisioninclidata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, highprecisioninclidata, submessage_arena);
    }
    set_has_highprecisioninclidata();
    msg_.highprecisioninclidata_ = highprecisioninclidata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.highprecisioninclidata)
}
void SensorUpMessage::clear_highprecisioninclidata() {
  if (has_highprecisioninclidata()) {
    delete msg_.highprecisioninclidata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_temphumidata(::TempHumiData* temphumidata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (temphumidata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      temphumidata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temphumidata, submessage_arena);
    }
    set_has_temphumidata();
    msg_.temphumidata_ = temphumidata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.temphumidata)
}
void SensorUpMessage::clear_temphumidata() {
  if (has_temphumidata()) {
    delete msg_.temphumidata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_vibrawiredata(::VibraWireData* vibrawiredata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (vibrawiredata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vibrawiredata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vibrawiredata, submessage_arena);
    }
    set_has_vibrawiredata();
    msg_.vibrawiredata_ = vibrawiredata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.vibrawiredata)
}
void SensorUpMessage::clear_vibrawiredata() {
  if (has_vibrawiredata()) {
    delete msg_.vibrawiredata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_anemometerdata(::AnemometerData* anemometerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (anemometerdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anemometerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, anemometerdata, submessage_arena);
    }
    set_has_anemometerdata();
    msg_.anemometerdata_ = anemometerdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.anemometerdata)
}
void SensorUpMessage::clear_anemometerdata() {
  if (has_anemometerdata()) {
    delete msg_.anemometerdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_inclinationdata(::InclinationData* inclinationdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (inclinationdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inclinationdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inclinationdata, submessage_arena);
    }
    set_has_inclinationdata();
    msg_.inclinationdata_ = inclinationdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.inclinationdata)
}
void SensorUpMessage::clear_inclinationdata() {
  if (has_inclinationdata()) {
    delete msg_.inclinationdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_voltagedata(::VoltageData* voltagedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (voltagedata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voltagedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltagedata, submessage_arena);
    }
    set_has_voltagedata();
    msg_.voltagedata_ = voltagedata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.voltagedata)
}
void SensorUpMessage::clear_voltagedata() {
  if (has_voltagedata()) {
    delete msg_.voltagedata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_currentdata(::CurrentData* currentdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (currentdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      currentdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currentdata, submessage_arena);
    }
    set_has_currentdata();
    msg_.currentdata_ = currentdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.currentdata)
}
void SensorUpMessage::clear_currentdata() {
  if (has_currentdata()) {
    delete msg_.currentdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_resistancedata(::ResistanceData* resistancedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (resistancedata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resistancedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resistancedata, submessage_arena);
    }
    set_has_resistancedata();
    msg_.resistancedata_ = resistancedata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.resistancedata)
}
void SensorUpMessage::clear_resistancedata() {
  if (has_resistancedata()) {
    delete msg_.resistancedata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_millivoltdata(::MillivoltData* millivoltdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (millivoltdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      millivoltdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, millivoltdata, submessage_arena);
    }
    set_has_millivoltdata();
    msg_.millivoltdata_ = millivoltdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.millivoltdata)
}
void SensorUpMessage::clear_millivoltdata() {
  if (has_millivoltdata()) {
    delete msg_.millivoltdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_vibrationdata(::VibrationData* vibrationdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (vibrationdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vibrationdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vibrationdata, submessage_arena);
    }
    set_has_vibrationdata();
    msg_.vibrationdata_ = vibrationdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.vibrationdata)
}
void SensorUpMessage::clear_vibrationdata() {
  if (has_vibrationdata()) {
    delete msg_.vibrationdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_cablepeakshcf100(::CablePeaksHCF100* cablepeakshcf100) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (cablepeakshcf100) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cablepeakshcf100 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cablepeakshcf100, submessage_arena);
    }
    set_has_cablepeakshcf100();
    msg_.cablepeakshcf100_ = cablepeakshcf100;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.cablepeakshcf100)
}
void SensorUpMessage::clear_cablepeakshcf100() {
  if (has_cablepeakshcf100()) {
    delete msg_.cablepeakshcf100_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_settlementdata(::SettlementData* settlementdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (settlementdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settlementdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settlementdata, submessage_arena);
    }
    set_has_settlementdata();
    msg_.settlementdata_ = settlementdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.settlementdata)
}
void SensorUpMessage::clear_settlementdata() {
  if (has_settlementdata()) {
    delete msg_.settlementdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_stressdata(::StressData* stressdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (stressdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stressdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stressdata, submessage_arena);
    }
    set_has_stressdata();
    msg_.stressdata_ = stressdata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.stressdata)
}
void SensorUpMessage::clear_stressdata() {
  if (has_stressdata()) {
    delete msg_.stressdata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_inclihcf410v1(::IncliHCF410V1* inclihcf410v1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (inclihcf410v1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inclihcf410v1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inclihcf410v1, submessage_arena);
    }
    set_has_inclihcf410v1();
    msg_.inclihcf410v1_ = inclihcf410v1;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.inclihcf410v1)
}
void SensorUpMessage::clear_inclihcf410v1() {
  if (has_inclihcf410v1()) {
    delete msg_.inclihcf410v1_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_grtu1000(::GRTU1000* grtu1000) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (grtu1000) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      grtu1000 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grtu1000, submessage_arena);
    }
    set_has_grtu1000();
    msg_.grtu1000_ = grtu1000;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.grtu1000)
}
void SensorUpMessage::clear_grtu1000() {
  if (has_grtu1000()) {
    delete msg_.grtu1000_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_hos3000ch4(::HOS3000CH4* hos3000ch4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (hos3000ch4) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hos3000ch4 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hos3000ch4, submessage_arena);
    }
    set_has_hos3000ch4();
    msg_.hos3000ch4_ = hos3000ch4;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.hos3000ch4)
}
void SensorUpMessage::clear_hos3000ch4() {
  if (has_hos3000ch4()) {
    delete msg_.hos3000ch4_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_distancedata(::DistanceData* distancedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (distancedata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distancedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distancedata, submessage_arena);
    }
    set_has_distancedata();
    msg_.distancedata_ = distancedata;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.distancedata)
}
void SensorUpMessage::clear_distancedata() {
  if (has_distancedata()) {
    delete msg_.distancedata_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_uart485forhfs716sample(::Uart485ForHFS716Sample* uart485forhfs716sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (uart485forhfs716sample) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uart485forhfs716sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uart485forhfs716sample, submessage_arena);
    }
    set_has_uart485forhfs716sample();
    msg_.uart485forhfs716sample_ = uart485forhfs716sample;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.uart485forhfs716sample)
}
void SensorUpMessage::clear_uart485forhfs716sample() {
  if (has_uart485forhfs716sample()) {
    delete msg_.uart485forhfs716sample_;
    clear_has_msg();
  }
}
void SensorUpMessage::set_allocated_voltagedatav1(::VoltageDataV1* voltagedatav1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (voltagedatav1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voltagedatav1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltagedatav1, submessage_arena);
    }
    set_has_voltagedatav1();
    msg_.voltagedatav1_ = voltagedatav1;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMessages.SensorUpMessage.voltagedatav1)
}
void SensorUpMessage::clear_voltagedatav1() {
  if (has_voltagedatav1()) {
    delete msg_.voltagedatav1_;
    clear_has_msg();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorUpMessage::kPacketNameFieldNumber;
const int SensorUpMessage::kNodeIdFieldNumber;
const int SensorUpMessage::kGatewayIdFieldNumber;
const int SensorUpMessage::kUnixTimeFieldNumber;
const int SensorUpMessage::kHighprecisioninclidataFieldNumber;
const int SensorUpMessage::kTemphumidataFieldNumber;
const int SensorUpMessage::kVibrawiredataFieldNumber;
const int SensorUpMessage::kAnemometerdataFieldNumber;
const int SensorUpMessage::kInclinationdataFieldNumber;
const int SensorUpMessage::kVoltagedataFieldNumber;
const int SensorUpMessage::kCurrentdataFieldNumber;
const int SensorUpMessage::kResistancedataFieldNumber;
const int SensorUpMessage::kMillivoltdataFieldNumber;
const int SensorUpMessage::kVibrationdataFieldNumber;
const int SensorUpMessage::kCablepeakshcf100FieldNumber;
const int SensorUpMessage::kSettlementdataFieldNumber;
const int SensorUpMessage::kStressdataFieldNumber;
const int SensorUpMessage::kInclihcf410V1FieldNumber;
const int SensorUpMessage::kGrtu1000FieldNumber;
const int SensorUpMessage::kHos3000Ch4FieldNumber;
const int SensorUpMessage::kDistancedataFieldNumber;
const int SensorUpMessage::kUart485Forhfs716SampleFieldNumber;
const int SensorUpMessage::kVoltagedatav1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorUpMessage::SensorUpMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorMessages.SensorUpMessage)
}
SensorUpMessage::SensorUpMessage(const SensorUpMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packet_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.packet_name().size() > 0) {
    packet_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_name_);
  }
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unix_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(unix_time_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kHighprecisioninclidata: {
      mutable_highprecisioninclidata()->::HighPrecisionIncliData::MergeFrom(from.highprecisioninclidata());
      break;
    }
    case kTemphumidata: {
      mutable_temphumidata()->::TempHumiData::MergeFrom(from.temphumidata());
      break;
    }
    case kVibrawiredata: {
      mutable_vibrawiredata()->::VibraWireData::MergeFrom(from.vibrawiredata());
      break;
    }
    case kAnemometerdata: {
      mutable_anemometerdata()->::AnemometerData::MergeFrom(from.anemometerdata());
      break;
    }
    case kInclinationdata: {
      mutable_inclinationdata()->::InclinationData::MergeFrom(from.inclinationdata());
      break;
    }
    case kVoltagedata: {
      mutable_voltagedata()->::VoltageData::MergeFrom(from.voltagedata());
      break;
    }
    case kCurrentdata: {
      mutable_currentdata()->::CurrentData::MergeFrom(from.currentdata());
      break;
    }
    case kResistancedata: {
      mutable_resistancedata()->::ResistanceData::MergeFrom(from.resistancedata());
      break;
    }
    case kMillivoltdata: {
      mutable_millivoltdata()->::MillivoltData::MergeFrom(from.millivoltdata());
      break;
    }
    case kVibrationdata: {
      mutable_vibrationdata()->::VibrationData::MergeFrom(from.vibrationdata());
      break;
    }
    case kCablepeakshcf100: {
      mutable_cablepeakshcf100()->::CablePeaksHCF100::MergeFrom(from.cablepeakshcf100());
      break;
    }
    case kSettlementdata: {
      mutable_settlementdata()->::SettlementData::MergeFrom(from.settlementdata());
      break;
    }
    case kStressdata: {
      mutable_stressdata()->::StressData::MergeFrom(from.stressdata());
      break;
    }
    case kInclihcf410V1: {
      mutable_inclihcf410v1()->::IncliHCF410V1::MergeFrom(from.inclihcf410v1());
      break;
    }
    case kGrtu1000: {
      mutable_grtu1000()->::GRTU1000::MergeFrom(from.grtu1000());
      break;
    }
    case kHos3000Ch4: {
      mutable_hos3000ch4()->::HOS3000CH4::MergeFrom(from.hos3000ch4());
      break;
    }
    case kDistancedata: {
      mutable_distancedata()->::DistanceData::MergeFrom(from.distancedata());
      break;
    }
    case kUart485Forhfs716Sample: {
      mutable_uart485forhfs716sample()->::Uart485ForHFS716Sample::MergeFrom(from.uart485forhfs716sample());
      break;
    }
    case kVoltagedatav1: {
      mutable_voltagedatav1()->::VoltageDataV1::MergeFrom(from.voltagedatav1());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SensorMessages.SensorUpMessage)
}

void SensorUpMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorUpMessage_SensorUpMessage_2eproto.base);
  packet_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unix_time_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(unix_time_));
  clear_has_msg();
}

SensorUpMessage::~SensorUpMessage() {
  // @@protoc_insertion_point(destructor:SensorMessages.SensorUpMessage)
  SharedDtor();
}

void SensorUpMessage::SharedDtor() {
  packet_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_msg()) {
    clear_msg();
  }
}

void SensorUpMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorUpMessage& SensorUpMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorUpMessage_SensorUpMessage_2eproto.base);
  return *internal_default_instance();
}


void SensorUpMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:SensorMessages.SensorUpMessage)
  switch (msg_case()) {
    case kHighprecisioninclidata: {
      delete msg_.highprecisioninclidata_;
      break;
    }
    case kTemphumidata: {
      delete msg_.temphumidata_;
      break;
    }
    case kVibrawiredata: {
      delete msg_.vibrawiredata_;
      break;
    }
    case kAnemometerdata: {
      delete msg_.anemometerdata_;
      break;
    }
    case kInclinationdata: {
      delete msg_.inclinationdata_;
      break;
    }
    case kVoltagedata: {
      delete msg_.voltagedata_;
      break;
    }
    case kCurrentdata: {
      delete msg_.currentdata_;
      break;
    }
    case kResistancedata: {
      delete msg_.resistancedata_;
      break;
    }
    case kMillivoltdata: {
      delete msg_.millivoltdata_;
      break;
    }
    case kVibrationdata: {
      delete msg_.vibrationdata_;
      break;
    }
    case kCablepeakshcf100: {
      delete msg_.cablepeakshcf100_;
      break;
    }
    case kSettlementdata: {
      delete msg_.settlementdata_;
      break;
    }
    case kStressdata: {
      delete msg_.stressdata_;
      break;
    }
    case kInclihcf410V1: {
      delete msg_.inclihcf410v1_;
      break;
    }
    case kGrtu1000: {
      delete msg_.grtu1000_;
      break;
    }
    case kHos3000Ch4: {
      delete msg_.hos3000ch4_;
      break;
    }
    case kDistancedata: {
      delete msg_.distancedata_;
      break;
    }
    case kUart485Forhfs716Sample: {
      delete msg_.uart485forhfs716sample_;
      break;
    }
    case kVoltagedatav1: {
      delete msg_.voltagedatav1_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void SensorUpMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorMessages.SensorUpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unix_time_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(unix_time_));
  clear_msg();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorUpMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorUpMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string packet_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SensorMessages.SensorUpMessage.packet_name");
        object = msg->mutable_packet_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string gateway_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SensorMessages.SensorUpMessage.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 unix_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unix_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .HighPrecisionIncliData highprecisioninclidata = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::HighPrecisionIncliData::_InternalParse;
        object = msg->mutable_highprecisioninclidata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TempHumiData temphumidata = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TempHumiData::_InternalParse;
        object = msg->mutable_temphumidata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .VibraWireData vibrawiredata = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VibraWireData::_InternalParse;
        object = msg->mutable_vibrawiredata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .AnemometerData anemometerdata = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AnemometerData::_InternalParse;
        object = msg->mutable_anemometerdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .InclinationData inclinationdata = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InclinationData::_InternalParse;
        object = msg->mutable_inclinationdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .VoltageData voltagedata = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VoltageData::_InternalParse;
        object = msg->mutable_voltagedata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .CurrentData currentdata = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CurrentData::_InternalParse;
        object = msg->mutable_currentdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ResistanceData resistancedata = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ResistanceData::_InternalParse;
        object = msg->mutable_resistancedata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MillivoltData millivoltdata = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MillivoltData::_InternalParse;
        object = msg->mutable_millivoltdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .VibrationData vibrationdata = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VibrationData::_InternalParse;
        object = msg->mutable_vibrationdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .CablePeaksHCF100 cablepeakshcf100 = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CablePeaksHCF100::_InternalParse;
        object = msg->mutable_cablepeakshcf100();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .SettlementData settlementdata = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SettlementData::_InternalParse;
        object = msg->mutable_settlementdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .StressData stressdata = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StressData::_InternalParse;
        object = msg->mutable_stressdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .IncliHCF410V1 inclihcf410v1 = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::IncliHCF410V1::_InternalParse;
        object = msg->mutable_inclihcf410v1();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .GRTU1000 grtu1000 = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GRTU1000::_InternalParse;
        object = msg->mutable_grtu1000();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .HOS3000CH4 hos3000ch4 = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::HOS3000CH4::_InternalParse;
        object = msg->mutable_hos3000ch4();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .DistanceData distancedata = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DistanceData::_InternalParse;
        object = msg->mutable_distancedata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Uart485ForHFS716Sample::_InternalParse;
        object = msg->mutable_uart485forhfs716sample();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .VoltageDataV1 voltagedatav1 = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VoltageDataV1::_InternalParse;
        object = msg->mutable_voltagedatav1();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorUpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorMessages.SensorUpMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string packet_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->packet_name().data(), static_cast<int>(this->packet_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SensorMessages.SensorUpMessage.packet_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SensorMessages.SensorUpMessage.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unix_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HighPrecisionIncliData highprecisioninclidata = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_highprecisioninclidata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TempHumiData temphumidata = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_temphumidata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VibraWireData vibrawiredata = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vibrawiredata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AnemometerData anemometerdata = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_anemometerdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InclinationData inclinationdata = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inclinationdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VoltageData voltagedata = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CurrentData currentdata = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_currentdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ResistanceData resistancedata = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resistancedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MillivoltData millivoltdata = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_millivoltdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VibrationData vibrationdata = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vibrationdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CablePeaksHCF100 cablepeakshcf100 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cablepeakshcf100()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SettlementData settlementdata = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settlementdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StressData stressdata = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stressdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IncliHCF410V1 inclihcf410v1 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inclihcf410v1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GRTU1000 grtu1000 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grtu1000()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HOS3000CH4 hos3000ch4 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (282 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hos3000ch4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DistanceData distancedata = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (290 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distancedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uart485forhfs716sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VoltageDataV1 voltagedatav1 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltagedatav1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorMessages.SensorUpMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorMessages.SensorUpMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorUpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorMessages.SensorUpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packet_name().data(), static_cast<int>(this->packet_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpMessage.packet_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->packet_name(), output);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpMessage.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway_id(), output);
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unix_time(), output);
  }

  // .HighPrecisionIncliData highprecisioninclidata = 20;
  if (has_highprecisioninclidata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::highprecisioninclidata(this), output);
  }

  // .TempHumiData temphumidata = 21;
  if (has_temphumidata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::temphumidata(this), output);
  }

  // .VibraWireData vibrawiredata = 22;
  if (has_vibrawiredata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::vibrawiredata(this), output);
  }

  // .AnemometerData anemometerdata = 23;
  if (has_anemometerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::anemometerdata(this), output);
  }

  // .InclinationData inclinationdata = 24;
  if (has_inclinationdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::inclinationdata(this), output);
  }

  // .VoltageData voltagedata = 25;
  if (has_voltagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::voltagedata(this), output);
  }

  // .CurrentData currentdata = 26;
  if (has_currentdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::currentdata(this), output);
  }

  // .ResistanceData resistancedata = 27;
  if (has_resistancedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, HasBitSetters::resistancedata(this), output);
  }

  // .MillivoltData millivoltdata = 28;
  if (has_millivoltdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::millivoltdata(this), output);
  }

  // .VibrationData vibrationdata = 29;
  if (has_vibrationdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::vibrationdata(this), output);
  }

  // .CablePeaksHCF100 cablepeakshcf100 = 30;
  if (has_cablepeakshcf100()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::cablepeakshcf100(this), output);
  }

  // .SettlementData settlementdata = 31;
  if (has_settlementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, HasBitSetters::settlementdata(this), output);
  }

  // .StressData stressdata = 32;
  if (has_stressdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::stressdata(this), output);
  }

  // .IncliHCF410V1 inclihcf410v1 = 33;
  if (has_inclihcf410v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, HasBitSetters::inclihcf410v1(this), output);
  }

  // .GRTU1000 grtu1000 = 34;
  if (has_grtu1000()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::grtu1000(this), output);
  }

  // .HOS3000CH4 hos3000ch4 = 35;
  if (has_hos3000ch4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, HasBitSetters::hos3000ch4(this), output);
  }

  // .DistanceData distancedata = 36;
  if (has_distancedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, HasBitSetters::distancedata(this), output);
  }

  // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
  if (has_uart485forhfs716sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::uart485forhfs716sample(this), output);
  }

  // .VoltageDataV1 voltagedatav1 = 38;
  if (has_voltagedatav1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, HasBitSetters::voltagedatav1(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorMessages.SensorUpMessage)
}

::google::protobuf::uint8* SensorUpMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorMessages.SensorUpMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->packet_name().data(), static_cast<int>(this->packet_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpMessage.packet_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->packet_name(), target);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SensorMessages.SensorUpMessage.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gateway_id(), target);
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unix_time(), target);
  }

  // .HighPrecisionIncliData highprecisioninclidata = 20;
  if (has_highprecisioninclidata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::highprecisioninclidata(this), target);
  }

  // .TempHumiData temphumidata = 21;
  if (has_temphumidata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::temphumidata(this), target);
  }

  // .VibraWireData vibrawiredata = 22;
  if (has_vibrawiredata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::vibrawiredata(this), target);
  }

  // .AnemometerData anemometerdata = 23;
  if (has_anemometerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::anemometerdata(this), target);
  }

  // .InclinationData inclinationdata = 24;
  if (has_inclinationdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::inclinationdata(this), target);
  }

  // .VoltageData voltagedata = 25;
  if (has_voltagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::voltagedata(this), target);
  }

  // .CurrentData currentdata = 26;
  if (has_currentdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::currentdata(this), target);
  }

  // .ResistanceData resistancedata = 27;
  if (has_resistancedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, HasBitSetters::resistancedata(this), target);
  }

  // .MillivoltData millivoltdata = 28;
  if (has_millivoltdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::millivoltdata(this), target);
  }

  // .VibrationData vibrationdata = 29;
  if (has_vibrationdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::vibrationdata(this), target);
  }

  // .CablePeaksHCF100 cablepeakshcf100 = 30;
  if (has_cablepeakshcf100()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::cablepeakshcf100(this), target);
  }

  // .SettlementData settlementdata = 31;
  if (has_settlementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, HasBitSetters::settlementdata(this), target);
  }

  // .StressData stressdata = 32;
  if (has_stressdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::stressdata(this), target);
  }

  // .IncliHCF410V1 inclihcf410v1 = 33;
  if (has_inclihcf410v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, HasBitSetters::inclihcf410v1(this), target);
  }

  // .GRTU1000 grtu1000 = 34;
  if (has_grtu1000()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::grtu1000(this), target);
  }

  // .HOS3000CH4 hos3000ch4 = 35;
  if (has_hos3000ch4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, HasBitSetters::hos3000ch4(this), target);
  }

  // .DistanceData distancedata = 36;
  if (has_distancedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, HasBitSetters::distancedata(this), target);
  }

  // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
  if (has_uart485forhfs716sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::uart485forhfs716sample(this), target);
  }

  // .VoltageDataV1 voltagedatav1 = 38;
  if (has_voltagedatav1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, HasBitSetters::voltagedatav1(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorMessages.SensorUpMessage)
  return target;
}

size_t SensorUpMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorMessages.SensorUpMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_name = 1;
  if (this->packet_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->packet_name());
  }

  // string gateway_id = 3;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // uint32 unix_time = 4;
  if (this->unix_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unix_time());
  }

  switch (msg_case()) {
    // .HighPrecisionIncliData highprecisioninclidata = 20;
    case kHighprecisioninclidata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.highprecisioninclidata_);
      break;
    }
    // .TempHumiData temphumidata = 21;
    case kTemphumidata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.temphumidata_);
      break;
    }
    // .VibraWireData vibrawiredata = 22;
    case kVibrawiredata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.vibrawiredata_);
      break;
    }
    // .AnemometerData anemometerdata = 23;
    case kAnemometerdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.anemometerdata_);
      break;
    }
    // .InclinationData inclinationdata = 24;
    case kInclinationdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.inclinationdata_);
      break;
    }
    // .VoltageData voltagedata = 25;
    case kVoltagedata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.voltagedata_);
      break;
    }
    // .CurrentData currentdata = 26;
    case kCurrentdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.currentdata_);
      break;
    }
    // .ResistanceData resistancedata = 27;
    case kResistancedata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.resistancedata_);
      break;
    }
    // .MillivoltData millivoltdata = 28;
    case kMillivoltdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.millivoltdata_);
      break;
    }
    // .VibrationData vibrationdata = 29;
    case kVibrationdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.vibrationdata_);
      break;
    }
    // .CablePeaksHCF100 cablepeakshcf100 = 30;
    case kCablepeakshcf100: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.cablepeakshcf100_);
      break;
    }
    // .SettlementData settlementdata = 31;
    case kSettlementdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.settlementdata_);
      break;
    }
    // .StressData stressdata = 32;
    case kStressdata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.stressdata_);
      break;
    }
    // .IncliHCF410V1 inclihcf410v1 = 33;
    case kInclihcf410V1: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.inclihcf410v1_);
      break;
    }
    // .GRTU1000 grtu1000 = 34;
    case kGrtu1000: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.grtu1000_);
      break;
    }
    // .HOS3000CH4 hos3000ch4 = 35;
    case kHos3000Ch4: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.hos3000ch4_);
      break;
    }
    // .DistanceData distancedata = 36;
    case kDistancedata: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.distancedata_);
      break;
    }
    // .Uart485ForHFS716Sample uart485forhfs716sample = 37;
    case kUart485Forhfs716Sample: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.uart485forhfs716sample_);
      break;
    }
    // .VoltageDataV1 voltagedatav1 = 38;
    case kVoltagedatav1: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.voltagedatav1_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorUpMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorMessages.SensorUpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorUpMessage* source =
      ::google::protobuf::DynamicCastToGenerated<SensorUpMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorMessages.SensorUpMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorMessages.SensorUpMessage)
    MergeFrom(*source);
  }
}

void SensorUpMessage::MergeFrom(const SensorUpMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorMessages.SensorUpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_name().size() > 0) {

    packet_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_name_);
  }
  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.unix_time() != 0) {
    set_unix_time(from.unix_time());
  }
  switch (from.msg_case()) {
    case kHighprecisioninclidata: {
      mutable_highprecisioninclidata()->::HighPrecisionIncliData::MergeFrom(from.highprecisioninclidata());
      break;
    }
    case kTemphumidata: {
      mutable_temphumidata()->::TempHumiData::MergeFrom(from.temphumidata());
      break;
    }
    case kVibrawiredata: {
      mutable_vibrawiredata()->::VibraWireData::MergeFrom(from.vibrawiredata());
      break;
    }
    case kAnemometerdata: {
      mutable_anemometerdata()->::AnemometerData::MergeFrom(from.anemometerdata());
      break;
    }
    case kInclinationdata: {
      mutable_inclinationdata()->::InclinationData::MergeFrom(from.inclinationdata());
      break;
    }
    case kVoltagedata: {
      mutable_voltagedata()->::VoltageData::MergeFrom(from.voltagedata());
      break;
    }
    case kCurrentdata: {
      mutable_currentdata()->::CurrentData::MergeFrom(from.currentdata());
      break;
    }
    case kResistancedata: {
      mutable_resistancedata()->::ResistanceData::MergeFrom(from.resistancedata());
      break;
    }
    case kMillivoltdata: {
      mutable_millivoltdata()->::MillivoltData::MergeFrom(from.millivoltdata());
      break;
    }
    case kVibrationdata: {
      mutable_vibrationdata()->::VibrationData::MergeFrom(from.vibrationdata());
      break;
    }
    case kCablepeakshcf100: {
      mutable_cablepeakshcf100()->::CablePeaksHCF100::MergeFrom(from.cablepeakshcf100());
      break;
    }
    case kSettlementdata: {
      mutable_settlementdata()->::SettlementData::MergeFrom(from.settlementdata());
      break;
    }
    case kStressdata: {
      mutable_stressdata()->::StressData::MergeFrom(from.stressdata());
      break;
    }
    case kInclihcf410V1: {
      mutable_inclihcf410v1()->::IncliHCF410V1::MergeFrom(from.inclihcf410v1());
      break;
    }
    case kGrtu1000: {
      mutable_grtu1000()->::GRTU1000::MergeFrom(from.grtu1000());
      break;
    }
    case kHos3000Ch4: {
      mutable_hos3000ch4()->::HOS3000CH4::MergeFrom(from.hos3000ch4());
      break;
    }
    case kDistancedata: {
      mutable_distancedata()->::DistanceData::MergeFrom(from.distancedata());
      break;
    }
    case kUart485Forhfs716Sample: {
      mutable_uart485forhfs716sample()->::Uart485ForHFS716Sample::MergeFrom(from.uart485forhfs716sample());
      break;
    }
    case kVoltagedatav1: {
      mutable_voltagedatav1()->::VoltageDataV1::MergeFrom(from.voltagedatav1());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void SensorUpMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorMessages.SensorUpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpMessage::CopyFrom(const SensorUpMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorMessages.SensorUpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpMessage::IsInitialized() const {
  return true;
}

void SensorUpMessage::Swap(SensorUpMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorUpMessage::InternalSwap(SensorUpMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  packet_name_.Swap(&other->packet_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(unix_time_, other->unix_time_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SensorUpMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SensorUpMessage_2eproto);
  return ::file_level_metadata_SensorUpMessage_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SensorMessages
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::SensorMessages::SensorUpMessage* Arena::CreateMaybeMessage< ::SensorMessages::SensorUpMessage >(Arena* arena) {
  return Arena::CreateInternal< ::SensorMessages::SensorUpMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
